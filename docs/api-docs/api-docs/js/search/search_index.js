var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/classes/AnimationsManager.html",[0,0.274,1,2.356]],["body/classes/AnimationsManager.html",[0,0.153,1,2.093,2,0.159,3,0.118,4,0.138,5,0.098,6,4.615,7,0.69,8,0.422,9,1.221,10,1.549,11,4.722,12,1.549,13,1.531,14,2.514,15,1.678,16,2.864,17,0.098,18,0.288,19,1.151,20,2.864,21,3.56,22,3.56,23,2.864,24,3.56,25,3.56,26,3.56,27,3.56,28,1.123,29,2.864,30,1.134,31,1.805,32,2.142,33,3.396,34,2.437,35,3.331,36,0.543,37,1.512,38,0.543,39,0.031,40,0.543,41,0.293,42,0.477,43,0.684,44,1.83,45,0.691,46,1.202,47,1.531,48,1.865,49,1.683,50,2.597,51,1.012,52,2.399,53,1.21,54,5.333,55,0.976,56,1.805,57,4.827,58,4.522,59,4.522,60,3.385,61,4.096,62,4.026,63,3.941,64,5.333,65,5.114,66,5.358,67,1.236,68,2.063,69,3.079,70,4.522,71,4.522,72,0.486,73,1.805,74,5.604,75,1.805,76,1.907,77,2.113,78,3.703,79,1.805,80,4.42,81,1.805,82,0.605,83,0.82,84,2.864,85,3.56,86,3.396,87,4.053,88,2.399,89,1.805,90,1.512,91,3.703,92,1.805,93,1.401,94,1.903,95,3.438,96,2.644,97,2.963,98,1.531,99,1.903,100,2.963,101,1.805,102,1.805,103,1.805,104,1.805,105,3.56,106,5.268,107,1.805,108,4.053,109,4.42,110,4.42,111,2.367,112,1.805,113,2.399,114,4.695,115,1.683,116,1.531,117,3.56,118,2.983,119,3.941,120,2.864,121,0.833,122,2.864,123,1.805,124,4.93,125,1.319,126,2.864,127,1.741,128,2.093,129,2.318,130,1.048,131,2.864,132,1.805,133,3.739,134,2.635,135,4.053,136,2.501,137,2.963,138,4.053,139,0.568,140,1.512,141,2.983,142,1.865,143,1.821,144,2.093,145,1.175,146,1.512,147,4.285,148,1.186,149,2.399,150,1.805,151,2.399,152,1.012,153,0.397,154,1.512,155,0.138,156,0.557,157,1.805,158,1.805,159,1.805,160,1.805,161,0.824,162,3.56,163,1.805,164,2.983,165,1.805,166,2.983,167,1.805,168,1.805,169,1.805,170,0.228,171,1.683,172,1.805,173,1.805,174,1.175,175,1.805,176,1.805,177,1.449,178,1.805,179,1.805,180,1.805,181,3.56,182,1.805,183,2.864,184,1.805,185,2.093,186,1.683,187,1.805,188,0.965,189,1.805,190,0.741,191,1.805,192,1.805,193,1.805,194,1.805,195,1.805,196,1.805,197,2.864,198,1.805,199,1.805,200,0.811,201,3.56,202,1.805,203,2.864,204,1.805,205,3.56,206,4.053,207,1.805,208,1.319,209,1.805,210,4.42,211,1.805,212,1.531,213,2.399,214,2.399,215,2.093,216,3.56,217,2.878,218,1.06,219,1.6,220,2.864,221,3.396,222,1.512,223,4.053,224,1.805,225,1.805,226,1.512,227,2.864,228,2.983,229,1.06,230,2.864,231,2.864,232,1.805,233,1.805,234,1.805,235,1.805,236,1.805,237,1.805,238,0.883,239,1.512,240,1.805,241,2.983,242,2.864,243,1.805,244,1.805,245,1.805,246,1.805,247,1.805,248,1.06,249,1.805,250,1.805,251,1.805,252,1.805,253,1.512,254,1.512,255,1.512,256,0.747,257,1.805,258,1.805,259,1.805,260,2.864,261,1.805,262,1.175,263,1.805,264,1.805,265,1.805,266,2.399,267,1.805,268,1.805,269,1.805,270,1.805,271,1.805,272,1.06,273,1.512,274,1.512,275,1.805,276,1.805,277,1.164,278,1.805,279,1.805,280,2.864,281,1.512,282,1.805,283,2.864,284,1.805,285,1.805,286,1.805,287,1.805,288,3.56,289,1.805,290,1.805,291,1.805,292,1.805,293,1.805,294,1.805,295,1.512,296,1.805,297,1.512,298,1.805,299,1.805,300,0.85,301,1.805,302,1.805,303,1.805,304,1.512,305,1.805,306,1.805,307,1.805,308,2.864,309,3.56,310,1.805,311,1.805,312,1.805,313,1.805,314,1.805,315,1.319,316,1.805,317,4.053,318,1.805,319,0.59,320,1.805,321,1.865,322,3.56,323,1.805,324,1.805,325,1.805,326,1.805,327,1.805,328,1.175,329,1.805,330,1.175,331,4.053,332,2.864,333,1.805,334,1.512,335,1.175,336,2.864,337,2.864,338,2.864,339,0.59,340,1.805,341,1.805,342,1.805,343,1.805,344,1.805,345,1.805,346,1.805,347,1.805,348,1.319,349,0.965,350,1.06,351,0.883,352,1.805,353,1.805,354,2.399,355,2.864,356,1.319,357,2.093,358,2.864,359,1.805,360,2.864,361,1.805,362,1.805,363,1.805,364,1.805,365,1.805,366,1.805,367,1.805,368,1.805,369,1.805,370,1.805,371,1.805,372,1.805,373,1.805,374,0.811,375,1.805,376,1.805,377,4.053,378,1.805,379,1.805,380,1.805,381,1.805,382,1.512,383,2.864,384,1.805,385,1.319,386,1.805,387,1.805,388,1.805,389,0.008,390,0.013,391,0.008]],["title/classes/CMSObjects.html",[0,0.274,392,2.356]],["body/classes/CMSObjects.html",[0,0.346,2,0.36,3,0.266,4,0.312,5,0.221,8,0.393,17,0.221,18,0.516,19,0.757,36,0.41,38,0.611,39,0.031,40,0.41,41,0.221,42,0.36,44,2.124,45,0.581,72,0.453,111,2.306,118,3.413,121,0.908,130,1.327,139,0.72,142,2.653,143,1.831,144,3.751,145,2.653,148,2.326,152,1.813,153,0.897,155,0.312,156,0.453,161,0.785,170,0.515,177,1.453,186,3.3,190,1.453,219,2.649,229,3.3,272,3.015,300,1.225,356,3.751,357,3.751,389,0.019,390,0.023,391,0.019,392,3.751,393,4.299,394,2.978,395,2.306,396,2.51,397,4.299,398,5.131,399,3.015,400,1.985,401,5.131,402,5.131,403,4.074,404,2.51,405,4.041,406,6.205,407,1.552,408,5.617,409,4.074,410,4.074,411,3.751,412,4.299,413,3.413,414,2.394,415,2.978,416,3.413,417,4.074,418,4.074,419,4.074,420,4.074,421,4.074,422,5.131,423,4.074,424,4.074,425,5.131,426,4.074,427,4.074,428,4.074,429,6.547,430,5.131,431,2.524,432,5.131,433,4.074,434,5.131,435,4.706,436,5.131,437,5.617,438,5.617,439,4.074,440,5.131,441,4.074,442,5.131,443,4.074,444,3.413,445,4.074,446,4.074,447,4.074,448,4.074,449,4.074,450,4.074,451,4.074,452,3.413,453,3.413,454,4.074,455,2.653,456,4.074,457,5.617,458,4.074,459,4.074,460,4.074,461,4.074,462,4.074,463,4.074,464,4.074,465,4.074,466,4.074,467,4.074,468,4.074,469,4.074]],["title/interfaces/Configuration.html",[470,1.576,471,1.448]],["body/interfaces/Configuration.html",[3,0.28,4,0.329,5,0.233,8,0.329,17,0.233,34,2.196,39,0.031,41,0.352,42,0.586,45,0.743,46,1.249,53,1.069,82,1.02,139,0.807,155,0.329,389,0.02,390,0.024,391,0.02,407,1.604,470,2.101,471,2.7,472,2.798,473,3.6,474,1.681,475,0.901,476,6.009,477,5.034,478,4.393,479,6.009,480,3.44,481,5.034,482,6.009,483,2.835,484,2.196,485,3.877,486,2.835,487,3.116,488,5.304,489,1.146,490,3.116,491,4.444,492,3.454,493,1.74,494,2.835,495,3.454,496,3.877,497,3.299,498,2.199,499,4.444,500,2.835,501,2.196,502,2.7,503,3.454,504,3.381,505,1.734,506,3.913,507,4.206,508,3.877,509,5.304,510,4.296,511,3.141,512,2.524,513,4.296,514,4.296]],["title/classes/Cut.html",[0,0.274,515,1.576]],["body/classes/Cut.html",[0,0.341,2,0.354,3,0.262,4,0.307,5,0.218,8,0.389,17,0.218,18,0.511,19,1.213,28,1.476,30,1.422,36,0.639,38,0.403,39,0.031,40,0.59,41,0.341,42,0.354,45,0.751,46,1.342,53,1.231,55,0.621,72,0.354,82,1.066,83,1.342,98,2.981,155,0.307,156,0.518,188,3.427,190,1.314,248,3.277,339,1.661,389,0.018,390,0.023,391,0.018,475,0.863,489,1.089,515,3.07,516,3.362,517,4.013,518,2.613,519,4.846,520,5.578,521,5.578,522,3.94,523,6.278,524,6.278,525,4.518,526,4.013,527,5.083,528,4.258,529,5.578,530,6.278,531,6.46,532,6.278,533,4.013,534,4.013,535,4.013,536,4.013,537,4.013,538,4.013,539,5.083,540,5.083,541,4.013,542,4.013]],["title/classes/EffectsManager.html",[0,0.274,543,2.099]],["body/classes/EffectsManager.html",[0,0.26,2,0.271,3,0.2,4,0.235,5,0.166,7,1.171,8,0.438,9,1.258,10,1.624,15,2.181,17,0.166,18,0.427,19,1.203,28,1.526,30,1.365,32,2.576,34,2.777,36,0.63,38,0.556,39,0.031,40,0.556,41,0.337,42,0.489,45,0.727,50,3.517,55,0.856,67,1.066,72,0.506,82,1.056,83,0.62,121,0.739,139,0.776,153,0.674,155,0.235,156,0.537,161,0.537,170,0.387,190,0.792,208,3.851,213,4.414,300,1.014,319,1.594,349,2.271,389,0.014,390,0.019,391,0.014,474,1.797,475,0.722,493,1.673,494,2.816,543,2.767,544,5.292,545,5.253,546,3.851,547,5.381,548,3.56,549,3.56,550,6.078,551,6.317,552,4.878,553,4.695,554,5.268,555,4.249,556,4.249,557,4.249,558,4.249,559,4.249,560,3.851,561,4.249,562,4.249,563,5.268,564,2.689,565,3.289,566,3.56,567,1.8,568,3.431,569,3.851,570,1.637,571,4.878,572,1.995,573,6.153,574,4.878,575,1.8,576,3.56,577,4.249,578,4.919,579,1.8,580,3.064,581,2.271,582,4.414,583,4.414,584,3.851,585,5.015,586,4.249,587,3.064,588,4.249,589,3.064,590,4.249,591,3.064,592,3.106,593,4.249,594,3.064,595,3.064,596,2.567,597,4.249,598,3.064,599,3.064,600,3.064,601,4.249,602,3.064,603,4.087,604,3.56,605,3.064,606,3.064,607,3.064,608,1.995,609,4.249,610,4.878,611,4.249,612,4.249,613,3.064,614,3.064,615,3.064,616,3.064,617,3.064,618,2.567,619,3.064,620,3.064,621,3.064,622,3.064,623,3.064,624,3.064,625,3.064]],["title/interfaces/EventDataLoader.html",[470,1.576,480,1.723]],["body/interfaces/EventDataLoader.html",[3,0.374,4,0.289,5,0.205,8,0.439,9,1.369,17,0.205,18,0.492,36,0.597,38,0.545,39,0.031,40,0.545,41,0.294,42,0.479,43,1.453,44,2.598,45,0.753,46,1.312,55,0.757,72,0.569,98,2.614,130,1.654,139,0.761,155,0.289,156,0.537,200,2.198,256,2.025,389,0.017,390,0.022,391,0.017,395,2.198,470,1.848,472,2.461,474,1.368,480,2.614,489,1.15,498,1.87,564,2.198,626,4.448,627,1.848,628,4.891,629,2.874,630,4.891,631,3.185,632,3.185,633,3.369,634,3.369,635,3.185,636,3.185,637,3.369,638,3.065,639,3.252,640,3.065,641,2.598,642,3.779,643,3.575,644,2.874,645,2.198,646,3.185,647,2.614,648,3.185,649,2.874,650,3.065,651,3.369,652,2.392,653,3.185,654,2.025,655,3.185,656,3.185,657,3.185,658,2.392,659,3.186,660,2.614,661,2.874,662,3.779,663,3.354,664,2.874,665,2.614,666,4.098,667,4.098,668,3.166,669,2.392,670,3.575,671,2.805,672,4.098,673,5.098,674,3.166,675,3.369,676,2.614,677,2.614,678,2.874,679,2.874,680,3.185,681,3.779,682,4.891,683,4.588,684,4.192,685,2.874,686,2.614,687,3.166,688,3.166]],["title/classes/ExportManager.html",[0,0.274,689,2.356]],["body/classes/ExportManager.html",[0,0.265,2,0.275,3,0.203,4,0.239,5,0.338,7,1.191,8,0.46,9,1.267,10,1.643,12,1.643,17,0.169,18,0.432,19,1.069,28,1.53,30,1.557,32,2.515,36,0.604,38,0.593,39,0.031,40,0.627,41,0.326,42,0.521,43,1.026,45,0.712,46,1.29,47,3.441,49,2.525,55,0.821,72,0.521,121,0.603,125,2.277,139,0.69,148,2.665,152,1.101,153,0.686,155,0.452,156,0.555,161,0.806,170,0.622,200,2.802,328,4.021,339,1.405,351,2.102,389,0.024,390,0.02,391,0.014,416,4.123,431,1.4,471,2.7,484,1.78,485,2.277,489,1.158,505,1.734,567,1.83,652,2.102,658,3.218,663,1.665,670,3.142,689,3.142,690,5.111,691,4.298,692,4.298,693,4.298,694,4.298,695,4.298,696,4.298,697,2.61,698,4.298,699,4.445,700,2.595,701,3.601,702,3.601,703,3.601,704,3.601,705,5.755,706,3.812,707,4.298,708,2.525,709,4.298,710,5.111,711,4.513,712,2.61,713,4.298,714,4.298,715,4.298,716,3.115,717,4.298,718,3.115,719,4.298,720,3.115,721,4.298,722,4.298,723,4.298,724,3.115,725,4.298,726,4.445,727,4.298,728,3.115,729,4.298,730,3.115,731,3.115,732,4.921,733,3.115,734,3.115,735,3.115,736,5.306,737,3.115,738,2.277,739,2.277,740,3.115,741,2.277,742,4.298,743,3.115,744,3.115,745,2.61,746,3.115,747,3.115,748,3.115,749,5.306,750,3.115,751,5.306,752,3.115,753,2.61,754,3.115,755,3.115,756,3.115,757,3.115,758,3.115,759,3.115,760,3.115,761,2.61,762,3.115,763,3.115,764,3.115,765,3.115,766,2.61,767,3.115,768,3.115,769,3.115,770,2.61,771,3.115,772,3.115]],["title/classes/Field.html",[0,0.274,522,2.099]],["body/classes/Field.html",[0,0.44,2,0.304,3,0.224,4,0.263,5,0.187,8,0.263,13,1.838,14,1.838,17,0.187,18,0.462,36,0.346,38,0.346,39,0.031,40,0.346,41,0.187,42,0.304,43,0.821,53,1.186,67,0.696,72,0.523,77,1.545,82,0.584,93,1.682,94,2.767,96,2.663,99,1.838,116,2.767,121,0.482,127,2.532,129,2.239,136,1.682,139,0.482,143,2.97,153,0.757,155,0.263,156,0.543,161,0.765,170,0.581,188,3.168,190,0.889,229,3.247,238,1.682,256,1.424,277,1.124,300,1.097,321,2.993,389,0.021,390,0.021,391,0.016,400,1.953,407,1.39,431,2.663,475,0.584,493,1.04,522,3.599,608,2.993,654,1.903,773,2.993,774,2.239,775,2.881,776,3.439,777,3.439,778,3.439,779,3.36,780,3.696,781,3.696,782,1.682,783,1.838,784,2.506,785,2.514,786,2.514,787,2.514,788,2.993,789,3.247,790,3.042,791,3.247,792,2.514,793,2.514,794,2.514,795,3.751,796,2.514,797,2.514,798,2.514,799,2.514,800,4.04,801,3.785,802,3.36,803,3.36,804,4.424,805,4.495,806,4.04,807,4.04,808,2.514,809,2.514,810,2.514,811,4.424,812,2.514,813,2.514,814,4.495,815,2.514,816,2.514,817,3.785,818,4.424,819,2.514,820,2.514,821,2.514,822,3.36,823,2.514,824,2.514,825,2.514,826,2.514,827,2.514,828,2.514,829,2.514,830,2.514,831,2.514,832,2.514,833,2.514,834,2.514,835,2.514,836,2.514,837,2.514,838,2.02,839,2.514,840,3.785,841,3.36,842,2.514,843,3.785,844,2.239,845,3.785,846,3.36,847,2.514,848,2.239,849,2.514,850,2.514,851,2.514,852,3.36,853,3.36,854,3.36,855,3.372,856,2.993,857,3.785,858,2.02,859,3.36,860,2.02,861,2.239,862,2.7,863,2.239,864,2.02,865,2.239,866,2.514,867,3.36,868,2.514,869,2.514,870,2.514,871,2.514,872,2.514,873,2.514,874,2.514]],["title/classes/ImportManager.html",[0,0.274,875,2.356]],["body/classes/ImportManager.html",[0,0.169,2,0.175,3,0.201,4,0.152,5,0.277,7,0.758,8,0.425,9,1.22,10,1.179,12,1.179,17,0.108,18,0.31,19,1.103,28,1.479,30,1.059,36,0.585,38,0.546,39,0.031,40,0.665,41,0.316,42,0.479,43,1.261,45,0.554,46,1.098,49,1.812,53,1.008,55,0.715,60,3.002,61,3.38,67,0.864,68,1.871,72,0.525,76,2.209,82,0.337,111,2.859,121,0.825,130,1.705,139,0.741,145,2.464,148,2.649,151,4.101,152,2.027,153,0.437,155,0.152,156,0.572,161,0.751,170,0.668,174,2.78,177,0.979,200,1.386,214,1.662,215,4.606,219,3,228,4.101,272,1.812,277,1.67,300,0.736,319,0.648,330,2.464,335,3.964,351,2.261,374,0.891,389,0.009,390,0.014,391,0.009,396,2.261,404,2.394,407,1.598,411,2.255,412,3.171,413,2.584,431,0.891,453,3.576,475,0.524,486,2.616,489,1.213,490,3.104,493,1.899,494,2.616,495,1.292,498,1.446,501,2.296,570,1.06,572,1.292,575,1.812,579,1.165,581,1.649,652,1.508,654,1.767,658,2.932,676,1.649,700,2.713,706,3.319,708,3.576,711,3.579,741,4.449,761,1.662,838,2.508,860,1.812,875,2.255,876,4.928,877,4.895,878,5.283,879,5.283,880,2.115,881,2.584,882,2.584,883,3.171,884,3.784,885,3.084,886,3.084,887,3.784,888,3.084,889,3.084,890,1.649,891,1.812,892,3.084,893,1.984,894,4.647,895,4.101,896,2.584,897,3.579,898,4.383,899,3.084,900,5.298,901,1.984,902,3.259,903,3.787,904,4.647,905,4.055,906,4.647,907,1.984,908,4.978,909,1.984,910,4.101,911,4.101,912,1.984,913,1.984,914,1.984,915,2.508,916,3.084,917,1.984,918,3.084,919,1.984,920,2.009,921,1.984,922,1.984,923,2.255,924,3.084,925,3.084,926,1.984,927,3.084,928,3.171,929,3.084,930,3.084,931,4.624,932,1.984,933,3.784,934,1.984,935,1.292,936,3.784,937,1.984,938,1.984,939,1.45,940,3.084,941,3.874,942,3.874,943,1.984,944,1.984,945,1.984,946,3.874,947,3.084,948,4.269,949,1.984,950,1.984,951,1.984,952,1.984,953,1.984,954,3.084,955,3.784,956,1.984,957,1.984,958,1.984,959,1.984,960,1.984,961,1.984,962,3.171,963,4.269,964,1.984,965,1.984,966,1.984,967,4.624,968,3.084,969,1.984,970,1.984,971,1.984,972,1.984,973,1.984,974,1.984,975,1.984,976,1.984,977,1.984,978,1.984,979,1.984,980,1.662,981,3.084,982,1.984,983,1.984,984,3.784,985,3.784,986,3.084,987,2.009,988,1.984,989,3.784,990,1.984,991,1.984,992,1.984,993,1.984,994,1.984,995,1.984,996,3.084,997,3.084,998,1.984,999,1.984,1000,1.984,1001,1.984,1002,1.984,1003,1.984]],["title/classes/InfoLogger.html",[0,0.274,641,1.334]],["body/classes/InfoLogger.html",[0,0.368,2,0.382,3,0.435,4,0.331,5,0.235,8,0.408,17,0.235,18,0.536,28,1.504,36,0.606,38,0.435,39,0.031,40,0.435,41,0.313,42,0.382,43,1.272,45,0.49,46,1.315,53,0.989,55,0.669,68,1.654,72,0.51,82,0.905,83,1.078,115,3.13,155,0.331,156,0.471,170,0.547,389,0.02,390,0.024,391,0.02,474,1.211,475,0.905,489,1.17,564,2.394,565,2.848,641,2.206,659,3.816,660,2.313,671,3.08,686,2.848,858,3.13,923,3.895,1004,5.183,1005,3.626,1006,5.773,1007,5.773,1008,1.822,1009,6.024,1010,4.327,1011,4.464,1012,4.327,1013,5.328,1014,5.328,1015,2.848,1016,3.13,1017,5.328,1018,3.749,1019,4.327,1020,5.328,1021,4.604,1022,4.327,1023,2.848,1024,4.327,1025,4.327,1026,4.327,1027,4.327,1028,4.327]],["title/classes/LHCbLoader.html",[0,0.274,1029,2.356]],["body/classes/LHCbLoader.html",[0,0.259,2,0.269,3,0.317,4,0.233,5,0.165,8,0.471,9,0.727,12,1.618,15,1.261,17,0.165,18,0.425,19,1.179,28,1.507,30,1.545,36,0.653,38,0.624,39,0.031,40,0.624,41,0.356,42,0.536,43,1.364,44,2.427,45,0.755,46,1.335,51,1.495,55,0.907,67,0.984,68,1.618,72,0.561,76,1.076,130,1.642,134,1.628,139,0.427,148,1.261,152,1.951,155,0.233,156,0.269,161,0.535,177,0.788,200,2.481,212,2.951,319,1.383,350,1.79,389,0.014,390,0.019,391,0.014,395,1.369,404,2.7,405,3.167,407,1.773,474,1.184,475,0.719,489,1.127,498,2.185,500,2.262,501,2.013,502,1.369,505,1.383,515,2.07,518,1.984,564,1.369,627,1.49,629,1.902,631,2.756,632,2.756,633,2.857,634,3.358,635,2.756,636,1.984,637,3.087,638,2.599,639,3.133,640,2.599,641,2.176,643,2.486,644,1.79,645,1.902,646,1.984,647,1.628,648,1.984,649,1.79,650,2.262,651,2.486,652,1.49,653,1.984,654,1.261,655,1.984,656,1.984,657,1.984,658,1.49,660,1.628,661,1.79,663,3.319,664,2.857,668,2.552,669,2.795,671,2.7,675,3.087,676,2.262,677,2.262,678,2.486,679,2.486,680,1.984,685,1.79,686,2.599,700,1.49,783,2.262,880,2.013,890,1.628,891,1.79,902,2.486,903,3.596,915,1.79,1008,0.921,1015,1.628,1016,1.79,1018,2.486,1023,2.599,1029,3.094,1030,4.788,1031,3.176,1032,5.522,1033,3.546,1034,4.369,1035,4.403,1036,3.094,1037,3.094,1038,3.094,1039,3.094,1040,3.094,1041,3.546,1042,5.321,1043,2.552,1044,2.552,1045,2.227,1046,2.552,1047,2.552,1048,2.227,1049,3.046,1050,2.552,1051,4.232,1052,3.046,1053,2.227,1054,3.841,1055,3.094,1056,2.552,1057,2.756,1058,2.227,1059,1.984,1060,2.227,1061,1.984,1062,3.094,1063,3.094,1064,2.227,1065,2.227,1066,3.094,1067,3.094,1068,3.094,1069,1.984,1070,2.227,1071,2.552,1072,3.167,1073,3.167,1074,2.227,1075,2.227,1076,1.79,1077,1.984,1078,2.552,1079,2.552,1080,2.552,1081,4.036,1082,2.552,1083,2.552,1084,2.227,1085,2.552,1086,2.227,1087,2.227,1088,2.227,1089,2.552,1090,3.094,1091,2.227,1092,2.552,1093,1.984,1094,2.227,1095,2.227,1096,2.552,1097,4.232,1098,3.046,1099,2.552,1100,3.046,1101,2.552,1102,3.046,1103,3.046,1104,4.232,1105,3.046,1106,4.232]],["title/classes/LoadingManager.html",[0,0.274,880,1.334]],["body/classes/LoadingManager.html",[0,0.262,2,0.273,3,0.201,4,0.236,5,0.168,7,1.18,8,0.45,9,1.432,10,1.18,17,0.168,18,0.429,19,1.23,28,1.499,30,1.37,36,0.64,37,2.587,38,0.577,39,0.031,40,0.603,41,0.343,42,0.507,53,1.093,55,0.99,67,1.123,69,3.294,72,0.53,76,2.261,82,0.999,83,1.191,98,2.283,155,0.236,156,0.52,161,0.54,170,0.39,177,1.105,218,2.51,221,4.428,315,4.72,339,1.396,389,0.014,390,0.02,391,0.014,400,1.731,475,0.725,483,1.65,484,2.376,489,1.182,490,3.523,501,2.551,505,1.601,525,4.195,570,1.65,579,1.814,665,1.65,706,3.821,880,2.188,890,2.618,1008,1.864,1107,5.361,1108,4.195,1109,4.898,1110,4.898,1111,4.898,1112,4.898,1113,4.272,1114,4.272,1115,4.272,1116,4.272,1117,4.272,1118,4.272,1119,4.272,1120,3.579,1121,3.087,1122,3.087,1123,3.864,1124,5.466,1125,4.272,1126,5.43,1127,4.272,1128,3.087,1129,4.272,1130,3.087,1131,5.997,1132,4.272,1133,3.087,1134,2.782,1135,4.272,1136,3.087,1137,4.272,1138,2.257,1139,4.272,1140,3.087,1141,4.272,1142,4.272,1143,3.087,1144,4.898,1145,1.814,1146,3.087,1147,3.087,1148,4.898,1149,4.272,1150,3.087,1151,3.087,1152,3.087,1153,3.087,1154,3.087,1155,4.272,1156,3.087,1157,3.087,1158,3.579,1159,3.087,1160,4.272,1161,3.087,1162,3.087,1163,4.272,1164,3.087,1165,4.272,1166,3.087,1167,3.087,1168,3.087,1169,3.087,1170,3.087]],["title/classes/PhoenixLoader.html",[0,0.274,1031,1.576]],["body/classes/PhoenixLoader.html",[0,0.176,2,0.183,3,0.308,4,0.159,5,0.113,8,0.421,9,0.93,12,1.671,15,1.322,17,0.113,18,0.321,19,1.021,28,1.431,30,1.089,32,0.793,36,0.603,38,0.583,39,0.031,40,0.565,41,0.349,42,0.486,43,1.313,44,2.458,45,0.734,46,1.213,47,1.109,51,1.545,53,0.812,55,0.83,67,0.885,68,1.221,72,0.519,76,1.129,77,0.932,82,0.352,83,0.788,93,1.015,98,1.109,111,1.75,116,1.707,121,0.813,130,1.654,134,1.109,136,1.562,139,0.788,148,1.81,152,2.152,153,0.703,155,0.159,156,0.529,161,0.815,170,0.492,177,1.221,190,0.826,200,2.334,212,3.054,217,1.351,226,1.739,241,2.676,272,1.219,300,0.495,304,2.676,339,1.044,350,1.877,351,1.015,374,0.932,389,0.009,390,0.015,391,0.009,395,1.435,399,1.219,404,1.562,405,3.382,407,1.776,414,1.219,415,1.517,435,1.739,474,1.223,475,0.661,480,2.081,489,1.103,497,1.707,498,1.985,500,1.707,501,1.81,502,1.75,504,1.219,505,1.429,511,1.517,512,1.219,515,2.309,518,2.08,564,1.75,627,1.015,629,1.75,631,2.08,632,2.08,633,2.288,634,2.569,635,2.08,636,2.08,637,3.15,638,2.665,639,3.204,640,2.665,641,2.22,643,2.569,644,1.877,645,1.965,646,2.08,647,2.081,648,2.08,649,1.877,650,2.337,651,2.288,652,1.562,653,2.08,654,1.322,655,2.08,656,2.08,657,2.08,658,1.562,659,1.219,660,1.707,661,1.219,663,3.278,664,3.407,665,1.109,669,2.795,671,2.438,675,3.052,676,1.707,677,1.707,678,2.288,679,2.774,680,1.351,684,3.645,685,1.219,686,2.665,700,1.015,780,1.219,781,1.219,783,2.337,858,1.219,880,2.15,890,1.707,891,1.877,897,2.335,903,2.08,915,1.219,935,1.351,939,1.517,1008,1.178,1015,1.707,1016,2.288,1018,3.407,1023,2.665,1031,1.562,1034,4.177,1036,2.846,1037,2.335,1038,2.335,1039,2.335,1040,2.335,1045,2.335,1048,2.335,1053,1.517,1054,4.021,1055,3.645,1057,2.848,1058,3.451,1059,2.08,1060,2.335,1061,2.08,1062,3.196,1063,3.196,1064,2.335,1065,2.335,1066,3.196,1067,4.382,1068,3.196,1069,2.848,1070,1.517,1072,3.492,1073,3.382,1074,2.335,1075,2.335,1076,1.877,1077,2.08,1081,3.797,1084,2.335,1086,3.196,1087,2.335,1088,2.335,1090,3.196,1091,1.517,1093,1.351,1094,1.517,1095,1.517,1099,1.739,1101,1.739,1134,1.351,1171,5.065,1172,3.194,1173,3.194,1174,2.075,1175,2.075,1176,2.075,1177,2.075,1178,2.075,1179,1.739,1180,2.075,1181,2.075,1182,2.075,1183,2.075,1184,2.075,1185,2.075,1186,2.075,1187,2.075,1188,2.075,1189,1.739,1190,1.739,1191,2.075,1192,2.075,1193,2.075,1194,1.739,1195,2.075,1196,2.075,1197,2.075,1198,2.075,1199,3.194,1200,4.177,1201,3.194,1202,2.075,1203,2.075,1204,3.194,1205,4.373,1206,2.075,1207,2.075,1208,2.075,1209,2.075,1210,2.075,1211,2.075,1212,2.075,1213,2.075,1214,2.075,1215,2.075,1216,2.075,1217,2.075,1218,3.194,1219,4.373,1220,3.194,1221,3.194,1222,2.075,1223,2.075,1224,2.075,1225,2.075,1226,1.517,1227,2.075,1228,2.075,1229,4.373,1230,2.075,1231,3.194,1232,2.075,1233,2.075,1234,2.075,1235,2.075,1236,2.075,1237,2.075,1238,2.075,1239,1.739,1240,2.075,1241,2.075,1242,2.075,1243,4.373,1244,2.075,1245,3.194,1246,2.075,1247,2.075,1248,2.075,1249,2.075,1250,4.721,1251,2.075,1252,2.075,1253,2.075,1254,2.075,1255,2.075,1256,2.075,1257,1.739,1258,2.075,1259,2.075,1260,2.075,1261,3.194,1262,2.075,1263,2.075,1264,2.075,1265,2.075,1266,2.075,1267,1.739,1268,2.075,1269,1.739,1270,2.075,1271,2.075,1272,2.075,1273,3.194,1274,2.075,1275,2.075,1276,2.075,1277,3.194,1278,2.075,1279,3.194,1280,2.075,1281,2.075,1282,2.075,1283,2.676,1284,2.075,1285,1.739,1286,2.075,1287,2.075,1288,2.075,1289,2.075,1290,2.075,1291,3.194,1292,2.075,1293,3.194,1294,2.075,1295,2.075,1296,2.075,1297,2.676,1298,2.075,1299,2.075,1300,2.075,1301,1.351,1302,1.517,1303,2.075,1304,2.075,1305,2.075,1306,2.075,1307,2.075,1308,2.075,1309,2.075,1310,3.894,1311,3.194,1312,3.194,1313,2.075,1314,2.075,1315,2.075,1316,3.894,1317,3.194,1318,2.075,1319,1.739,1320,2.075,1321,2.075,1322,1.739,1323,2.075,1324,2.075,1325,2.075,1326,3.194,1327,2.075,1328,2.075,1329,2.075,1330,2.075,1331,2.075,1332,2.075,1333,2.075,1334,2.075,1335,2.075,1336,2.075]],["title/classes/PhoenixMenuNode.html",[0,0.274,502,1.448]],["body/classes/PhoenixMenuNode.html",[0,0.194,2,0.201,3,0.149,4,0.174,5,0.124,8,0.441,17,0.124,18,0.345,28,0.985,30,0.96,36,0.638,38,0.568,39,0.031,40,0.66,41,0.343,42,0.499,43,0.819,48,2.988,53,0.637,55,0.89,67,1.212,68,2.051,72,0.546,82,0.878,83,1.235,111,1.024,121,0.32,130,1.488,137,1.666,155,0.174,156,0.543,161,0.757,170,0.679,177,1.066,190,1.066,248,2.015,256,2.452,277,1.805,300,1.235,319,0.745,334,3.845,339,1.69,349,3.076,350,2.015,389,0.01,390,0.016,391,0.01,471,2.323,475,0.583,484,1.42,489,1.202,493,1.829,497,3.5,502,2.887,503,1.484,504,3.956,505,1.936,512,3.74,592,2.507,629,1.024,645,1.541,784,2.383,902,3.244,962,5.333,987,1.484,1008,1.388,1076,3.519,1126,4.123,1145,1.339,1269,5.184,1322,1.909,1337,5.333,1338,1.909,1339,4.124,1340,4.124,1341,5.755,1342,5.243,1343,4.124,1344,5.99,1345,5.018,1346,4.124,1347,3.43,1348,3.43,1349,3.43,1350,3.43,1351,3.43,1352,4.589,1353,2.874,1354,3.43,1355,3.43,1356,4.589,1357,1.909,1358,3.43,1359,5.521,1360,2.279,1361,2.279,1362,2.279,1363,2.279,1364,2.279,1365,2.279,1366,3.43,1367,2.279,1368,2.279,1369,2.279,1370,3.43,1371,3.43,1372,2.279,1373,3.43,1374,2.279,1375,3.857,1376,3.43,1377,2.279,1378,4.123,1379,2.874,1380,3.43,1381,3.43,1382,2.279,1383,4.626,1384,4.589,1385,4.589,1386,3.43,1387,2.279,1388,2.874,1389,2.279,1390,2.874,1391,2.279,1392,2.279,1393,3.43,1394,2.279,1395,3.43,1396,2.279,1397,3.43,1398,3.43,1399,3.43,1400,3.43,1401,2.279,1402,3.455,1403,1.909,1404,2.279,1405,4.921,1406,3.43,1407,3.43,1408,2.279,1409,2.279,1410,2.279,1411,3.43,1412,2.279,1413,2.279,1414,2.279,1415,2.279,1416,2.279,1417,2.279,1418,1.909,1419,2.279,1420,2.279,1421,2.279,1422,2.279,1423,2.279,1424,2.279,1425,2.279,1426,2.279,1427,4.124,1428,2.279,1429,1.909,1430,2.279,1431,4.589,1432,2.279,1433,2.279,1434,2.279,1435,2.279,1436,2.279,1437,2.279,1438,4.124,1439,2.279,1440,2.279,1441,2.279,1442,2.279,1443,2.279,1444,3.43,1445,2.279,1446,2.279,1447,2.279,1448,2.279,1449,3.43,1450,2.279,1451,2.279,1452,2.279,1453,4.124,1454,1.909,1455,2.279,1456,2.279,1457,2.279,1458,3.43,1459,2.279,1460,3.43,1461,2.279,1462,2.279,1463,2.279,1464,2.279,1465,2.279,1466,2.279,1467,2.279,1468,2.279,1469,2.279,1470,2.279,1471,3.43,1472,2.279,1473,2.279,1474,2.279,1475,2.279,1476,2.279,1477,2.279,1478,2.279,1479,4.124,1480,2.279,1481,2.279,1482,2.279,1483,4.124,1484,2.279,1485,2.279]],["title/classes/PhoenixObjects.html",[0,0.274,399,1.894]],["body/classes/PhoenixObjects.html",[0,0.241,2,0.251,3,0.351,4,0.217,5,0.154,8,0.428,17,0.154,18,0.405,19,0.946,36,0.541,38,0.657,39,0.031,40,0.541,41,0.292,42,0.475,44,1.667,45,0.456,72,0.528,97,2.074,111,2.289,115,1.667,116,1.517,119,3.373,121,0.903,127,2.289,130,1.625,133,4.427,134,3.071,139,0.656,141,2.377,142,2.622,143,1.275,144,2.943,145,3.048,146,2.377,147,3.373,148,2.507,149,2.377,152,1.003,153,0.624,155,0.217,156,0.45,161,0.837,164,2.377,166,3.373,170,0.743,177,1.317,186,2.75,190,1.21,217,3.824,218,1.667,219,2.856,238,1.388,239,4.267,255,2.377,262,2.622,266,3.373,272,2.366,277,1.53,281,3.921,295,2.377,297,2.377,300,0.961,330,3.317,335,3.99,356,2.074,357,2.074,385,2.074,389,0.013,390,0.018,391,0.013,394,2.074,395,1.809,396,1.969,399,2.366,400,2.22,404,2.921,407,1.806,411,2.074,414,1.667,415,2.074,431,1.809,452,2.377,455,3.317,505,1.316,669,2.491,782,1.388,844,3.048,861,3.824,862,1.667,920,1.848,928,3.921,987,1.848,1194,2.377,1226,2.943,1283,3.921,1285,4.814,1297,3.373,1301,3.317,1302,3.723,1486,4.681,1487,4.026,1488,4.026,1489,4.026,1490,4.026,1491,4.026,1492,4.026,1493,2.838,1494,4.026,1495,2.838,1496,5.587,1497,2.838,1498,2.838,1499,4.026,1500,4.026,1501,2.838,1502,4.026,1503,2.838,1504,5.746,1505,4.68,1506,2.838,1507,2.838,1508,2.074,1509,4.68,1510,2.838,1511,4.026,1512,4.68,1513,2.838,1514,1.848,1515,2.838,1516,2.074,1517,2.838,1518,2.838,1519,2.838,1520,2.838,1521,2.377,1522,4.026,1523,2.838,1524,5.093,1525,5.378,1526,2.838,1527,2.838,1528,2.838,1529,2.838,1530,2.838,1531,2.838,1532,4.68,1533,2.377,1534,4.68,1535,2.377,1536,5.378,1537,3.921,1538,4.68,1539,3.373,1540,2.838,1541,2.838,1542,4.026,1543,2.838,1544,2.838,1545,2.838,1546,2.838,1547,2.838,1548,2.838,1549,2.838,1550,4.68,1551,2.838,1552,2.838,1553,2.838,1554,2.838,1555,2.838,1556,2.838,1557,5.093,1558,2.377,1559,2.838,1560,2.838,1561,2.838,1562,2.838,1563,4.68,1564,2.838,1565,2.838,1566,2.838,1567,2.838,1568,2.838,1569,4.026,1570,2.838,1571,2.838,1572,2.838,1573,2.838,1574,2.838,1575,5.378,1576,2.838,1577,2.838,1578,5.093,1579,2.838,1580,2.838,1581,2.838,1582,2.838,1583,2.838,1584,4.026,1585,2.074,1586,2.838,1587,2.838,1588,2.838,1589,4.026,1590,4.026,1591,4.026,1592,4.026,1593,4.026,1594,2.838,1595,2.838,1596,2.838,1597,2.838,1598,2.838,1599,2.838,1600,2.838,1601,2.838,1602,2.838,1603,2.838,1604,2.838,1605,2.838,1606,2.838,1607,2.838,1608,4.026,1609,2.838,1610,2.838,1611,2.838,1612,2.838,1613,2.838]],["title/classes/PresetView.html",[0,0.274,506,2.099]],["body/classes/PresetView.html",[0,0.357,2,0.371,3,0.274,4,0.322,5,0.228,8,0.401,17,0.228,18,0.526,19,1.2,30,1.176,34,2.539,36,0.629,38,0.422,39,0.031,40,0.658,41,0.333,42,0.371,53,1.139,55,0.65,67,0.851,72,0.462,96,2.81,155,0.322,156,0.503,170,0.531,185,4.359,319,2.044,339,1.71,389,0.019,390,0.024,391,0.019,475,0.889,486,3.187,487,3.937,489,1.221,506,3.407,507,4.856,508,3.072,1342,5.58,1357,4.384,1402,3.521,1403,4.773,1614,5.313,1615,3.521,1616,4.202,1617,4.202,1618,3.521,1619,6.41,1620,5.697,1621,5.962,1622,5.232,1623,5.962,1624,4.202,1625,4.202,1626,4.202,1627,4.202,1628,4.202,1629,4.202,1630,4.202]],["title/classes/PrettySymbols.html",[0,0.274,1631,2.099]],["body/classes/PrettySymbols.html",[0,0.332,2,0.345,3,0.255,4,0.299,5,0.212,8,0.422,17,0.212,18,0.502,19,1.023,36,0.554,38,0.627,39,0.031,40,0.502,41,0.326,42,0.441,51,1.381,72,0.487,82,0.664,83,0.791,93,1.911,121,0.701,127,1.911,130,1.698,155,0.299,156,0.53,161,0.759,170,0.697,253,3.275,339,1.278,389,0.018,390,0.023,391,0.018,395,2.246,400,2.255,455,2.545,475,0.849,483,2.671,489,1.078,665,2.089,788,3.255,789,2.936,790,2.936,791,2.936,1008,1.182,1059,3.998,1418,4.866,1516,2.857,1585,3.654,1631,3.255,1632,4.866,1633,3.275,1634,6.567,1635,5.143,1636,4.616,1637,4.998,1638,4.998,1639,4.187,1640,4.866,1641,4.998,1642,4.998,1643,4.998,1644,5.807,1645,5.807,1646,5.807,1647,5.807,1648,4.187,1649,3.908,1650,4.998,1651,3.908,1652,6.319,1653,4.998,1654,4.998,1655,3.908,1656,6.241,1657,6.002,1658,5.51,1659,3.908,1660,3.908,1661,3.908,1662,3.908,1663,3.908,1664,3.908,1665,5.51,1666,3.908,1667,4.998,1668,3.908,1669,3.908,1670,3.908,1671,4.998,1672,3.908,1673,3.908,1674,3.908,1675,3.908,1676,3.908,1677,3.275,1678,3.908,1679,5.807,1680,3.908,1681,3.908,1682,3.908,1683,3.275,1684,4.998,1685,3.908,1686,3.908,1687,3.908,1688,3.908,1689,3.908,1690,3.908,1691,3.908]],["title/classes/RKHelper.html",[0,0.274,1514,2.099]],["body/classes/RKHelper.html",[0,0.327,2,0.34,3,0.251,4,0.294,5,0.209,8,0.419,14,3.085,17,0.209,18,0.58,19,0.919,36,0.497,38,0.497,39,0.031,40,0.497,41,0.313,42,0.437,43,1.181,45,0.56,51,1.748,53,0.919,55,0.595,67,1.107,72,0.562,82,0.929,83,0.778,94,2.056,96,2.223,121,0.694,127,2.419,133,4.22,136,2.419,139,0.694,143,2.683,153,0.846,155,0.294,156,0.483,161,0.786,170,0.626,171,2.26,177,1.279,212,3.366,217,4.102,238,2.419,277,1.617,300,1.459,374,2.223,389,0.018,390,0.023,391,0.018,400,2.16,444,3.222,455,2.505,483,2.644,493,1.163,629,1.728,669,2.419,780,2.26,781,2.26,782,3.041,789,2.26,790,2.26,791,3.653,795,3.759,855,2.505,862,3.391,863,3.221,864,2.906,865,3.221,905,2.811,1267,3.222,1514,3.221,1516,3.616,1521,4.836,1533,4.144,1535,4.144,1537,4.144,1539,3.222,1585,3.616,1639,4.144,1677,4.144,1683,3.222,1692,4.581,1693,3.222,1694,5.468,1695,4.947,1696,3.846,1697,3.846,1698,4.947,1699,4.947,1700,4.144,1701,4.947,1702,3.846,1703,5.468,1704,3.846,1705,3.846,1706,3.846,1707,3.846,1708,3.846,1709,3.846,1710,3.846,1711,4.581,1712,3.222,1713,3.846,1714,3.846,1715,5.468,1716,3.846,1717,4.947,1718,3.846,1719,3.846,1720,3.846,1721,3.846,1722,3.846,1723,3.846,1724,3.846,1725,3.846,1726,3.846,1727,3.846,1728,3.846,1729,3.846,1730,3.846,1731,3.846,1732,3.222,1733,3.846,1734,3.846,1735,3.846,1736,3.846,1737,3.846,1738,3.846,1739,3.846,1740,3.846,1741,3.846]],["title/classes/RendererManager.html",[0,0.274,35,2.099]],["body/classes/RendererManager.html",[0,0.203,2,0.211,3,0.156,4,0.183,5,0.13,7,0.914,8,0.463,9,1.257,10,1.36,11,1.749,12,1.36,15,2.319,17,0.23,18,0.358,19,1.193,28,1.497,30,1.188,32,2.141,34,2.447,35,2.316,36,0.641,38,0.608,39,0.031,40,0.602,41,0.336,42,0.529,45,0.634,49,2.09,50,3.947,51,1.5,53,0.444,55,0.926,60,3.291,72,0.565,77,1.598,82,0.798,83,1.179,113,2.98,121,0.499,130,0.92,139,0.336,153,0.783,155,0.183,156,0.543,161,0.724,170,0.69,177,0.619,190,0.92,218,2.762,256,0.991,277,1.388,300,1.014,319,1.956,330,2.316,339,1.163,348,4.095,349,1.901,351,2.575,389,0.011,390,0.016,391,0.011,396,2.299,474,1.473,475,0.604,478,3.436,487,2.09,489,0.978,490,2.762,491,3.939,492,3.061,493,1.81,525,1.749,553,4.095,560,4.869,565,2.513,566,5.067,568,3.648,569,4.095,570,1.901,572,1.558,576,2.98,578,2.98,581,1.901,592,2.6,618,2.005,671,3.108,686,2.513,697,2.005,708,2.494,712,2.005,1008,1.076,1134,2.316,1138,1.749,1742,5.364,1743,4.246,1744,4.701,1745,5.024,1746,6.422,1747,3.557,1748,3.557,1749,4.701,1750,4.701,1751,4.701,1752,4.701,1753,2.98,1754,3.557,1755,4.701,1756,3.557,1757,3.557,1758,3.557,1759,3.557,1760,3.557,1761,3.557,1762,3.557,1763,3.557,1764,4.695,1765,4.88,1766,2.005,1767,3.557,1768,4.795,1769,3.557,1770,3.557,1771,1.749,1772,6.103,1773,3.557,1774,2.393,1775,3.557,1776,3.557,1777,2.393,1778,2.005,1779,2.393,1780,2.393,1781,4.701,1782,3.557,1783,2.393,1784,2.09,1785,3.557,1786,2.393,1787,3.557,1788,2.393,1789,3.557,1790,2.393,1791,3.557,1792,3.557,1793,3.557,1794,2.393,1795,3.557,1796,2.393,1797,3.557,1798,2.393,1799,3.557,1800,3.557,1801,2.393,1802,3.557,1803,3.557,1804,3.557,1805,3.557,1806,5.265,1807,2.393,1808,3.557,1809,4.701,1810,4.701,1811,4.701,1812,3.557,1813,2.393,1814,2.393,1815,2.005,1816,2.393,1817,2.393,1818,2.393,1819,2.393,1820,2.393,1821,3.557,1822,4.246,1823,2.393,1824,2.393,1825,2.393,1826,2.393,1827,2.393,1828,2.393,1829,2.393,1830,2.393,1831,2.393,1832,2.393,1833,2.393,1834,3.557,1835,2.393,1836,2.393,1837,2.393,1838,3.557,1839,4.701,1840,2.393,1841,2.393,1842,2.393,1843,2.393,1844,3.557,1845,2.393,1846,2.393,1847,2.393,1848,3.557]],["title/classes/RungeKutta.html",[0,0.274,782,1.576]],["body/classes/RungeKutta.html",[0,0.423,2,0.282,3,0.208,4,0.244,5,0.173,8,0.381,13,2.334,14,2.334,17,0.173,18,0.439,36,0.439,38,0.439,39,0.031,40,0.439,41,0.27,42,0.386,43,1.042,53,1.219,55,0.493,67,1.008,72,0.534,77,1.432,82,0.541,83,0.645,93,2.136,94,2.863,96,2.787,99,1.704,116,3,121,0.447,127,2.62,129,2.844,136,2.136,139,0.447,143,2.956,153,0.701,155,0.244,156,0.534,161,0.751,170,0.552,188,3.374,190,1.129,229,3.148,238,2.136,256,1.32,277,1.427,300,1.279,321,2.844,389,0.02,390,0.02,391,0.015,400,2.048,407,1.62,431,2.604,475,0.742,483,1.704,493,0.964,608,3.489,654,2.218,773,3.244,774,2.076,779,3.916,780,3.756,781,3.756,782,2.136,783,2.334,784,2.613,785,3.192,786,3.192,787,3.192,788,3.244,789,3.405,790,3.148,791,3.405,792,2.33,793,2.33,794,2.33,795,3.655,796,2.33,797,2.33,798,2.33,799,2.33,800,3.916,801,3.641,802,3.192,803,3.192,804,4.338,805,4.417,806,3.916,807,3.916,808,2.33,809,2.33,810,2.33,811,4.338,812,2.33,813,2.33,814,4.417,815,2.33,816,2.33,817,3.641,818,4.338,819,2.33,820,2.33,821,2.33,822,3.192,823,2.33,824,2.33,825,2.33,826,2.33,827,2.33,828,2.33,829,2.33,830,2.33,831,2.33,832,2.33,833,2.33,834,2.33,835,2.33,836,2.33,837,2.33,838,1.873,839,2.33,840,3.641,841,3.192,842,2.33,843,3.641,844,2.076,845,3.641,846,3.192,847,2.33,848,2.076,849,2.33,850,2.33,851,2.33,852,4.102,853,3.916,854,3.916,855,3.655,856,3.489,857,4.102,858,2.565,859,3.916,860,2.565,861,2.844,862,3.148,863,2.844,864,2.565,865,2.844,866,3.192,867,3.192,868,2.33,869,2.33,870,2.33,871,2.33,872,2.33,873,2.33,874,2.33,1849,3.188,1850,3.188,1851,3.188]],["title/classes/ScriptLoader.html",[0,0.274,1852,2.356]],["body/classes/ScriptLoader.html",[0,0.326,2,0.338,3,0.25,4,0.293,5,0.208,8,0.418,9,0.914,17,0.208,18,0.496,19,0.916,36,0.496,38,0.496,39,0.031,40,0.496,41,0.268,42,0.509,45,0.559,46,1.167,51,1.354,55,0.844,67,0.775,68,1.464,69,2.637,72,0.482,76,1.743,82,0.651,83,0.775,121,0.766,139,0.537,155,0.293,156,0.509,161,0.786,170,0.484,177,0.991,222,3.209,274,4.134,300,1.178,389,0.017,390,0.023,391,0.017,400,2.158,484,2.572,486,3.081,489,1.134,492,3.213,498,1.886,501,2.386,519,3.607,627,1.873,645,1.721,706,3.588,880,2.469,898,4.213,935,2.495,941,3.209,942,4.134,946,4.829,1008,1.159,1061,3.213,1179,3.209,1345,4.134,1852,3.607,1853,3.99,1854,6.615,1855,5.764,1856,4.934,1857,5.204,1858,4.934,1859,4.934,1860,4.934,1861,4.175,1862,3.831,1863,4.934,1864,4.934,1865,4.934,1866,6.358,1867,5.764,1868,5.458,1869,5.764,1870,4.934,1871,4.934,1872,4.934,1873,4.934,1874,2.8,1875,2.8,1876,3.209,1877,3.209,1878,3.831,1879,3.831,1880,4.934,1881,3.831,1882,3.831,1883,3.831,1884,3.831,1885,3.831,1886,3.831,1887,3.831,1888,3.831,1889,3.831,1890,3.831,1891,3.831,1892,3.831,1893,3.831,1894,3.831,1895,3.831,1896,3.831,1897,3.831,1898,3.831,1899,3.831,1900,3.831,1901,3.831,1902,3.831,1903,3.831,1904,4.934,1905,3.831,1906,5.764,1907,3.831,1908,3.831,1909,3.831,1910,3.831,1911,3.831,1912,3.831,1913,3.831]],["title/classes/SelectionManager.html",[0,0.274,1914,2.356]],["body/classes/SelectionManager.html",[0,0.191,2,0.198,3,0.221,4,0.172,5,0.122,7,0.857,8,0.409,9,1.39,10,1.965,12,1.295,15,1.884,17,0.122,18,0.341,19,1.13,28,1.585,30,1.367,32,2.437,34,2.555,36,0.636,38,0.517,39,0.031,40,0.552,41,0.337,42,0.432,43,1.087,44,2.023,45,0.726,46,1.112,47,3.064,49,1.991,51,1.197,53,0.417,55,0.85,67,1.16,69,2.747,72,0.506,76,1.608,82,0.773,83,1.04,121,0.686,130,1.685,139,0.686,148,2.128,152,1.197,153,0.494,155,0.172,156,0.506,161,0.746,170,0.576,171,3.368,177,0.876,186,1.318,190,0.876,208,3.757,218,1.991,277,0.733,300,1.227,319,1.68,349,1.811,389,0.01,390,0.015,391,0.01,404,1.097,407,1.377,431,1.523,474,1.715,475,0.773,483,2.183,489,1.109,493,1.614,495,3.183,500,1.199,543,3.927,545,4.095,546,4.017,547,4.306,548,3.814,549,3.814,564,2.045,565,2.747,567,1.318,568,3.733,569,3.327,575,1.318,581,1.811,582,2.839,583,3.814,584,3.757,585,4.306,596,2.839,603,2.839,604,1.879,641,2.496,645,1.008,654,1.403,659,1.991,660,2.433,665,2.183,683,3.327,726,1.879,848,2.207,920,2.207,1008,0.678,1015,2.747,1016,2.674,1021,2.986,1023,2.433,1123,2.477,1138,1.64,1158,1.879,1301,4.104,1302,4.408,1319,1.879,1558,1.879,1631,1.461,1635,1.879,1753,3.422,1914,2.477,1915,5.322,1916,4.085,1917,4.085,1918,4.085,1919,4.085,1920,4.085,1921,4.085,1922,4.085,1923,4.306,1924,4.552,1925,4.552,1926,3.814,1927,3.389,1928,3.389,1929,3.389,1930,3.389,1931,3.389,1932,3.389,1933,3.389,1934,3.389,1935,3.389,1936,3.389,1937,1.879,1938,5.002,1939,3.389,1940,2.477,1941,1.879,1942,2.243,1943,3.389,1944,3.389,1945,2.243,1946,3.389,1947,2.243,1948,5.97,1949,5.14,1950,2.243,1951,4.552,1952,2.243,1953,3.389,1954,2.477,1955,3.389,1956,3.389,1957,1.879,1958,1.879,1959,2.243,1960,2.839,1961,4.603,1962,2.243,1963,1.879,1964,2.839,1965,4.552,1966,2.243,1967,2.839,1968,2.839,1969,3.389,1970,3.389,1971,2.243,1972,2.243,1973,3.389,1974,2.243,1975,4.085,1976,3.389,1977,3.389,1978,1.879,1979,3.389,1980,1.879,1981,4.085,1982,2.243,1983,2.243,1984,2.243,1985,2.243,1986,2.243,1987,2.243,1988,4.085,1989,2.243,1990,2.243,1991,2.243,1992,2.243,1993,1.879,1994,2.243,1995,2.243,1996,2.243,1997,2.243,1998,2.243,1999,2.243,2000,2.243,2001,5.14,2002,2.243,2003,3.389,2004,2.243,2005,4.085,2006,2.243,2007,3.389,2008,2.243,2009,2.243,2010,2.243,2011,2.243,2012,2.243,2013,2.243,2014,4.085,2015,2.243,2016,4.887,2017,2.243,2018,2.243,2019,2.243,2020,2.243,2021,3.389,2022,2.243,2023,2.243,2024,2.243,2025,2.243,2026,2.243,2027,2.243,2028,2.243,2029,2.243,2030,2.243,2031,2.243,2032,2.243,2033,2.243,2034,2.243,2035,3.389,2036,2.243,2037,1.879,2038,2.243,2039,2.243,2040,2.243,2041,2.243,2042,2.243,2043,3.389,2044,2.243,2045,2.243,2046,2.243,2047,2.243,2048,2.243,2049,2.243,2050,2.243,2051,2.243,2052,2.243,2053,2.243,2054,2.243,2055,2.243,2056,2.243,2057,2.243,2058,2.243,2059,2.243,2060,2.243,2061,2.243]],["title/classes/State.html",[0,0.274,784,1.334]],["body/classes/State.html",[0,0.374,2,0.285,3,0.211,4,0.247,5,0.175,8,0.247,13,1.725,14,1.725,17,0.175,36,0.609,39,0.031,41,0.329,43,0.771,53,1.21,62,2.36,67,0.653,72,0.476,77,1.451,82,1.029,83,1.227,93,1.579,94,2.68,96,2.675,99,1.725,115,1.897,116,3.013,121,0.703,127,2.757,129,2.868,136,1.579,139,0.453,143,2.936,153,0.71,155,0.247,156,0.535,161,0.753,170,0.557,177,1.504,188,3.24,190,1.139,229,3.164,238,1.579,256,1.337,262,2.868,277,1.055,300,1.052,321,2.868,389,0.02,390,0.02,391,0.015,400,1.556,407,1.332,431,2.614,475,0.851,493,0.976,608,2.868,654,1.824,773,4.003,774,2.102,779,3.22,780,3.653,781,3.653,782,1.579,783,1.725,784,2.545,785,2.36,786,2.36,787,2.36,788,3.265,789,3.418,790,3.164,791,3.418,792,2.36,793,2.36,794,2.36,795,3.671,796,2.36,797,2.36,798,2.36,799,2.36,800,3.937,801,3.665,802,3.22,803,3.22,804,4.353,805,4.431,806,3.937,807,3.937,808,2.36,809,2.36,810,2.36,811,4.353,812,2.36,813,2.36,814,4.431,815,2.36,816,2.36,817,3.665,818,4.353,819,2.36,820,2.36,821,2.36,822,3.22,823,2.36,824,2.36,825,2.36,826,2.36,827,2.36,828,2.36,829,2.36,830,2.36,831,2.36,832,2.36,833,2.36,834,2.36,835,2.36,836,2.36,837,2.36,838,1.897,839,2.36,840,3.665,841,3.22,842,2.36,843,3.665,844,2.102,845,3.665,846,3.22,847,2.36,848,2.102,849,2.36,850,2.36,851,2.36,852,3.22,853,3.22,854,3.22,855,3.265,856,3.265,857,3.665,858,2.588,859,3.22,860,2.588,861,2.868,862,2.588,863,2.102,864,1.897,865,2.102,866,2.36,867,3.937,868,2.36,869,2.36,870,2.36,871,2.36,872,2.36,873,2.36,874,2.36,2062,4.405,2063,4.405,2064,4.405,2065,4.405,2066,3.228,2067,3.228,2068,3.228,2069,3.228,2070,3.228,2071,3.228,2072,3.228,2073,3.228,2074,3.228,2075,2.705]],["title/classes/StateManager.html",[0,0.274,2076,2.099]],["body/classes/StateManager.html",[0,0.25,2,0.26,3,0.192,4,0.225,5,0.331,7,1.124,8,0.454,9,1.473,10,1.578,17,0.16,18,0.415,28,1.139,30,1.335,32,1.578,33,3.998,34,2.631,36,0.642,38,0.584,39,0.031,40,0.584,41,0.343,42,0.513,45,0.682,46,1.144,48,2.689,53,1.012,55,0.944,60,3.734,67,0.595,68,1.124,72,0.545,76,1.459,121,0.579,130,1.501,139,0.669,153,0.647,155,0.225,156,0.513,161,0.715,170,0.522,185,4.402,277,0.961,319,1.994,328,3.37,339,1.56,351,2.019,374,1.321,389,0.013,390,0.019,391,0.013,400,1.997,474,1.685,475,0.701,481,4.735,484,2.34,489,0.961,492,1.915,493,1.648,494,2.766,497,3.102,502,2.539,503,3.78,504,3.481,505,1.897,511,2.149,512,1.727,567,2.426,568,3.37,570,1.571,572,1.915,575,1.727,579,1.727,710,2.463,739,2.149,766,2.463,770,2.463,784,2.715,902,3.753,987,1.915,1008,0.889,1018,2.426,1108,4.46,1120,3.459,1145,1.727,1353,3.459,1375,1.915,1390,3.459,1454,2.463,1766,2.463,1771,2.149,1784,3.686,1978,2.463,2076,3.68,2077,5.377,2078,4.128,2079,5.174,2080,4.771,2081,5.174,2082,4.128,2083,5.174,2084,4.128,2085,4.128,2086,4.128,2087,4.128,2088,4.128,2089,2.463,2090,4.128,2091,4.128,2092,4.771,2093,2.94,2094,2.94,2095,4.128,2096,2.94,2097,4.128,2098,2.94,2099,4.128,2100,4.128,2101,4.128,2102,2.94,2103,4.128,2104,2.94,2105,5.174,2106,4.128,2107,2.94,2108,2.94,2109,4.128,2110,2.94,2111,2.94,2112,2.94,2113,2.94,2114,2.94,2115,2.94,2116,2.94,2117,4.128,2118,4.128,2119,2.94,2120,4.128,2121,2.94,2122,2.94,2123,2.94,2124,2.94,2125,2.94,2126,2.94,2127,2.94,2128,4.128,2129,2.94,2130,2.94,2131,2.94,2132,2.94,2133,4.128,2134,2.94,2135,2.94,2136,2.94,2137,2.94,2138,2.94,2139,5.174,2140,2.94,2141,2.94,2142,2.94,2143,2.94,2144,2.94,2145,2.94,2146,2.94,2147,2.94,2148,2.94,2149,2.94,2150,2.94,2151,2.94,2152,2.94,2153,2.94,2154,2.94,2155,2.94]],["title/classes/TrackmlLoader.html",[0,0.274,2156,2.356]],["body/classes/TrackmlLoader.html",[0,0.25,2,0.26,3,0.269,4,0.225,5,0.16,8,0.48,9,0.702,12,1.579,15,1.218,17,0.16,18,0.415,19,1.192,28,1.544,30,1.335,36,0.656,38,0.635,39,0.031,40,0.635,41,0.359,42,0.55,43,1.486,44,2.403,45,0.737,46,1.309,51,1.459,53,0.546,55,0.932,67,0.966,68,1.579,72,0.558,76,1.039,114,4.965,130,1.634,134,3.262,139,0.413,148,1.218,152,1.926,155,0.225,156,0.26,161,0.372,190,0.761,200,2.325,212,2.766,350,1.728,389,0.013,390,0.019,391,0.013,395,1.322,404,2.666,405,3.108,407,1.756,474,1.155,475,0.701,489,1.146,498,1.978,500,2.208,501,1.976,502,1.322,505,1.35,515,2.02,518,1.916,564,1.322,627,1.439,629,1.856,631,2.69,632,2.69,633,2.804,634,2.804,635,2.69,636,1.916,637,3.041,638,2.551,639,3.103,640,2.551,641,2.143,643,2.427,644,1.728,645,1.856,646,1.916,647,1.572,648,1.916,649,1.728,650,2.208,651,2.427,652,1.439,653,1.916,654,1.218,655,1.916,656,1.916,657,1.916,658,1.439,660,1.572,661,1.728,663,3.297,664,2.804,669,2.764,671,2.666,674,2.465,675,2.427,676,1.572,677,1.572,678,1.728,679,1.728,680,1.916,685,1.728,686,2.551,700,2.764,783,2.208,880,1.976,890,1.572,891,1.728,903,3.681,915,1.728,1008,0.89,1015,1.572,1016,1.728,1018,2.427,1023,2.551,1031,3.163,1033,3.46,1034,4.332,1035,3.46,1036,3.019,1037,3.019,1038,3.019,1039,3.019,1040,3.019,1041,2.465,1042,5.293,1043,2.465,1044,2.465,1045,2.15,1046,2.465,1047,2.465,1048,2.15,1053,2.15,1054,3.783,1055,3.019,1056,2.465,1057,2.69,1058,2.15,1059,1.916,1060,2.15,1061,1.916,1062,3.019,1063,3.019,1064,2.15,1065,2.15,1066,3.019,1067,3.019,1068,3.019,1069,1.916,1070,2.15,1071,2.465,1072,3.108,1073,3.108,1074,2.15,1075,2.15,1076,1.728,1077,1.916,1078,2.465,1079,2.465,1080,2.465,1081,3.985,1082,2.465,1083,2.465,1084,2.15,1085,2.465,1086,2.15,1087,2.15,1088,2.15,1089,2.465,1090,3.019,1091,2.15,1092,2.465,1093,1.916,1094,2.15,1095,2.15,1096,2.465,1378,2.465,1508,3.019,2156,3.019,2157,5.046,2158,5.176,2159,4.773,2160,4.773,2161,4.773,2162,4.13,2163,4.13,2164,4.13,2165,4.13,2166,4.13,2167,2.942,2168,4.13,2169,2.942,2170,2.942,2171,2.942,2172,5.176,2173,2.942,2174,4.13,2175,2.942,2176,5.176,2177,2.942,2178,2.942,2179,2.942,2180,2.942,2181,2.942,2182,2.942,2183,2.942,2184,2.942,2185,2.942,2186,2.942,2187,2.942]],["title/classes/VRManager.html",[0,0.274,2188,2.356]],["body/classes/VRManager.html",[0,0.211,2,0.22,3,0.162,4,0.19,5,0.135,7,0.951,8,0.391,9,0.874,12,1.399,13,1.957,17,0.135,18,0.368,19,1.186,28,1.587,32,1.661,34,2.73,36,0.644,38,0.482,39,0.031,40,0.482,41,0.342,42,0.384,43,1.144,45,0.415,47,2.854,48,3.689,50,3.503,53,0.807,55,0.922,67,1.034,68,1.661,69,2.854,72,0.519,76,2.078,78,3.068,82,0.867,83,1.034,86,3.64,95,1.819,96,1.952,99,1.33,100,3.904,121,0.749,125,1.819,128,2.676,137,1.819,139,0.514,142,1.62,143,2.294,152,2.188,153,0.547,155,0.19,156,0.488,161,0.675,170,0.549,171,3.244,177,1.123,188,1.33,190,0.643,219,1.118,254,3.068,256,1.516,262,2.384,277,1.42,300,0.594,319,1.922,348,1.819,351,2.125,374,2.153,385,1.819,389,0.011,390,0.017,391,0.011,396,2.343,400,1.535,407,1.449,474,1.024,475,0.622,489,0.68,490,1.462,493,1.615,494,2.561,560,3.904,565,3.028,567,1.462,570,1.33,575,1.462,579,1.462,647,2.322,650,1.957,856,3.928,1124,2.084,1145,1.462,1226,1.819,1388,2.084,1508,3.176,1636,3.64,1771,1.819,1778,2.084,1937,2.084,1941,2.084,1954,2.676,1957,2.084,1958,2.084,1963,2.084,1980,2.084,2075,2.084,2089,2.084,2188,2.676,2189,5.388,2190,4.926,2191,4.344,2192,4.344,2193,4.344,2194,4.344,2195,4.344,2196,4.344,2197,4.344,2198,4.344,2199,4.747,2200,4.344,2201,4.344,2202,4.344,2203,4.344,2204,4.344,2205,4.791,2206,3.661,2207,4.791,2208,4.791,2209,3.661,2210,4.791,2211,4.344,2212,2.488,2213,5.783,2214,5.665,2215,2.488,2216,4.791,2217,2.488,2218,5.458,2219,2.488,2220,2.488,2221,2.488,2222,2.676,2223,3.661,2224,3.661,2225,3.661,2226,3.661,2227,2.488,2228,3.661,2229,5.665,2230,2.488,2231,3.661,2232,3.661,2233,2.488,2234,5.106,2235,3.661,2236,3.661,2237,2.488,2238,2.084,2239,2.488,2240,2.488,2241,2.488,2242,2.488,2243,2.488,2244,2.488,2245,2.488,2246,2.488,2247,3.661,2248,3.661,2249,2.488,2250,3.661,2251,2.488,2252,3.661,2253,2.488,2254,2.488,2255,2.488,2256,2.488,2257,2.488,2258,2.488,2259,2.488,2260,4.791,2261,2.488,2262,3.661,2263,2.488,2264,3.661,2265,2.488,2266,2.488,2267,4.344,2268,2.488,2269,4.344,2270,4.791,2271,2.488,2272,3.661,2273,2.488,2274,2.488,2275,2.488,2276,2.488,2277,2.488,2278,2.488,2279,2.488,2280,2.488,2281,2.488,2282,2.488,2283,2.488,2284,2.488,2285,2.488,2286,2.488,2287,2.488,2288,2.488,2289,2.488,2290,2.488,2291,2.488,2292,2.488,2293,2.488,2294,2.488,2295,2.488,2296,2.488,2297,2.488,2298,2.488,2299,2.488,2300,2.488,2301,2.488,2302,3.661,2303,3.661,2304,2.488,2305,3.661,2306,2.488,2307,2.488,2308,2.488,2309,2.488,2310,2.488,2311,2.488,2312,2.488,2313,2.488,2314,2.488,2315,2.488,2316,2.488,2317,3.661,2318,2.488,2319,2.488,2320,2.488,2321,2.488]],["title/interfaces/Window.html",[470,1.576,2322,2.356]],["body/interfaces/Window.html",[0,0.224,3,0.293,4,0.125,5,0.312,8,0.125,9,1.323,10,1.007,11,3.283,12,1.27,13,0.87,14,0.87,15,1.375,17,0.088,18,0.265,19,1.188,28,1.248,32,1.998,34,1.375,38,0.334,39,0.031,40,0.642,41,0.267,43,1.374,44,1.737,45,0.732,46,1.197,47,1.409,50,1.548,51,1.587,52,1.363,53,0.993,54,3.762,55,0.731,57,3.199,58,2.208,59,2.208,60,0.956,61,1.189,62,1.926,63,2.208,64,3.515,65,2.783,66,2.783,67,0.533,69,2.041,70,2.208,71,2.208,72,0.496,76,1.847,77,0.731,82,0.564,83,0.329,88,1.363,90,2.208,91,2.783,93,1.624,94,0.87,95,1.189,96,1.184,97,1.926,98,1.409,99,0.87,100,1.926,111,1.885,121,0.714,128,1.189,130,1.616,136,2.312,139,0.691,152,0.575,153,0.731,155,0.125,156,0.584,161,0.728,170,0.711,171,0.956,174,1.716,177,0.421,190,0.421,200,1.492,215,4.289,219,2.889,238,0.796,248,0.956,256,0.674,273,3.762,300,1.276,315,1.189,319,0.861,335,2.487,339,0.532,349,0.87,382,1.363,389,0.007,390,0.012,391,0.007,395,1.184,396,0.796,407,1.43,470,1.624,471,2.636,472,1.06,474,1.55,475,0.448,484,1.859,485,1.926,486,3.161,487,1.548,489,1.188,493,1.741,494,2.632,495,2.163,496,2.428,497,2.793,498,1.604,499,2.208,501,2.213,503,1.716,504,2.638,505,1.781,507,1.189,508,1.189,546,1.189,553,1.926,564,1.184,565,2.041,581,2.527,584,2.428,626,1.189,629,1.716,633,0.956,634,0.956,637,0.956,638,1.409,639,2.719,640,1.409,641,1.581,643,0.956,644,0.956,645,0.731,647,1.775,650,1.409,651,1.548,652,0.796,658,2.052,659,2.243,661,0.956,663,2.4,664,0.956,665,1.775,666,1.363,667,1.363,669,1.867,670,1.189,671,0.796,672,2.208,673,3.515,675,1.548,676,1.409,677,0.87,678,1.548,679,0.956,683,3.067,684,1.189,685,2.465,687,1.363,688,1.363,699,2.208,700,2.196,701,1.363,702,1.363,703,1.363,704,1.363,706,2.243,708,2.989,711,2.791,738,1.926,739,1.926,741,3.719,745,1.363,753,1.363,784,0.674,838,1.548,860,1.548,864,0.956,880,1.581,881,2.208,882,2.208,883,2.208,890,1.409,891,0.956,894,3.961,895,2.208,896,1.363,897,1.926,898,3.821,900,4.823,902,3.202,904,2.783,905,2.791,906,3.199,908,2.783,910,1.363,911,1.363,915,1.548,920,1.06,923,1.189,935,1.06,939,1.926,980,1.363,1008,1.581,1011,2.208,1015,0.87,1031,1.289,1050,1.363,1057,2.163,1069,1.06,1077,1.716,1093,2.163,1108,1.189,1123,1.926,1134,1.716,1145,1.548,1189,3.199,1190,2.783,1257,1.363,1301,3.206,1375,1.716,1379,1.363,1383,2.208,1618,2.783,1732,2.208,1764,2.428,1765,2.208,1768,2.208,1784,2.893,1800,1.363,1802,1.363,1815,1.363,1861,3.481,1874,1.189,1877,1.363,1923,1.363,1926,1.363,1938,2.783,1940,2.428,1960,1.363,1961,1.363,1964,1.363,1967,2.208,1968,1.363,1993,2.783,2037,2.208,2076,2.163,2190,2.791,2199,1.363,2218,1.363,2322,3.719,2323,1.363,2324,1.627,2325,1.627,2326,2.208,2327,1.627,2328,1.627,2329,3.321,2330,3.321,2331,1.627,2332,1.627,2333,1.627,2334,2.635,2335,2.635,2336,1.627,2337,1.627,2338,1.627,2339,1.627,2340,1.627,2341,1.627,2342,1.627,2343,1.627,2344,1.627,2345,1.627,2346,1.627,2347,1.627,2348,2.635,2349,3.321,2350,1.627,2351,2.635,2352,1.627,2353,1.627,2354,1.627,2355,1.627,2356,1.627,2357,1.627,2358,1.627,2359,1.627,2360,1.627,2361,3.321,2362,1.627,2363,1.627,2364,1.627,2365,1.627,2366,1.627,2367,1.627,2368,1.627,2369,1.627,2370,1.627,2371,2.635,2372,2.635,2373,2.635,2374,2.635,2375,1.627,2376,1.627,2377,1.627,2378,1.627,2379,1.627,2380,1.627,2381,1.627,2382,1.627,2383,1.627,2384,1.627,2385,6.036,2386,6.101,2387,4.491,2388,1.627,2389,3.818,2390,3.321,2391,1.627,2392,3.818,2393,1.627,2394,1.627,2395,1.627,2396,1.627,2397,1.627,2398,1.627,2399,1.627,2400,2.635,2401,1.627,2402,1.627,2403,2.635,2404,1.627,2405,1.627,2406,1.627,2407,2.635,2408,1.627,2409,1.627,2410,1.627,2411,1.627,2412,1.627,2413,1.627,2414,1.627,2415,1.627,2416,1.627,2417,1.627,2418,1.627,2419,1.627,2420,2.635,2421,2.635,2422,2.635,2423,1.627,2424,1.627,2425,2.635,2426,1.627,2427,1.627,2428,1.627,2429,1.627,2430,1.627,2431,1.627,2432,1.627,2433,4.491,2434,1.627,2435,3.321,2436,1.627,2437,1.627,2438,1.627,2439,3.321,2440,1.363,2441,1.627,2442,1.627,2443,1.627,2444,1.627,2445,1.627,2446,1.627,2447,1.627,2448,1.627,2449,1.627,2450,1.627,2451,1.627,2452,1.627,2453,1.627,2454,1.627,2455,1.627,2456,1.627,2457,1.627,2458,1.627,2459,1.627,2460,1.627,2461,1.627,2462,1.627,2463,1.627,2464,1.627,2465,1.627,2466,2.635,2467,1.627,2468,1.627,2469,1.627,2470,1.627,2471,1.627,2472,1.627,2473,1.627,2474,1.627,2475,1.627,2476,1.627,2477,1.627,2478,1.627,2479,1.627,2480,1.627,2481,1.627,2482,1.627,2483,1.627,2484,1.627,2485,1.627,2486,1.627,2487,1.363,2488,1.627,2489,1.627,2490,1.627,2491,1.627,2492,1.627,2493,1.627,2494,2.635,2495,1.627,2496,1.627,2497,1.627,2498,1.627,2499,1.627,2500,3.321,2501,2.635,2502,2.635,2503,3.321,2504,1.627,2505,1.627,2506,1.627,2507,1.627,2508,1.627,2509,2.635,2510,1.627,2511,1.627,2512,3.321,2513,1.627,2514,2.635,2515,1.627,2516,1.627,2517,2.635,2518,2.208,2519,1.627,2520,1.627,2521,2.635,2522,1.627,2523,1.627,2524,1.627,2525,1.627,2526,1.363,2527,2.635,2528,1.627,2529,1.627,2530,1.627,2531,1.627,2532,1.627,2533,1.627,2534,1.627,2535,1.627,2536,1.627]],["title/changelog.html",[2222,1.967,2537,2.255,2538,2.691]],["body/changelog.html",[3,0.294,5,0.245,9,1.078,10,1.725,32,1.725,39,0.025,42,0.483,45,0.754,46,0.914,83,0.914,115,3.212,170,0.571,219,2.028,248,2.652,319,1.476,328,2.94,374,2.028,389,0.021,390,0.025,391,0.021,396,2.208,397,4.58,471,2.028,474,1.84,477,3.782,484,2.435,486,3.143,487,2.652,498,1.725,505,1.787,515,2.674,519,3.3,528,3.782,639,2.413,649,2.652,784,2.263,1008,1.653,1021,3.3,1375,2.94,1640,4.58,1648,3.782,1700,3.782,1711,3.782,1764,3.3,1940,3.3,1954,3.3,2190,3.996,2238,3.782,2440,3.782,2487,4.58,2539,4.514,2540,4.514,2541,4.514,2542,4.514,2543,4.514,2544,4.514,2545,4.514,2546,4.514,2547,4.514,2548,5.881,2549,4.514,2550,4.514,2551,4.514,2552,6.495,2553,4.514,2554,4.514,2555,4.514,2556,4.514,2557,6.26,2558,4.514,2559,4.514,2560,5.467,2561,4.514,2562,4.514,2563,4.514,2564,5.467,2565,4.514,2566,4.514,2567,4.514,2568,4.514,2569,4.514,2570,4.514,2571,4.514,2572,4.514,2573,4.514,2574,4.514,2575,4.514,2576,4.514,2577,4.514,2578,4.514,2579,4.514,2580,4.514,2581,4.514,2582,4.514,2583,4.514,2584,4.514,2585,4.514,2586,4.514,2587,4.514,2588,4.514,2589,4.514,2590,4.514,2591,4.514,2592,5.467,2593,4.514,2594,4.514,2595,3.782,2596,4.514,2597,4.514,2598,3.3]],["title/coverage.html",[2599,3.686]],["body/coverage.html",[0,0.576,1,2.991,5,0.222,6,3.428,7,2.492,35,2.664,39,0.031,41,0.222,45,0.463,46,0.828,121,0.574,140,3.428,389,0.019,390,0.024,391,0.019,392,2.991,393,3.428,394,3.761,399,2.404,414,2.404,470,2.753,471,1.838,473,3.428,480,2.187,497,2.187,502,1.838,506,2.664,512,2.404,515,2.001,516,3.428,522,2.664,543,2.664,544,3.428,626,4.114,627,3.146,638,2.187,640,2.187,641,1.694,689,2.991,690,3.428,773,3.665,774,3.665,782,2.001,784,1.694,875,2.991,876,3.428,880,1.694,1004,3.428,1005,3.428,1029,2.991,1030,3.428,1031,2.001,1107,3.428,1171,3.428,1200,5.696,1337,3.428,1338,3.428,1486,3.428,1514,2.664,1614,3.428,1615,3.428,1631,2.664,1632,3.428,1633,3.428,1692,3.428,1693,3.428,1742,3.428,1784,2.404,1852,2.991,1853,3.761,1861,2.664,1875,3.761,1914,2.991,1915,3.428,2076,2.664,2077,3.428,2156,2.991,2157,3.428,2188,2.991,2189,3.428,2322,2.991,2323,4.311,2326,3.428,2599,3.428,2600,4.091,2601,4.091,2602,4.091,2603,5.145,2604,5.145,2605,5.628,2606,4.091,2607,5.628,2608,4.091,2609,3.428,2610,5.145,2611,4.091,2612,5.628,2613,4.091,2614,4.091,2615,4.091,2616,4.091,2617,4.091,2618,4.091,2619,4.091,2620,4.091,2621,4.091,2622,4.091,2623,4.091,2624,5.906,2625,4.091,2626,4.091,2627,4.091,2628,4.091,2629,4.091,2630,4.091,2631,4.091,2632,4.091,2633,4.091,2634,4.091,2635,4.091,2636,4.091,2637,4.091,2638,4.091,2639,4.091,2640,4.091,2641,4.091]],["title/dependencies.html",[2598,1.967,2642,3.248]],["body/dependencies.html",[39,0.03,153,1.144,154,4.355,389,0.024,390,0.027,391,0.024,496,3.8,2595,4.355,2642,4.355,2643,5.198,2644,5.198,2645,5.198,2646,5.198,2647,5.198,2648,5.198,2649,5.198]],["title/index.html",[17,0.146,2222,1.967,2537,2.255]],["body/index.html",[2,0.414,15,1.942,39,0.031,45,0.749,46,1.21,77,2.108,111,2.108,121,0.785,139,0.785,161,0.707,174,3.893,219,2.514,339,1.829,374,2.108,389,0.021,390,0.026,391,0.021,471,2.782,474,1.815,478,3.429,480,2.507,484,2.316,498,1.793,500,2.507,505,2.024,581,2.507,677,2.507,700,2.294,708,2.756,738,3.429,775,3.93,1023,2.507,1031,2.736,1076,2.756,1712,3.93,1784,3.512,2518,3.93,2526,4.687,2598,3.429,2650,4.691,2651,4.691,2652,4.691,2653,4.691,2654,4.691,2655,4.691,2656,4.691,2657,5.594,2658,5.594,2659,4.691,2660,4.691,2661,4.691,2662,4.691,2663,4.691,2664,4.691,2665,4.691,2666,4.691,2667,4.691,2668,4.691,2669,5.594,2670,4.691,2671,4.691]],["title/modules.html",[2672,3.686]],["body/modules.html",[39,0.027,389,0.024,390,0.027,391,0.024,2672,4.432]],["title/overview.html",[2673,3.686]],["body/overview.html",[2,0.465,39,0.027,186,3.094,354,4.412,389,0.024,390,0.027,391,0.024,472,3.43,2673,4.412]],["title/miscellaneous/variables.html",[2674,2.255,2675,3.248]],["body/miscellaneous/variables.html",[17,0.271,39,0.03,41,0.315,45,0.566,46,1.012,51,1.766,82,0.849,83,1.012,121,0.913,130,1.292,134,2.671,212,2.671,389,0.023,390,0.027,391,0.023,414,3.412,501,2.069,627,2.84,629,2.246,1072,3.255,1073,3.255,1239,4.187,1429,4.187,1853,3.654,1857,4.187,1861,4.115,1874,3.654,1875,3.654,1876,4.187,2609,4.187,2674,4.187,2675,4.187,2676,4.998,2677,4.998,2678,6.139,2679,4.998,2680,5.807,2681,4.998,2682,4.998]]],"invertedIndex":[["",{"_index":39,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":177,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["0.0002",{"_index":842,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.003",{"_index":1581,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0.01",{"_index":241,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{}}}],["0.1",{"_index":452,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["0.122.0",{"_index":2649,"title":{},"body":{"dependencies.html":{}}}],["0.25",{"_index":198,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["0.3",{"_index":1548,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0.5",{"_index":844,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.7",{"_index":465,"title":{},"body":{"classes/CMSObjects.html":{}}}],["0.7.7",{"_index":2644,"title":{},"body":{"dependencies.html":{}}}],["0.75",{"_index":199,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["05",{"_index":2592,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":2550,"title":{},"body":{"changelog.html":{}}}],["0980379",{"_index":2559,"title":{},"body":{"changelog.html":{}}}],["0a26fea",{"_index":2555,"title":{},"body":{"changelog.html":{}}}],["0x000fff",{"_index":2396,"title":{},"body":{"interfaces/Window.html":{}}}],["0x2fd691",{"_index":998,"title":{},"body":{"classes/ImportManager.html":{}}}],["0x41a6f4",{"_index":940,"title":{},"body":{"classes/ImportManager.html":{}}}],["0x8c8c8c",{"_index":2667,"title":{},"body":{"index.html":{}}}],["0xffffff",{"_index":464,"title":{},"body":{"classes/CMSObjects.html":{}}}],["1",{"_index":190,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["1.0.1",{"_index":2595,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["1.0.2",{"_index":2591,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":2547,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":2610,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":115,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/InfoLogger.html":{},"classes/PhoenixObjects.html":{},"classes/State.html":{},"changelog.html":{}}}],["100",{"_index":1200,"title":{},"body":{"classes/PhoenixLoader.html":{},"coverage.html":{}}}],["1000",{"_index":129,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["10000",{"_index":304,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{}}}],["11",{"_index":2549,"title":{},"body":{"changelog.html":{}}}],["11/11",{"_index":2627,"title":{},"body":{"coverage.html":{}}}],["1100",{"_index":1526,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["1100.0",{"_index":1576,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["11000",{"_index":84,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["1261358",{"_index":2586,"title":{},"body":{"changelog.html":{}}}],["13/13",{"_index":2631,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":2632,"title":{},"body":{"coverage.html":{}}}],["15/15",{"_index":2625,"title":{},"body":{"coverage.html":{}}}],["16/16",{"_index":2623,"title":{},"body":{"coverage.html":{}}}],["17.4.0",{"_index":2643,"title":{},"body":{"dependencies.html":{}}}],["17/17",{"_index":2626,"title":{},"body":{"coverage.html":{}}}],["17909eb",{"_index":2582,"title":{},"body":{"changelog.html":{}}}],["1906976",{"_index":2580,"title":{},"body":{"changelog.html":{}}}],["1].oncomplete",{"_index":346,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["2",{"_index":431,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{}}}],["2/2",{"_index":2605,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2312,"title":{},"body":{"classes/VRManager.html":{}}}],["20/20",{"_index":2622,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":1201,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["2020",{"_index":2548,"title":{},"body":{"changelog.html":{}}}],["21/23",{"_index":2638,"title":{},"body":{"coverage.html":{}}}],["23/23",{"_index":2624,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":184,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["24/24",{"_index":2621,"title":{},"body":{"coverage.html":{}}}],["28/11/2020",{"_index":2245,"title":{},"body":{"classes/VRManager.html":{}}}],["29/08/2020",{"_index":2239,"title":{},"body":{"classes/VRManager.html":{}}}],["3",{"_index":186,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"overview.html":{}}}],["3.3333",{"_index":2073,"title":{},"body":{"classes/State.html":{}}}],["3.5.0",{"_index":2646,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":2612,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":385,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["30/30",{"_index":2616,"title":{},"body":{"coverage.html":{}}}],["300).start",{"_index":367,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["3000",{"_index":281,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["31/31",{"_index":2618,"title":{},"body":{"coverage.html":{}}}],["32",{"_index":354,"title":{},"body":{"classes/AnimationsManager.html":{},"overview.html":{}}}],["32/32",{"_index":2636,"title":{},"body":{"coverage.html":{}}}],["3200.0",{"_index":1579,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["33/33",{"_index":2630,"title":{},"body":{"coverage.html":{}}}],["3918159",{"_index":2563,"title":{},"body":{"changelog.html":{}}}],["399ac77",{"_index":2594,"title":{},"body":{"changelog.html":{}}}],["3d",{"_index":654,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{}}}],["4",{"_index":438,"title":{},"body":{"classes/CMSObjects.html":{}}}],["4/4",{"_index":2611,"title":{},"body":{"coverage.html":{}}}],["4000.0",{"_index":1590,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["5",{"_index":435,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixLoader.html":{}}}],["5/5",{"_index":2613,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1226,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["500",{"_index":182,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["5000",{"_index":117,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["51/51",{"_index":2604,"title":{},"body":{"coverage.html":{}}}],["5283e9a",{"_index":2565,"title":{},"body":{"changelog.html":{}}}],["58/58",{"_index":2634,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":229,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["6/6",{"_index":2603,"title":{},"body":{"coverage.html":{}}}],["612205c",{"_index":2587,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":437,"title":{},"body":{"classes/CMSObjects.html":{}}}],["7/7",{"_index":2608,"title":{},"body":{"coverage.html":{}}}],["73b7c27",{"_index":2556,"title":{},"body":{"changelog.html":{}}}],["7d1ca22",{"_index":2590,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":321,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["8/8",{"_index":2606,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":2607,"title":{},"body":{"coverage.html":{}}}],["91",{"_index":2637,"title":{},"body":{"coverage.html":{}}}],["9e3dc20",{"_index":2589,"title":{},"body":{"changelog.html":{}}}],["9eb21f5",{"_index":2571,"title":{},"body":{"changelog.html":{}}}],["9efd9ca",{"_index":2577,"title":{},"body":{"changelog.html":{}}}],["ability",{"_index":2481,"title":{},"body":{"interfaces/Window.html":{}}}],["acc",{"_index":1159,"title":{},"body":{"classes/LoadingManager.html":{}}}],["access",{"_index":2463,"title":{},"body":{"interfaces/Window.html":{}}}],["accessing",{"_index":1876,"title":{},"body":{"classes/ScriptLoader.html":{},"miscellaneous/variables.html":{}}}],["active",{"_index":48,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["activecamera",{"_index":33,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/StateManager.html":{}}}],["activeobject",{"_index":1916,"title":{},"body":{"classes/SelectionManager.html":{}}}],["actual",{"_index":226,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{}}}],["add",{"_index":1008,"title":{},"body":{"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["add(data",{"_index":1017,"title":{},"body":{"classes/InfoLogger.html":{}}}],["addchild",{"_index":1347,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addchild(name",{"_index":1371,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addcollection",{"_index":1036,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addcollection(objectcollection",{"_index":1053,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addconfig",{"_index":1348,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addconfig('button",{"_index":2111,"title":{},"body":{"classes/StateManager.html":{}}}],["addconfig(type",{"_index":1373,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["added",{"_index":1134,"title":{},"body":{"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["adding",{"_index":647,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["addjetssizeoption",{"_index":1212,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["addloadableitem",{"_index":1113,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadableitem(id",{"_index":1127,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistener",{"_index":1114,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistener(callback",{"_index":1129,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistenerwithcheck",{"_index":1115,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistenerwithcheck(callback",{"_index":1132,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addobjecttype",{"_index":1037,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addobjecttype(object",{"_index":1065,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addoutlinepassforselection",{"_index":554,"title":{},"body":{"classes/EffectsManager.html":{}}}],["addprogresslistener",{"_index":1116,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addprogresslistener(callback",{"_index":1135,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addrenderer",{"_index":1747,"title":{},"body":{"classes/RendererManager.html":{}}}],["addrenderer(renderer",{"_index":1770,"title":{},"body":{"classes/RendererManager.html":{}}}],["adds",{"_index":1057,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["again",{"_index":255,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["alleventdata",{"_index":317,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alleventdata.getobjectbyname('track",{"_index":376,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alleventdata.traverse((eventobject",{"_index":336,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alleventdata.visible",{"_index":383,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["allow",{"_index":2348,"title":{},"body":{"interfaces/Window.html":{}}}],["allowcustomvalue",{"_index":1208,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["allowed",{"_index":531,"title":{},"body":{"classes/Cut.html":{}}}],["allowing",{"_index":701,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["allowselection(selectedobject",{"_index":2478,"title":{},"body":{"interfaces/Window.html":{}}}],["allscripts",{"_index":1880,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["alltweens",{"_index":206,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(animationspheretween",{"_index":307,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(eventobjecttween",{"_index":236,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(scaletween",{"_index":259,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(tween",{"_index":343,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens[0].onstart",{"_index":308,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens[alltweens.length",{"_index":345,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["along",{"_index":118,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{}}}],["alongaxisposition",{"_index":176,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alpha",{"_index":1835,"title":{},"body":{"classes/RendererManager.html":{}}}],["already",{"_index":1910,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["always",{"_index":1700,"title":{},"body":{"classes/RKHelper.html":{},"changelog.html":{}}}],["ambientlight",{"_index":1983,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ambientlight().type",{"_index":1990,"title":{},"body":{"classes/SelectionManager.html":{}}}],["angle",{"_index":185,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PresetView.html":{},"classes/StateManager.html":{}}}],["angular",{"_index":2670,"title":{},"body":{"index.html":{}}}],["animate",{"_index":57,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animateclippingwithcollision",{"_index":20,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateclippingwithcollision(tweenduration",{"_index":52,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animateevent",{"_index":21,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateevent(tweenduration",{"_index":73,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithclipping",{"_index":22,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithclipping(tweenduration",{"_index":79,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithcollision",{"_index":23,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithcollision(tweenduration",{"_index":88,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animatethroughevent",{"_index":24,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animatethroughevent(startpos",{"_index":90,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animatewithcollision",{"_index":25,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animatewithcollision(animationfunction",{"_index":101,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animating",{"_index":126,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animation",{"_index":11,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["animationclipplane",{"_index":340,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationclipplane.constant",{"_index":341,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationclipplanes",{"_index":322,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationclipplanes.push(new",{"_index":326,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationfunction",{"_index":105,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationfunction(tweenduration",{"_index":386,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animations",{"_index":70,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animationsmanager",{"_index":1,"title":{"classes/AnimationsManager.html":{}},"body":{"classes/AnimationsManager.html":{},"coverage.html":{}}}],["animationsphere",{"_index":202,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween",{"_index":279,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween.chain(animationspheretweenclone",{"_index":306,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween.onupdate(onanimationsphereupdate",{"_index":301,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone",{"_index":303,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone.oncomplete",{"_index":312,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone.onupdate(onanimationsphereupdate",{"_index":305,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["another",{"_index":2583,"title":{},"body":{"changelog.html":{}}}],["antialias",{"_index":578,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["antialiasing",{"_index":550,"title":{},"body":{"classes/EffectsManager.html":{}}}],["antialiasrender",{"_index":555,"title":{},"body":{"classes/EffectsManager.html":{}}}],["antialiasrender(scene",{"_index":586,"title":{},"body":{"classes/EffectsManager.html":{}}}],["any).geometry",{"_index":287,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["any)?.material.color",{"_index":380,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["any)?.material?.color",{"_index":379,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["any)?.xr",{"_index":2249,"title":{},"body":{"classes/VRManager.html":{}}}],["any)?.xr?.requestsession(vrmanager.session_type",{"_index":2256,"title":{},"body":{"classes/VRManager.html":{}}}],["any,typefolderpm",{"_index":1070,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["api",{"_index":2652,"title":{},"body":{"index.html":{}}}],["app",{"_index":2552,"title":{},"body":{"changelog.html":{}}}],["appended",{"_index":1871,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["application",{"_index":2656,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":2120,"title":{},"body":{"classes/StateManager.html":{}}}],["applied",{"_index":350,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/TrackmlLoader.html":{}}}],["apply",{"_index":334,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{}}}],["applyconfigstate",{"_index":1349,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["applyconfigstate(config",{"_index":1376,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["around",{"_index":2232,"title":{},"body":{"classes/VRManager.html":{}}}],["array",{"_index":136,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["array.from(eventobject.geometry.attributes['position'].array",{"_index":267,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["array.isarray(hitsparams",{"_index":1559,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["arrays",{"_index":2033,"title":{},"body":{"classes/SelectionManager.html":{}}}],["aspects",{"_index":2335,"title":{},"body":{"interfaces/Window.html":{}}}],["assets/preset",{"_index":1629,"title":{},"body":{"classes/PresetView.html":{}}}],["associated",{"_index":676,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["async",{"_index":1879,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["atlas",{"_index":1711,"title":{},"body":{"classes/RKHelper.html":{},"changelog.html":{}}}],["attribute",{"_index":519,"title":{},"body":{"classes/Cut.html":{},"classes/ScriptLoader.html":{},"changelog.html":{}}}],["attributename",{"_index":2029,"title":{},"body":{"classes/SelectionManager.html":{}}}],["attributes",{"_index":920,"title":{},"body":{"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["attributevalue",{"_index":2030,"title":{},"body":{"classes/SelectionManager.html":{}}}],["automatic",{"_index":1196,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["available",{"_index":1772,"title":{},"body":{"classes/RendererManager.html":{}}}],["available/created",{"_index":1769,"title":{},"body":{"classes/RendererManager.html":{}}}],["averageprogress",{"_index":1162,"title":{},"body":{"classes/LoadingManager.html":{}}}],["await",{"_index":1890,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["axes",{"_index":120,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["axeshelper",{"_index":1984,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axeshelper().type",{"_index":1992,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axis",{"_index":175,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["b",{"_index":1811,"title":{},"body":{"classes/RendererManager.html":{}}}],["b46c49f",{"_index":2574,"title":{},"body":{"changelog.html":{}}}],["b_first",{"_index":808,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_last",{"_index":803,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_middle",{"_index":802,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["back",{"_index":433,"title":{},"body":{"classes/CMSObjects.html":{}}}],["backs",{"_index":418,"title":{},"body":{"classes/CMSObjects.html":{}}}],["backs.push",{"_index":424,"title":{},"body":{"classes/CMSObjects.html":{}}}],["before",{"_index":1955,"title":{},"body":{"classes/SelectionManager.html":{}}}],["being",{"_index":923,"title":{},"body":{"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"interfaces/Window.html":{}}}],["big",{"_index":2566,"title":{},"body":{"changelog.html":{}}}],["blob",{"_index":710,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{}}}],["blob([json.stringify(state",{"_index":2119,"title":{},"body":{"classes/StateManager.html":{}}}],["blob([text",{"_index":764,"title":{},"body":{"classes/ExportManager.html":{}}}],["bloom",{"_index":549,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["boolean",{"_index":493,"title":{},"body":{"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["both",{"_index":905,"title":{},"body":{"classes/ImportManager.html":{},"classes/RKHelper.html":{},"interfaces/Window.html":{}}}],["bottom",{"_index":441,"title":{},"body":{"classes/CMSObjects.html":{}}}],["bounded",{"_index":2253,"title":{},"body":{"classes/VRManager.html":{}}}],["bounds",{"_index":865,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["box",{"_index":425,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.computefacenormals",{"_index":445,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.computevertexnormals",{"_index":446,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.faces.push(new",{"_index":429,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.vertices",{"_index":426,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer",{"_index":447,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffergeometry",{"_index":1513,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["boxbuffergeometry(30",{"_index":1582,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["boxedges",{"_index":460,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject",{"_index":449,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.name",{"_index":456,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.userdata",{"_index":454,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.uuid",{"_index":469,"title":{},"body":{"classes/CMSObjects.html":{}}}],["break",{"_index":1328,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["browsers",{"_index":1817,"title":{},"body":{"classes/RendererManager.html":{}}}],["bufferattribute",{"_index":149,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["bufferattribute(pointpos",{"_index":1567,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["buffergeometry",{"_index":142,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["buffergeometry().fromgeometry(box",{"_index":448,"title":{},"body":{"classes/CMSObjects.html":{}}}],["buffergeometry().setfrompoints([new",{"_index":2295,"title":{},"body":{"classes/VRManager.html":{}}}],["bug",{"_index":2551,"title":{},"body":{"changelog.html":{}}}],["bugged",{"_index":2576,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":2037,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["buildeventdata",{"_index":631,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["buildeventdata(eventdata",{"_index":636,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["buildeventdatafromjson(eventdata",{"_index":2370,"title":{},"body":{"interfaces/Window.html":{}}}],["buildgeometryfromparameters",{"_index":2469,"title":{},"body":{"interfaces/Window.html":{}}}],["buildgeometryfromparameters(parameters",{"_index":2431,"title":{},"body":{"interfaces/Window.html":{}}}],["builds",{"_index":2369,"title":{},"body":{"interfaces/Window.html":{}}}],["bump",{"_index":2597,"title":{},"body":{"changelog.html":{}}}],["buttons",{"_index":2107,"title":{},"body":{"classes/StateManager.html":{}}}],["c1",{"_index":2306,"title":{},"body":{"classes/VRManager.html":{}}}],["c7a35db",{"_index":2567,"title":{},"body":{"changelog.html":{}}}],["calc",{"_index":1725,"title":{},"body":{"classes/RKHelper.html":{}}}],["calculated",{"_index":866,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["call",{"_index":69,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["callback",{"_index":76,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["callback(averageprogress",{"_index":1164,"title":{},"body":{"classes/LoadingManager.html":{}}}],["callback(eventdata",{"_index":980,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["callback(eventkeys",{"_index":2368,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(geometry",{"_index":985,"title":{},"body":{"classes/ImportManager.html":{}}}],["callback(processed",{"_index":945,"title":{},"body":{"classes/ImportManager.html":{}}}],["callback(uuid",{"_index":1934,"title":{},"body":{"classes/SelectionManager.html":{}}}],["callbacks",{"_index":1123,"title":{},"body":{"classes/LoadingManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["called",{"_index":897,"title":{},"body":{"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["calling",{"_index":1379,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{}}}],["caloclusters",{"_index":1073,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"miscellaneous/variables.html":{}}}],["camera",{"_index":34,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["camera()).copy(camera.clone",{"_index":2274,"title":{},"body":{"classes/VRManager.html":{}}}],["cameragroup",{"_index":2191,"title":{},"body":{"classes/VRManager.html":{}}}],["camerapos",{"_index":1619,"title":{},"body":{"classes/PresetView.html":{}}}],["cameraposition",{"_index":2115,"title":{},"body":{"classes/StateManager.html":{}}}],["cameras",{"_index":2434,"title":{},"body":{"interfaces/Window.html":{}}}],["canvas",{"_index":1768,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["canvas').addeventlistener('click",{"_index":2004,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').addeventlistener('mousemove",{"_index":2002,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').addeventlistener('touchstart",{"_index":2006,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').removeeventlistener('click",{"_index":2012,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').removeeventlistener('mousemove",{"_index":2011,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').removeeventlistener('touchstart",{"_index":2013,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas.appendchild(this.getmainrenderer().domelement",{"_index":1832,"title":{},"body":{"classes/RendererManager.html":{}}}],["care",{"_index":646,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["case",{"_index":1528,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["casting",{"_index":969,"title":{},"body":{"classes/ImportManager.html":{}}}],["catch((error",{"_index":2533,"title":{},"body":{"interfaces/Window.html":{}}}],["catmullromcurve3",{"_index":1506,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cfb1b6a",{"_index":2575,"title":{},"body":{"changelog.html":{}}}],["cg",{"_index":2308,"title":{},"body":{"classes/VRManager.html":{}}}],["chaining",{"_index":2564,"title":{},"body":{"changelog.html":{}}}],["chamber",{"_index":406,"title":{},"body":{"classes/CMSObjects.html":{}}}],["change",{"_index":248,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["changelog",{"_index":2538,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":1940,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["changing",{"_index":214,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{}}}],["charge",{"_index":788,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["check",{"_index":218,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["checkbox",{"_index":1432,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["checked",{"_index":1775,"title":{},"body":{"classes/RendererManager.html":{}}}],["checking",{"_index":837,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["chi2",{"_index":1642,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["child",{"_index":962,"title":{},"body":{"classes/ImportManager.html":{},"classes/PhoenixMenuNode.html":{}}}],["child.castshadow",{"_index":971,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.findintree(name",{"_index":1478,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.material",{"_index":967,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.clipintersection",{"_index":1002,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.clippingplanes",{"_index":1001,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.clipshadows",{"_index":1003,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.color",{"_index":973,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.dispose",{"_index":968,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material['color",{"_index":997,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material['side",{"_index":999,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.name",{"_index":963,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.nodelevel",{"_index":1410,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.parent",{"_index":1409,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.receiveshadow",{"_index":972,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.toggleselfanddescendants(value",{"_index":1428,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.userdata",{"_index":965,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.userdata.name",{"_index":996,"title":{},"body":{"classes/ImportManager.html":{}}}],["childindex",{"_index":1413,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["children",{"_index":1269,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{}}}],["childrenactive",{"_index":1339,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate",{"_index":1469,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate.name",{"_index":1474,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate.nodelevel",{"_index":1476,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["class",{"_index":0,"title":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{}},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"index.html":{},"overview.html":{}}}],["clearing",{"_index":2373,"title":{},"body":{"interfaces/Window.html":{}}}],["clearinterval(intervalid",{"_index":2314,"title":{},"body":{"classes/VRManager.html":{}}}],["click",{"_index":1949,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicked",{"_index":2041,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicking",{"_index":2483,"title":{},"body":{"interfaces/Window.html":{}}}],["client",{"_index":951,"title":{},"body":{"classes/ImportManager.html":{}}}],["clipintersection",{"_index":958,"title":{},"body":{"classes/ImportManager.html":{}}}],["clipping",{"_index":60,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["clippingangle",{"_index":2079,"title":{},"body":{"classes/StateManager.html":{}}}],["clippingconstant",{"_index":80,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["clippingenabled",{"_index":2080,"title":{},"body":{"classes/StateManager.html":{}}}],["clippingplanes",{"_index":957,"title":{},"body":{"classes/ImportManager.html":{}}}],["clipplanes",{"_index":877,"title":{},"body":{"classes/ImportManager.html":{}}}],["clipshadows",{"_index":959,"title":{},"body":{"classes/ImportManager.html":{}}}],["cloned",{"_index":2226,"title":{},"body":{"classes/VRManager.html":{}}}],["closest",{"_index":2058,"title":{},"body":{"classes/SelectionManager.html":{}}}],["cluster",{"_index":1285,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["clustercoll",{"_index":1277,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid",{"_index":1275,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid.split(':')[0",{"_index":1278,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid.split(':')[1",{"_index":1280,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterindex",{"_index":1279,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterparams",{"_index":1283,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["clusterparams.energy",{"_index":1580,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusterparams.eta",{"_index":1587,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusterparams.uuid",{"_index":1601,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusters",{"_index":1087,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["cms",{"_index":397,"title":{},"body":{"classes/CMSObjects.html":{},"changelog.html":{}}}],["cmsloader",{"_index":2615,"title":{},"body":{"coverage.html":{}}}],["cmsobjects",{"_index":392,"title":{"classes/CMSObjects.html":{}},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["collected",{"_index":1332,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collection",{"_index":663,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["collection.name",{"_index":758,"title":{},"body":{"classes/ExportManager.html":{}}}],["collectioncolor",{"_index":1250,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collectionname",{"_index":664,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["collections",{"_index":669,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["collectionslist",{"_index":1243,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collectionslist.push(collectionname",{"_index":1272,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collideparticles",{"_index":26,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collideparticles(tweenduration",{"_index":107,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["colliding",{"_index":375,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collision",{"_index":106,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collison",{"_index":63,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["collscene",{"_index":1260,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collscene.add(object",{"_index":1264,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collscene.children.length",{"_index":1268,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collscene.name",{"_index":1261,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["color",{"_index":111,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{},"index.html":{}}}],["color(0x2194ce",{"_index":2679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xff0000",{"_index":2678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xffd166",{"_index":2680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xffffff",{"_index":122,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["color(parseint(object[collectionname][0]?.color",{"_index":1252,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["color).set(color",{"_index":974,"title":{},"body":{"classes/ImportManager.html":{}}}],["colors",{"_index":2682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["colour",{"_index":2466,"title":{},"body":{"interfaces/Window.html":{}}}],["combined",{"_index":1333,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["combinedprops",{"_index":1318,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["combinedprops[eventdataprop.label",{"_index":1327,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["commit",{"_index":2545,"title":{},"body":{"changelog.html":{}}}],["commits",{"_index":2544,"title":{},"body":{"changelog.html":{}}}],["complete",{"_index":2440,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["completes",{"_index":311,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["components",{"_index":2581,"title":{},"body":{"changelog.html":{}}}],["composer",{"_index":551,"title":{},"body":{"classes/EffectsManager.html":{}}}],["computed",{"_index":786,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["cone",{"_index":1546,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["config",{"_index":1375,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["config.json",{"_index":2124,"title":{},"body":{"classes/StateManager.html":{}}}],["config.onchange",{"_index":1441,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['color",{"_index":1436,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['ischecked",{"_index":1434,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['value",{"_index":1439,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.type",{"_index":1431,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['color",{"_index":1435,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['highvalue",{"_index":1443,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['ischecked",{"_index":1433,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['value",{"_index":1438,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configactive",{"_index":1340,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configfile",{"_index":2134,"title":{},"body":{"classes/StateManager.html":{}}}],["configoptions",{"_index":1421,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configs",{"_index":1341,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configslength",{"_index":1423,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate",{"_index":1458,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate['label",{"_index":1465,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate['type",{"_index":1463,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate[prop",{"_index":1467,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configurable",{"_index":1194,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["configuration",{"_index":471,"title":{"interfaces/Configuration.html":{}},"body":{"interfaces/Configuration.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["configuration.defaulteventfile?.eventfile",{"_index":2354,"title":{},"body":{"interfaces/Window.html":{}}}],["configuration.defaulteventfile?.eventtype",{"_index":2355,"title":{},"body":{"interfaces/Window.html":{}}}],["configure",{"_index":2235,"title":{},"body":{"classes/VRManager.html":{}}}],["console",{"_index":2349,"title":{},"body":{"interfaces/Window.html":{}}}],["console.error('cannot",{"_index":1417,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["console.error('could",{"_index":2535,"title":{},"body":{"interfaces/Window.html":{}}}],["console.error('error",{"_index":1908,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["console.log",{"_index":1266,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["console.log(\"track",{"_index":1519,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["console.log('event",{"_index":2184,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["console.log('processing",{"_index":1098,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["console.log('select",{"_index":2305,"title":{},"body":{"classes/VRManager.html":{}}}],["console.log(`${typename",{"_index":1246,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["const",{"_index":161,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["constant",{"_index":85,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["constituents",{"_index":1248,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["constructor",{"_index":30,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{}}}],["constructor(camera",{"_index":559,"title":{},"body":{"classes/EffectsManager.html":{}}}],["constructor(clipplanes",{"_index":889,"title":{},"body":{"classes/ImportManager.html":{}}}],["constructor(configuration",{"_index":2336,"title":{},"body":{"interfaces/Window.html":{}}}],["constructor(field",{"_index":526,"title":{},"body":{"classes/Cut.html":{}}}],["constructor(name",{"_index":1357,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["constructor(scene",{"_index":31,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["containing",{"_index":43,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["containingevent",{"_index":2444,"title":{},"body":{"interfaces/Window.html":{}}}],["containment",{"_index":1776,"title":{},"body":{"classes/RendererManager.html":{}}}],["contains",{"_index":686,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{}}}],["containsobject",{"_index":1748,"title":{},"body":{"classes/RendererManager.html":{}}}],["containsobject(obj",{"_index":1773,"title":{},"body":{"classes/RendererManager.html":{}}}],["containspoint(new",{"_index":292,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["content",{"_index":2392,"title":{},"body":{"interfaces/Window.html":{}}}],["controller",{"_index":2213,"title":{},"body":{"classes/VRManager.html":{}}}],["controller1",{"_index":2192,"title":{},"body":{"classes/VRManager.html":{}}}],["controller2",{"_index":2193,"title":{},"body":{"classes/VRManager.html":{}}}],["controllergrip1",{"_index":2194,"title":{},"body":{"classes/VRManager.html":{}}}],["controllergrip2",{"_index":2195,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory",{"_index":2286,"title":{},"body":{"classes/VRManager.html":{}}}],["controllers",{"_index":2279,"title":{},"body":{"classes/VRManager.html":{}}}],["controls",{"_index":650,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["controlsmanager",{"_index":2629,"title":{},"body":{"coverage.html":{}}}],["conventional",{"_index":2543,"title":{},"body":{"changelog.html":{}}}],["copy",{"_index":1662,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["correctly",{"_index":2573,"title":{},"body":{"changelog.html":{}}}],["count",{"_index":221,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LoadingManager.html":{}}}],["coverage",{"_index":2599,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covering",{"_index":302,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["cphi",{"_index":1534,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["create",{"_index":339,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["created",{"_index":1388,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{}}}],["creating",{"_index":2371,"title":{},"body":{"interfaces/Window.html":{}}}],["ctheta",{"_index":1538,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube",{"_index":1584,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.lookat(new",{"_index":1598,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.name",{"_index":1600,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.x",{"_index":1592,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.y",{"_index":1593,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.z",{"_index":1594,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.userdata",{"_index":1599,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.uuid",{"_index":1602,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["curently",{"_index":722,"title":{},"body":{"classes/ExportManager.html":{}}}],["current",{"_index":256,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["currently",{"_index":47,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["currentvrsession",{"_index":2196,"title":{},"body":{"classes/VRManager.html":{}}}],["custom",{"_index":992,"title":{},"body":{"classes/ImportManager.html":{}}}],["customize",{"_index":2334,"title":{},"body":{"interfaces/Window.html":{}}}],["cut",{"_index":515,"title":{"classes/Cut.html":{}},"body":{"classes/Cut.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"changelog.html":{},"coverage.html":{}}}],["cut('energy",{"_index":1221,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('eta",{"_index":1220,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('phi",{"_index":1218,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('pt",{"_index":1225,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('vertextype",{"_index":1236,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut.field",{"_index":1255,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cuts",{"_index":1067,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["cuts?.filter(cut",{"_index":1254,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cylinderbuffergeometry",{"_index":1510,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cylinderbuffergeometry(width",{"_index":1545,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["d0",{"_index":1715,"title":{},"body":{"classes/RKHelper.html":{}}}],["d3.min.js",{"_index":1885,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["dat.gui",{"_index":496,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/Window.html":{},"dependencies.html":{}}}],["data",{"_index":46,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data.json",{"_index":2664,"title":{},"body":{"index.html":{}}}],["data.length",{"_index":2186,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["data/description",{"_index":924,"title":{},"body":{"classes/ImportManager.html":{}}}],["declare",{"_index":1877,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["default",{"_index":82,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["defaulteventfile",{"_index":476,"title":{},"body":{"interfaces/Configuration.html":{}}}],["defaulteventpath",{"_index":2501,"title":{},"body":{"interfaces/Window.html":{}}}],["defaulteventtype",{"_index":2503,"title":{},"body":{"interfaces/Window.html":{}}}],["defaultmaxvalue",{"_index":520,"title":{},"body":{"classes/Cut.html":{}}}],["defaultminvalue",{"_index":521,"title":{},"body":{"classes/Cut.html":{}}}],["defaultrenderpass",{"_index":552,"title":{},"body":{"classes/EffectsManager.html":{}}}],["defaults",{"_index":1872,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["defaultview",{"_index":477,"title":{},"body":{"interfaces/Configuration.html":{},"changelog.html":{}}}],["define",{"_index":775,"title":{},"body":{"classes/Field.html":{},"index.html":{}}}],["defined",{"_index":36,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{}}}],["defining",{"_index":2462,"title":{},"body":{"interfaces/Window.html":{}}}],["definition",{"_index":1723,"title":{},"body":{"classes/RKHelper.html":{}}}],["definitions",{"_index":1728,"title":{},"body":{"classes/RKHelper.html":{}}}],["delete",{"_index":1418,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{}}}],["dependencies",{"_index":2642,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["deployment",{"_index":2593,"title":{},"body":{"changelog.html":{}}}],["descendants",{"_index":1399,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["describe",{"_index":1623,"title":{},"body":{"classes/PresetView.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["desired",{"_index":667,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["detector",{"_index":174,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["dflt_colors",{"_index":2421,"title":{},"body":{"interfaces/Window.html":{}}}],["different",{"_index":629,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["dimensional",{"_index":138,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["dir",{"_index":867,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["direction",{"_index":856,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["directionallight",{"_index":1982,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directionallight().type",{"_index":1991,"title":{},"body":{"classes/SelectionManager.html":{}}}],["disable",{"_index":1960,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["disabled",{"_index":569,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["disableselecting",{"_index":1924,"title":{},"body":{"classes/SelectionManager.html":{}}}],["display",{"_index":474,"title":{},"body":{"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["display's",{"_index":49,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["display.ts",{"_index":2323,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["displayed",{"_index":673,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["displayusage",{"_index":2659,"title":{},"body":{"index.html":{}}}],["disposing",{"_index":1000,"title":{},"body":{"classes/ImportManager.html":{}}}],["distance",{"_index":86,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["distancefromorigin",{"_index":109,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["dividing",{"_index":1306,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["document",{"_index":1896,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.body",{"_index":1831,"title":{},"body":{"classes/RendererManager.html":{}}}],["document.body.appendchild(link",{"_index":768,"title":{},"body":{"classes/ExportManager.html":{}}}],["document.createelement('a",{"_index":766,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{}}}],["document.createelement('input",{"_index":2129,"title":{},"body":{"classes/StateManager.html":{}}}],["document.createelement('script",{"_index":1900,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.getelementbyid('three",{"_index":2001,"title":{},"body":{"classes/SelectionManager.html":{}}}],["document.getelementbyid(elementid",{"_index":1830,"title":{},"body":{"classes/RendererManager.html":{}}}],["document.getelementsbytagname('head')[0",{"_index":1870,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["documentation",{"_index":2600,"title":{},"body":{"coverage.html":{}}}],["documented",{"_index":2541,"title":{},"body":{"changelog.html":{}}}],["dof",{"_index":1645,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["dom",{"_index":1787,"title":{},"body":{"classes/RendererManager.html":{}}}],["don't",{"_index":1663,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["doubleside",{"_index":412,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{}}}],["doublesided",{"_index":900,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["download",{"_index":725,"title":{},"body":{"classes/ExportManager.html":{}}}],["download/save",{"_index":714,"title":{},"body":{"classes/ExportManager.html":{}}}],["dparams",{"_index":1677,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["dparams[0",{"_index":1716,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[1",{"_index":1718,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[2",{"_index":1719,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[3",{"_index":1720,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[4",{"_index":1721,"title":{},"body":{"classes/RKHelper.html":{}}}],["draw",{"_index":653,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["drawrange",{"_index":220,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["driven",{"_index":2653,"title":{},"body":{"index.html":{}}}],["duration",{"_index":65,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["dynamically",{"_index":1855,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["e",{"_index":2133,"title":{},"body":{"classes/StateManager.html":{}}}],["e.target?.files[0",{"_index":2135,"title":{},"body":{"classes/StateManager.html":{}}}],["each",{"_index":98,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["easily",{"_index":1616,"title":{},"body":{"classes/PresetView.html":{}}}],["easing",{"_index":124,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["edges",{"_index":459,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry",{"_index":410,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry(boxbuffer",{"_index":461,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edit",{"_index":265,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["effect",{"_index":573,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer",{"_index":571,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer(renderer",{"_index":602,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effects",{"_index":545,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["effectsmanager",{"_index":543,"title":{"classes/EffectsManager.html":{}},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["effectsrender",{"_index":556,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectsrender(scene",{"_index":588,"title":{},"body":{"classes/EffectsManager.html":{}}}],["element",{"_index":492,"title":{},"body":{"interfaces/Configuration.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/StateManager.html":{}}}],["elementid",{"_index":478,"title":{},"body":{"interfaces/Configuration.html":{},"classes/RendererManager.html":{},"index.html":{}}}],["elements",{"_index":584,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["enable",{"_index":495,"title":{},"body":{"interfaces/Configuration.html":{},"classes/ImportManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["enabled",{"_index":568,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["enabledatguimenu",{"_index":479,"title":{},"body":{"interfaces/Configuration.html":{}}}],["enableeventdisplayconsole",{"_index":2461,"title":{},"body":{"interfaces/Window.html":{}}}],["enablekeyboardcontrols",{"_index":2495,"title":{},"body":{"interfaces/Window.html":{}}}],["enables",{"_index":2460,"title":{},"body":{"interfaces/Window.html":{}}}],["enableselecting",{"_index":1925,"title":{},"body":{"classes/SelectionManager.html":{}}}],["enableselecting(enable",{"_index":2485,"title":{},"body":{"interfaces/Window.html":{}}}],["enabling",{"_index":1956,"title":{},"body":{"classes/SelectionManager.html":{}}}],["end",{"_index":128,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["end.chain(startclone",{"_index":195,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["ended",{"_index":71,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["ends",{"_index":100,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["endvr",{"_index":2359,"title":{},"body":{"interfaces/Window.html":{}}}],["endvrsession",{"_index":2205,"title":{},"body":{"classes/VRManager.html":{}}}],["energy",{"_index":1646,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["entries",{"_index":1013,"title":{},"body":{"classes/InfoLogger.html":{}}}],["entry",{"_index":1020,"title":{},"body":{"classes/InfoLogger.html":{}}}],["error",{"_index":838,"title":{},"body":{"classes/Field.html":{},"classes/ImportManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["error_estimate",{"_index":840,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["estimate",{"_index":839,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["et",{"_index":1647,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["eta",{"_index":1643,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["etc",{"_index":1090,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["event",{"_index":45,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["event.clientx",{"_index":2048,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.clienty",{"_index":2051,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.preventdefault",{"_index":2043,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event_data_id",{"_index":878,"title":{},"body":{"classes/ImportManager.html":{}}}],["event_data_type_colors",{"_index":414,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["event_data_type_colors['caloclusters",{"_index":1583,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event_data_type_colors['hits",{"_index":1568,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event_data_type_colors['jets",{"_index":1547,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event_data_type_colors['muonchambers",{"_index":451,"title":{},"body":{"classes/CMSObjects.html":{}}}],["event_data_type_colors['vertices",{"_index":1604,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event_data_type_colors[typename",{"_index":1253,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata",{"_index":200,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["eventdata.caloclusters",{"_index":1217,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.children",{"_index":754,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdata.electrons",{"_index":1233,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.hits",{"_index":1213,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.muons",{"_index":1224,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.photons",{"_index":1230,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.traverse((eventobject",{"_index":209,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventdata.vertices",{"_index":1235,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdataconfig",{"_index":749,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name",{"_index":756,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name].push(collection.name",{"_index":759,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdatakeys",{"_index":1314,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatakeys.includes(eventdatapropkey",{"_index":1325,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdataloader",{"_index":480,"title":{"interfaces/EventDataLoader.html":{}},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"coverage.html":{},"index.html":{}}}],["eventdataprop",{"_index":1320,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdataprop.keys",{"_index":1324,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatapropgroup",{"_index":1317,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatapropgroups",{"_index":1311,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatapropkey",{"_index":1323,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdisplay",{"_index":1784,"title":{},"body":{"classes/RendererManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"index.html":{}}}],["eventdisplay.init(configuration",{"_index":2662,"title":{},"body":{"index.html":{}}}],["eventdisplay.loadobjgeometry('path/to/geometry.obj",{"_index":2666,"title":{},"body":{"index.html":{}}}],["eventdisplay.parsephoenixevents(res",{"_index":2665,"title":{},"body":{"index.html":{}}}],["eventfile",{"_index":513,"title":{},"body":{"interfaces/Configuration.html":{}}}],["eventkey",{"_index":2377,"title":{},"body":{"interfaces/Window.html":{}}}],["eventkeys",{"_index":2361,"title":{},"body":{"interfaces/Window.html":{}}}],["eventnum",{"_index":2173,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["eventnumber",{"_index":1099,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{}}}],["eventobject",{"_index":205,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry",{"_index":210,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.boundingsphere.center",{"_index":264,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.computeboundingsphere",{"_index":269,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.deleteattribute('position",{"_index":268,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.drawrange",{"_index":234,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.drawrange.count",{"_index":231,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.setdrawrange(0",{"_index":232,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry?.attributes?.position?.count",{"_index":224,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.material",{"_index":337,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.material.clippingplanes",{"_index":338,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.name",{"_index":216,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.position",{"_index":263,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.position.dividescalar(previousscale",{"_index":257,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.position.equals(new",{"_index":261,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.setscalar(updatedscale.x",{"_index":251,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.x",{"_index":242,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.y",{"_index":243,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.z",{"_index":244,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.visible",{"_index":276,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobjecttween",{"_index":233,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobjecttween.oncomplete",{"_index":235,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["events",{"_index":683,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["eventsdata",{"_index":685,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["eventtype",{"_index":514,"title":{},"body":{"interfaces/Configuration.html":{}}}],["example",{"_index":1309,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["examples",{"_index":2668,"title":{},"body":{"index.html":{}}}],["existing",{"_index":1732,"title":{},"body":{"classes/RKHelper.html":{},"interfaces/Window.html":{}}}],["exists",{"_index":222,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ScriptLoader.html":{}}}],["experiment",{"_index":677,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["export",{"_index":155,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["exported",{"_index":705,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter",{"_index":732,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse",{"_index":743,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse(scene",{"_index":733,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportmanager",{"_index":689,"title":{"classes/ExportManager.html":{}},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["exportphoenixdisplay",{"_index":2409,"title":{},"body":{"interfaces/Window.html":{}}}],["exportphoenixscene",{"_index":691,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportphoenixscene(scene",{"_index":698,"title":{},"body":{"classes/ExportManager.html":{}}}],["exports",{"_index":699,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["exportscenetoobj",{"_index":692,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportscenetoobj(scene",{"_index":707,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporttoobj",{"_index":2397,"title":{},"body":{"interfaces/Window.html":{}}}],["expressed",{"_index":1095,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["extendeventdatatypeui",{"_index":1068,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["extendeventdatatypeui?.(typefolder",{"_index":1259,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["extends",{"_index":1033,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["external",{"_index":1856,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["extraanimationsphereduration",{"_index":197,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["extract",{"_index":2528,"title":{},"body":{"interfaces/Window.html":{}}}],["extrapolate",{"_index":1698,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolated",{"_index":1521,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["extrapolatetrackpositions",{"_index":1694,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolatetrackpositions(track",{"_index":1696,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolating",{"_index":211,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["extrapolation",{"_index":1530,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["extras/configuration",{"_index":2324,"title":{},"body":{"interfaces/Window.html":{}}}],["extras/cut.model",{"_index":1187,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["f87c587",{"_index":2561,"title":{},"body":{"changelog.html":{}}}],["face3",{"_index":409,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(0",{"_index":430,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(1",{"_index":440,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(2",{"_index":432,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(4",{"_index":434,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(6",{"_index":436,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(7",{"_index":442,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces",{"_index":417,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces.concat(backs",{"_index":427,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces.push",{"_index":421,"title":{},"body":{"classes/CMSObjects.html":{}}}],["facing",{"_index":2317,"title":{},"body":{"classes/VRManager.html":{}}}],["factor",{"_index":2435,"title":{},"body":{"interfaces/Window.html":{}}}],["failed",{"_index":2553,"title":{},"body":{"changelog.html":{}}}],["fallback",{"_index":2502,"title":{},"body":{"interfaces/Window.html":{}}}],["false",{"_index":277,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["features",{"_index":2578,"title":{},"body":{"changelog.html":{}}}],["fetch",{"_index":2514,"title":{},"body":{"interfaces/Window.html":{}}}],["fetch('path/to/event",{"_index":2663,"title":{},"body":{"index.html":{}}}],["fetch(file",{"_index":2524,"title":{},"body":{"interfaces/Window.html":{}}}],["fetch(urlparams.get('config",{"_index":2516,"title":{},"body":{"interfaces/Window.html":{}}}],["few",{"_index":1520,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["ffffff",{"_index":2452,"title":{},"body":{"interfaces/Window.html":{}}}],["fh",{"_index":845,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["fh2",{"_index":846,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field",{"_index":522,"title":{"classes/Field.html":{}},"body":{"classes/Cut.html":{},"classes/Field.html":{},"coverage.html":{}}}],["field.get(pos1",{"_index":821,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(pos2",{"_index":828,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(state.pos",{"_index":809,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["file.readobject(objectname",{"_index":2429,"title":{},"body":{"interfaces/Window.html":{}}}],["filename",{"_index":711,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["filereader",{"_index":2137,"title":{},"body":{"classes/StateManager.html":{}}}],["filter",{"_index":528,"title":{},"body":{"classes/Cut.html":{},"changelog.html":{}}}],["filter(hitposition",{"_index":291,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["filter(val",{"_index":2036,"title":{},"body":{"classes/SelectionManager.html":{}}}],["filtered",{"_index":529,"title":{},"body":{"classes/Cut.html":{}}}],["filters",{"_index":518,"title":{},"body":{"classes/Cut.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["finally",{"_index":2521,"title":{},"body":{"interfaces/Window.html":{}}}],["find",{"_index":1383,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{}}}],["find(symbol",{"_index":1660,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["finding",{"_index":1970,"title":{},"body":{"classes/SelectionManager.html":{}}}],["findintree",{"_index":1350,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintree(name",{"_index":1381,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintreeorcreate",{"_index":1351,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintreeorcreate(name",{"_index":1386,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["first",{"_index":77,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{},"index.html":{}}}],["fix",{"_index":2557,"title":{},"body":{"changelog.html":{}}}],["fixed",{"_index":1765,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["fixedoverlay",{"_index":1743,"title":{},"body":{"classes/RendererManager.html":{}}}],["fixes",{"_index":2487,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["fixoverlayview(fixed",{"_index":2488,"title":{},"body":{"interfaces/Window.html":{}}}],["flat",{"_index":910,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["flatshading",{"_index":960,"title":{},"body":{"classes/ImportManager.html":{}}}],["flatten",{"_index":927,"title":{},"body":{"classes/ImportManager.html":{}}}],["float32array([].concat(...reachedhits",{"_index":296,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["float32array(positions.length",{"_index":1562,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["floor",{"_index":2252,"title":{},"body":{"classes/VRManager.html":{}}}],["fo",{"_index":2099,"title":{},"body":{"classes/StateManager.html":{}}}],["folder",{"_index":1077,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["format",{"_index":700,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["formatted",{"_index":2572,"title":{},"body":{"changelog.html":{}}}],["found",{"_index":1385,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["front",{"_index":428,"title":{},"body":{"classes/CMSObjects.html":{}}}],["frontside",{"_index":930,"title":{},"body":{"classes/ImportManager.html":{}}}],["function",{"_index":67,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["function,onanimationstart",{"_index":103,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["functionality",{"_index":652,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["functions",{"_index":51,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["generate",{"_index":740,"title":{},"body":{"classes/ExportManager.html":{}}}],["generation",{"_index":59,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["geom",{"_index":2449,"title":{},"body":{"interfaces/Window.html":{}}}],["geometries",{"_index":658,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["geometries.children.foreach((object",{"_index":760,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometries/event",{"_index":2482,"title":{},"body":{"interfaces/Window.html":{}}}],["geometries_id",{"_index":879,"title":{},"body":{"classes/ImportManager.html":{}}}],["geometriesconfig",{"_index":751,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometriesconfig.push(object.name",{"_index":762,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometry",{"_index":219,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["geometry.computeboundingsphere",{"_index":297,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["geometry.name",{"_index":991,"title":{},"body":{"classes/ImportManager.html":{}}}],["geometry.scale.set(scale",{"_index":994,"title":{},"body":{"classes/ImportManager.html":{}}}],["geometry.setattribute('position",{"_index":295,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["geometry.traverse((child",{"_index":995,"title":{},"body":{"classes/ImportManager.html":{}}}],["geometry/event",{"_index":2477,"title":{},"body":{"interfaces/Window.html":{}}}],["geometryposcount",{"_index":223,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["get(field",{"_index":776,"title":{},"body":{"classes/Field.html":{}}}],["getactiveobjectid",{"_index":1926,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["getcameragroup",{"_index":2206,"title":{},"body":{"classes/VRManager.html":{}}}],["getcameragroup(camera",{"_index":2224,"title":{},"body":{"classes/VRManager.html":{}}}],["getcameratween",{"_index":27,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["getcameratween(pos",{"_index":123,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["getcluster",{"_index":1487,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcluster(clusterparams",{"_index":1492,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcollection",{"_index":632,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getcollection(collectionname",{"_index":661,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["getcollections",{"_index":633,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["geteventdata",{"_index":1035,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["geteventdata(eventnum",{"_index":2169,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["geteventmetadata",{"_index":634,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["geteventslist",{"_index":635,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["geteventslist(eventsdata",{"_index":680,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["gethits",{"_index":1488,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gethits(hitsparams",{"_index":1494,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gethitspositions",{"_index":29,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["gethitspositions(positions",{"_index":131,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["geticonurl",{"_index":1621,"title":{},"body":{"classes/PresetView.html":{}}}],["getinfologger",{"_index":2383,"title":{},"body":{"interfaces/Window.html":{}}}],["getinfologgerlist",{"_index":1009,"title":{},"body":{"classes/InfoLogger.html":{}}}],["getinstance",{"_index":2081,"title":{},"body":{"classes/StateManager.html":{}}}],["getjet",{"_index":1489,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getjet(jetparams",{"_index":1497,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getloadingmanager",{"_index":2384,"title":{},"body":{"interfaces/Window.html":{}}}],["getlocalclipping",{"_index":1749,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmainrenderer",{"_index":1750,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmuon",{"_index":1038,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getmuon(muonparams",{"_index":1084,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getmuonchamber",{"_index":401,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getmuonchamber(muonchamberparams",{"_index":402,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getnodestate",{"_index":1352,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["getobject",{"_index":1054,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getobject.bind(this)(objectparams",{"_index":1263,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["getobjecttypecollections",{"_index":1039,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getobjecttypecollections(object",{"_index":1088,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getoverlayrenderer",{"_index":1751,"title":{},"body":{"classes/RendererManager.html":{}}}],["getprettyparams",{"_index":1637,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettyparams(params",{"_index":1650,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol",{"_index":1638,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol(param",{"_index":1654,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getrenderers",{"_index":1752,"title":{},"body":{"classes/RendererManager.html":{}}}],["getthreemanager",{"_index":2381,"title":{},"body":{"interfaces/Window.html":{}}}],["getting",{"_index":2537,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["gettrack",{"_index":1490,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettrack(trackparams",{"_index":1500,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettrackswithrungekutta",{"_index":1695,"title":{},"body":{"classes/RKHelper.html":{}}}],["gettrackswithrungekutta(trackscollectionsevent",{"_index":1701,"title":{},"body":{"classes/RKHelper.html":{}}}],["getuimanager",{"_index":2382,"title":{},"body":{"interfaces/Window.html":{}}}],["getvertex",{"_index":1491,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getvertex(vertexparams",{"_index":1502,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getvrcamera",{"_index":2207,"title":{},"body":{"classes/VRManager.html":{}}}],["given",{"_index":407,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["giving",{"_index":1968,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["global",{"_index":1874,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["globalmomentum",{"_index":1726,"title":{},"body":{"classes/RKHelper.html":{}}}],["globalmomentum.clone",{"_index":1736,"title":{},"body":{"classes/RKHelper.html":{}}}],["gltf",{"_index":741,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["gltf.scene",{"_index":983,"title":{},"body":{"classes/ImportManager.html":{}}}],["gltf.scene.getobjectbyname(this.event_data_id",{"_index":978,"title":{},"body":{"classes/ImportManager.html":{}}}],["gltf.scene.getobjectbyname(this.geometries_id",{"_index":979,"title":{},"body":{"classes/ImportManager.html":{}}}],["gltfexporter",{"_index":729,"title":{},"body":{"classes/ExportManager.html":{}}}],["gltfloader",{"_index":933,"title":{},"body":{"classes/ImportManager.html":{}}}],["go",{"_index":1666,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["graphic",{"_index":648,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["graphicslibrary",{"_index":637,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["greater",{"_index":2436,"title":{},"body":{"interfaces/Window.html":{}}}],["group",{"_index":152,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["groups",{"_index":1308,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["guidelines",{"_index":2546,"title":{},"body":{"changelog.html":{}}}],["h",{"_index":814,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h).cross(b_last",{"_index":829,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h2",{"_index":800,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h",{"_index":801,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h).cross(b_middle",{"_index":822,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["hand",{"_index":2254,"title":{},"body":{"classes/VRManager.html":{}}}],["handed",{"_index":1730,"title":{},"body":{"classes/RKHelper.html":{}}}],["handles",{"_index":1062,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["hash",{"_index":2569,"title":{},"body":{"changelog.html":{}}}],["hasposition",{"_index":260,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["helper",{"_index":1516,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["helper.ts",{"_index":1693,"title":{},"body":{"classes/RKHelper.html":{},"coverage.html":{}}}],["helper.ts:13",{"_index":1702,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts:33",{"_index":1697,"title":{},"body":{"classes/RKHelper.html":{}}}],["helpers/constants",{"_index":415,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["helpers/pretty",{"_index":1986,"title":{},"body":{"classes/SelectionManager.html":{}}}],["helpers/rk",{"_index":1515,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hide",{"_index":381,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["highlight",{"_index":1967,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highlighting",{"_index":582,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["highlightobject",{"_index":1927,"title":{},"body":{"classes/SelectionManager.html":{}}}],["highlightobject(uuid",{"_index":1964,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highly",{"_index":2650,"title":{},"body":{"index.html":{}}}],["highvalue",{"_index":1442,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["hit",{"_index":266,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["hit[0",{"_index":1564,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hit[1",{"_index":1565,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hit[2",{"_index":1566,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hit_id,x,y,z,volume_id,layer_id,module_id",{"_index":2187,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hitdata",{"_index":2159,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hits",{"_index":134,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{},"miscellaneous/variables.html":{}}}],["hits.split('\\n",{"_index":2183,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hitsparams",{"_index":1496,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams.pos",{"_index":1560,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams.uuid",{"_index":1573,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparamsclone",{"_index":1557,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitspositions",{"_index":288,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["hovered",{"_index":583,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["hovering",{"_index":1944,"title":{},"body":{"classes/SelectionManager.html":{}}}],["html",{"_index":2473,"title":{},"body":{"interfaces/Window.html":{}}}],["htmlcanvaselement",{"_index":1800,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["htmlelement",{"_index":1868,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["icon",{"_index":1342,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["id",{"_index":490,"title":{},"body":{"interfaces/Configuration.html":{},"classes/ImportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["identifier",{"_index":2601,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1061,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{}}}],["ignored",{"_index":1943,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ignorelist",{"_index":1917,"title":{},"body":{"classes/SelectionManager.html":{}}}],["immersive",{"_index":2223,"title":{},"body":{"classes/VRManager.html":{}}}],["implementing",{"_index":628,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["implements",{"_index":1172,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["implicitly",{"_index":2588,"title":{},"body":{"changelog.html":{}}}],["import",{"_index":139,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["importmanager",{"_index":875,"title":{"classes/ImportManager.html":{}},"body":{"classes/ImportManager.html":{},"coverage.html":{}}}],["inbounds",{"_index":862,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["including",{"_index":721,"title":{},"body":{"classes/ExportManager.html":{}}}],["independent",{"_index":2654,"title":{},"body":{"index.html":{}}}],["index",{"_index":17,"title":{"index.html":{}},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["infinity",{"_index":227,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["infologger",{"_index":641,"title":{"classes/InfoLogger.html":{}},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["infologgerlist",{"_index":1006,"title":{},"body":{"classes/InfoLogger.html":{}}}],["information",{"_index":1015,"title":{},"body":{"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["inherited",{"_index":1042,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["init",{"_index":1753,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["init(camera",{"_index":1971,"title":{},"body":{"classes/SelectionManager.html":{}}}],["init(configuration",{"_index":2340,"title":{},"body":{"interfaces/Window.html":{}}}],["init(elementid",{"_index":1782,"title":{},"body":{"classes/RendererManager.html":{}}}],["initeventfromurl(defaulteventpath",{"_index":2504,"title":{},"body":{"interfaces/Window.html":{}}}],["initialize",{"_index":581,"title":{},"body":{"classes/EffectsManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["initialized",{"_index":1946,"title":{},"body":{"classes/SelectionManager.html":{}}}],["initializes",{"_index":2476,"title":{},"body":{"interfaces/Window.html":{}}}],["initializing",{"_index":1763,"title":{},"body":{"classes/RendererManager.html":{}}}],["initially",{"_index":2387,"title":{},"body":{"interfaces/Window.html":{}}}],["initiallyvisible",{"_index":2386,"title":{},"body":{"interfaces/Window.html":{}}}],["initrenderer",{"_index":1754,"title":{},"body":{"classes/RendererManager.html":{}}}],["initrenderer(elementid",{"_index":1785,"title":{},"body":{"classes/RendererManager.html":{}}}],["initvr(onsessionended",{"_index":2356,"title":{},"body":{"interfaces/Window.html":{}}}],["input",{"_index":739,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["inputfile",{"_index":2128,"title":{},"body":{"classes/StateManager.html":{}}}],["inputfile.accept",{"_index":2131,"title":{},"body":{"classes/StateManager.html":{}}}],["inputfile.click",{"_index":2145,"title":{},"body":{"classes/StateManager.html":{}}}],["inputfile.onchange",{"_index":2132,"title":{},"body":{"classes/StateManager.html":{}}}],["inputfile.remove",{"_index":2143,"title":{},"body":{"classes/StateManager.html":{}}}],["inputfile.type",{"_index":2130,"title":{},"body":{"classes/StateManager.html":{}}}],["inside",{"_index":564,"title":{},"body":{"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["install",{"_index":2657,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1108,"title":{},"body":{"classes/LoadingManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["instanceof",{"_index":228,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{}}}],["instantiate",{"_index":731,"title":{},"body":{"classes/ExportManager.html":{}}}],["instead",{"_index":1420,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["instiantiate",{"_index":2166,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["integrator",{"_index":799,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["interface",{"_index":470,"title":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["interfaces",{"_index":472,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["intersected",{"_index":1976,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject",{"_index":2016,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.name",{"_index":2021,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.userdata[key",{"_index":2035,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject",{"_index":1928,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject(event",{"_index":1973,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects",{"_index":1975,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects.length",{"_index":2056,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects[0].object",{"_index":2059,"title":{},"body":{"classes/SelectionManager.html":{}}}],["interval",{"_index":2302,"title":{},"body":{"classes/VRManager.html":{}}}],["intervalid",{"_index":2303,"title":{},"body":{"classes/VRManager.html":{}}}],["intitialize",{"_index":2333,"title":{},"body":{"interfaces/Window.html":{}}}],["invisible",{"_index":271,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["isfixedoverlay",{"_index":1755,"title":{},"body":{"classes/RendererManager.html":{}}}],["isinit",{"_index":1918,"title":{},"body":{"classes/SelectionManager.html":{}}}],["issue",{"_index":1529,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["isvractive",{"_index":2208,"title":{},"body":{"classes/VRManager.html":{}}}],["it's",{"_index":1672,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["item",{"_index":1126,"title":{},"body":{"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{}}}],["itemloaded",{"_index":1117,"title":{},"body":{"classes/LoadingManager.html":{}}}],["itemloaded(id",{"_index":1137,"title":{},"body":{"classes/LoadingManager.html":{}}}],["itemname",{"_index":1142,"title":{},"body":{"classes/LoadingManager.html":{}}}],["items",{"_index":315,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{}}}],["iterating",{"_index":1316,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["itself",{"_index":1398,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["j",{"_index":1106,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["jet",{"_index":239,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["jetparams",{"_index":1499,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.uuid",{"_index":1555,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jets",{"_index":1072,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"miscellaneous/variables.html":{}}}],["jetsscale",{"_index":1199,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["jivexml",{"_index":2500,"title":{},"body":{"interfaces/Window.html":{}}}],["jivexmlloader",{"_index":2326,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["joining",{"_index":1330,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["js",{"_index":2648,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":902,"title":{},"body":{"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["json.parse(e.target.result.tostring",{"_index":2140,"title":{},"body":{"classes/StateManager.html":{}}}],["json.parse(input",{"_index":2403,"title":{},"body":{"interfaces/Window.html":{}}}],["json.parse(json",{"_index":1454,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["json.stringify(geometry",{"_index":976,"title":{},"body":{"classes/ImportManager.html":{}}}],["json.stringify(jsonresult",{"_index":746,"title":{},"body":{"classes/ExportManager.html":{}}}],["jsondata",{"_index":2139,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay",{"_index":2149,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']?.['clippingangle",{"_index":2151,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['phoenixmenu",{"_index":2146,"title":{},"body":{"classes/StateManager.html":{}}}],["jsonobject",{"_index":1453,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['children",{"_index":1470,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['childrenactive",{"_index":1455,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['configs",{"_index":1459,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['togglestate",{"_index":1456,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonresult",{"_index":744,"title":{},"body":{"classes/ExportManager.html":{}}}],["jsroot",{"_index":1861,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jsroot.newhttprequest(url",{"_index":2419,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot.openfile(url",{"_index":2428,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot3dpainter.js",{"_index":1887,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrootcore.js",{"_index":1881,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrooteventloader",{"_index":2620,"title":{},"body":{"coverage.html":{}}}],["jsrootgeobase.js",{"_index":1888,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrootgeopainter.js",{"_index":1889,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrootpainter.js",{"_index":1886,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jszip",{"_index":2645,"title":{},"body":{"dependencies.html":{}}}],["k1",{"_index":811,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k1.clone().sub(k2).sub(k3).add(k4",{"_index":832,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k2",{"_index":804,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k3",{"_index":805,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4",{"_index":806,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4).lpnorm",{"_index":833,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["keep",{"_index":1596,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["key",{"_index":665,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["keyboard",{"_index":2351,"title":{},"body":{"interfaces/Window.html":{}}}],["keys",{"_index":684,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["kutta",{"_index":781,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["kutta.ts",{"_index":774,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["kutta.ts:13",{"_index":1851,"title":{},"body":{"classes/RungeKutta.html":{}}}],["kutta.ts:132",{"_index":2070,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:134",{"_index":2066,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:136",{"_index":2068,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:138",{"_index":2071,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:140",{"_index":2074,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:142",{"_index":2072,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:144",{"_index":2067,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:146",{"_index":2069,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:156",{"_index":777,"title":{},"body":{"classes/Field.html":{}}}],["kutta.ts:93",{"_index":1850,"title":{},"body":{"classes/RungeKutta.html":{}}}],["label",{"_index":1018,"title":{},"body":{"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{}}}],["last",{"_index":99,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["later",{"_index":702,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["left",{"_index":443,"title":{},"body":{"classes/CMSObjects.html":{}}}],["length",{"_index":861,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["level",{"_index":1366,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["lhcb",{"_index":1032,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["lhcbloader",{"_index":1029,"title":{"classes/LHCbLoader.html":{}},"body":{"classes/LHCbLoader.html":{},"coverage.html":{}}}],["library",{"_index":649,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"changelog.html":{}}}],["line",{"_index":1508,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{}}}],["line(geometry",{"_index":2296,"title":{},"body":{"classes/VRManager.html":{}}}],["line.name",{"_index":2297,"title":{},"body":{"classes/VRManager.html":{}}}],["line.scale.z",{"_index":2298,"title":{},"body":{"classes/VRManager.html":{}}}],["linebasicmaterial",{"_index":411,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{}}}],["lineboxobject",{"_index":462,"title":{},"body":{"classes/CMSObjects.html":{}}}],["lines",{"_index":458,"title":{},"body":{"classes/CMSObjects.html":{}}}],["linesegments",{"_index":413,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{}}}],["linesegments(boxedges",{"_index":463,"title":{},"body":{"classes/CMSObjects.html":{}}}],["link",{"_index":416,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ExportManager.html":{}}}],["link.click",{"_index":772,"title":{},"body":{"classes/ExportManager.html":{}}}],["link.download",{"_index":771,"title":{},"body":{"classes/ExportManager.html":{}}}],["link.href",{"_index":769,"title":{},"body":{"classes/ExportManager.html":{}}}],["link.style.display",{"_index":767,"title":{},"body":{"classes/ExportManager.html":{}}}],["linkedclusters",{"_index":1274,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["linkedtracks",{"_index":1288,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["list",{"_index":671,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["listener",{"_index":1131,"title":{},"body":{"classes/LoadingManager.html":{}}}],["listentodisplayedeventchange(callback",{"_index":2455,"title":{},"body":{"interfaces/Window.html":{}}}],["listentoloadedeventschange(callback",{"_index":2457,"title":{},"body":{"interfaces/Window.html":{}}}],["literal",{"_index":483,"title":{},"body":{"interfaces/Configuration.html":{},"classes/LoadingManager.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{}}}],["load",{"_index":484,"title":{},"body":{"interfaces/Configuration.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["loadable",{"_index":890,"title":{},"body":{"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["loadconfig",{"_index":2512,"title":{},"body":{"interfaces/Window.html":{}}}],["loaded",{"_index":706,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["loader",{"_index":498,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["loader.geteventdata",{"_index":2530,"title":{},"body":{"interfaces/Window.html":{}}}],["loader.load(json",{"_index":988,"title":{},"body":{"classes/ImportManager.html":{}}}],["loader.load(sceneurl",{"_index":982,"title":{},"body":{"classes/ImportManager.html":{}}}],["loader.parse(json",{"_index":990,"title":{},"body":{"classes/ImportManager.html":{}}}],["loader.parse(scenestring",{"_index":977,"title":{},"body":{"classes/ImportManager.html":{}}}],["loader.process(res",{"_index":2529,"title":{},"body":{"interfaces/Window.html":{}}}],["loader.ts",{"_index":627,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loader.ts:10",{"_index":2167,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:100",{"_index":1180,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:12",{"_index":2165,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:121",{"_index":1186,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:15",{"_index":1862,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loader.ts:17",{"_index":1175,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:18",{"_index":642,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:19",{"_index":1176,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:21",{"_index":1174,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:22",{"_index":1052,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:220",{"_index":1178,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:23",{"_index":1173,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:25",{"_index":681,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:258",{"_index":1177,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:28",{"_index":2175,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:280",{"_index":1185,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:297",{"_index":1184,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:31",{"_index":668,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["loader.ts:338",{"_index":1182,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:38",{"_index":662,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:40",{"_index":1179,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{}}}],["loader.ts:44",{"_index":674,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loader.ts:62",{"_index":1049,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:63",{"_index":1183,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:65",{"_index":2179,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:79",{"_index":1181,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:8",{"_index":1041,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loader.ts:81",{"_index":2170,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loaders",{"_index":630,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loaders/jivexml",{"_index":2327,"title":{},"body":{"interfaces/Window.html":{}}}],["loaders/phoenix",{"_index":2328,"title":{},"body":{"interfaces/Window.html":{}}}],["loadevent(eventkey",{"_index":2378,"title":{},"body":{"interfaces/Window.html":{}}}],["loadgltfgeometry",{"_index":881,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadgltfgeometry(sceneurl",{"_index":892,"title":{},"body":{"classes/ImportManager.html":{}}}],["loading",{"_index":501,"title":{},"body":{"interfaces/Configuration.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["loadingmanager",{"_index":880,"title":{"classes/LoadingManager.html":{}},"body":{"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["loadingmanager.addloadableitem('jsroot_scripts",{"_index":1878,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadingmanager.addloadableitem('single_script",{"_index":1894,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadingmanager.instance",{"_index":1144,"title":{},"body":{"classes/LoadingManager.html":{}}}],["loadingmanager.itemloaded('jsroot_scripts",{"_index":1893,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadingmanager.itemloaded('single_script",{"_index":1906,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadjsongeometry",{"_index":882,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadjsongeometry(json",{"_index":899,"title":{},"body":{"classes/ImportManager.html":{}}}],["loadjsrootscripts",{"_index":1858,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadjsrootscripts(onscriptsloaded",{"_index":1860,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadobjecttypes",{"_index":1040,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loadobjecttypes(eventdata",{"_index":1091,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loadobjgeometry",{"_index":883,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadobjgeometry(callback",{"_index":907,"title":{},"body":{"classes/ImportManager.html":{}}}],["loadrootgeometry(jsroot",{"_index":2426,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootjsongeometry",{"_index":2417,"title":{},"body":{"interfaces/Window.html":{}}}],["loads",{"_index":894,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadsceneconfiguration(sceneconfiguration",{"_index":2445,"title":{},"body":{"interfaces/Window.html":{}}}],["loadscript",{"_index":1859,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadscript(scripturl",{"_index":1865,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadstatefromfile",{"_index":2082,"title":{},"body":{"classes/StateManager.html":{}}}],["loadstatefromfile(onfileread",{"_index":2090,"title":{},"body":{"classes/StateManager.html":{}}}],["loadstatefromjson",{"_index":1353,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["loadstatefromjson(json",{"_index":1390,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["local",{"_index":348,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["locationhref",{"_index":2505,"title":{},"body":{"interfaces/Window.html":{}}}],["log",{"_index":1021,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["logger",{"_index":659,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["logger.ts",{"_index":1005,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["logger.ts:16",{"_index":1019,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:27",{"_index":1022,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:7",{"_index":1010,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:9",{"_index":1012,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logging",{"_index":660,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["logs",{"_index":1011,"title":{},"body":{"classes/InfoLogger.html":{},"interfaces/Window.html":{}}}],["long",{"_index":1673,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["look",{"_index":2491,"title":{},"body":{"interfaces/Window.html":{}}}],["lookatobject(uuid",{"_index":2492,"title":{},"body":{"interfaces/Window.html":{}}}],["loop",{"_index":1815,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["ls",{"_index":1310,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["lumiblock",{"_index":1312,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["made",{"_index":1400,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["main",{"_index":566,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["mainrenderer",{"_index":1744,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.domelement.id",{"_index":1829,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.setpixelratio(window.devicepixelratio",{"_index":1828,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.setsize",{"_index":1826,"title":{},"body":{"classes/RendererManager.html":{}}}],["major",{"_index":2584,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":272,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["making",{"_index":270,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager",{"_index":9,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["manager.ts",{"_index":7,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"coverage.html":{}}}],["manager.ts:10",{"_index":1766,"title":{},"body":{"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:102",{"_index":1136,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:106",{"_index":1980,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:108",{"_index":712,"title":{},"body":{"classes/ExportManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:109",{"_index":1143,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:11",{"_index":1122,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:114",{"_index":75,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:115",{"_index":1962,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:116",{"_index":1778,"title":{},"body":{"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:117",{"_index":2093,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:118",{"_index":926,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:12",{"_index":572,"title":{},"body":{"classes/EffectsManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:124",{"_index":1779,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:129",{"_index":1959,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:132",{"_index":1780,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:136",{"_index":2227,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:14",{"_index":570,"title":{},"body":{"classes/EffectsManager.html":{},"classes/ImportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:143",{"_index":1771,"title":{},"body":{"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:144",{"_index":1952,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:151",{"_index":2098,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:153",{"_index":1790,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:155",{"_index":1947,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:159",{"_index":2096,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:16",{"_index":579,"title":{},"body":{"classes/EffectsManager.html":{},"classes/ImportManager.html":{},"classes/LoadingManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:160",{"_index":914,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:165",{"_index":1807,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:167",{"_index":2102,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:177",{"_index":1774,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:18",{"_index":575,"title":{},"body":{"classes/EffectsManager.html":{},"classes/ImportManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:188",{"_index":893,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:19",{"_index":1119,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:190",{"_index":1796,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:191",{"_index":1950,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:20",{"_index":567,"title":{},"body":{"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:200",{"_index":1777,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:201",{"_index":2230,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:202",{"_index":1974,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:210",{"_index":1788,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:214",{"_index":901,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:218",{"_index":1794,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:22",{"_index":1957,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:225",{"_index":1966,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:23",{"_index":561,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:24",{"_index":1958,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:249",{"_index":919,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:26",{"_index":1937,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:265",{"_index":81,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:29",{"_index":2212,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:31",{"_index":2215,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:32",{"_index":1783,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:33",{"_index":125,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:335",{"_index":112,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:35",{"_index":2217,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:36",{"_index":1128,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:37",{"_index":2089,"title":{},"body":{"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:38",{"_index":2219,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:385",{"_index":104,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:40",{"_index":1942,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:424",{"_index":89,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:43",{"_index":909,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:434",{"_index":56,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:44",{"_index":1138,"title":{},"body":{"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:444",{"_index":132,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:45",{"_index":2104,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:46",{"_index":1941,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:48",{"_index":589,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:49",{"_index":1945,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:51",{"_index":1931,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:54",{"_index":720,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:55",{"_index":92,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:6",{"_index":1121,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:60",{"_index":1140,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:61",{"_index":587,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:62",{"_index":1786,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:65",{"_index":716,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:67",{"_index":2094,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:69",{"_index":580,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:72",{"_index":2221,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:73",{"_index":1972,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:74",{"_index":917,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:78",{"_index":1130,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:8",{"_index":697,"title":{},"body":{"classes/ExportManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:82",{"_index":2220,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:84",{"_index":718,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:85",{"_index":1798,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:86",{"_index":591,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:87",{"_index":1133,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:9",{"_index":37,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LoadingManager.html":{}}}],["manager.ts:90",{"_index":1978,"title":{},"body":{"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:93",{"_index":1801,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:95",{"_index":594,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:97",{"_index":922,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:98",{"_index":1963,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:99",{"_index":724,"title":{},"body":{"classes/ExportManager.html":{}}}],["managers/loading",{"_index":935,"title":{},"body":{"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["managers/state",{"_index":2325,"title":{},"body":{"interfaces/Window.html":{}}}],["manages",{"_index":562,"title":{},"body":{"classes/EffectsManager.html":{}}}],["managing",{"_index":10,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["manipulate",{"_index":657,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["manual",{"_index":1430,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["manually",{"_index":245,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["many",{"_index":2185,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["matching",{"_index":390,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":335,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["material.opacity",{"_index":1549,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["material2",{"_index":954,"title":{},"body":{"classes/ImportManager.html":{}}}],["math.abs(1",{"_index":1683,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["math.abs(returnvec.x",{"_index":834,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.y",{"_index":835,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.z",{"_index":836,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.atan(math.pow(math.e",{"_index":1586,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.cos(clusterparams.phi",{"_index":1589,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.cos(phi",{"_index":1535,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.cos(theta",{"_index":1539,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.max(math.min(pos.z",{"_index":1595,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.pi",{"_index":187,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["math.pow(fh",{"_index":847,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.round(p",{"_index":1722,"title":{},"body":{"classes/RKHelper.html":{}}}],["math.sign(1",{"_index":1686,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["math.sin(clusterparams.phi",{"_index":1591,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sin(phi",{"_index":1533,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.sin(theta",{"_index":1537,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.sqrt(pos.x",{"_index":1523,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["max",{"_index":858,"title":{},"body":{"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["maxentries",{"_index":1007,"title":{},"body":{"classes/InfoLogger.html":{}}}],["maximum",{"_index":532,"title":{},"body":{"classes/Cut.html":{}}}],["maxr",{"_index":1575,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["maxstepsize",{"_index":2062,"title":{},"body":{"classes/State.html":{}}}],["maxvalue",{"_index":523,"title":{},"body":{"classes/Cut.html":{}}}],["maxz",{"_index":1578,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["menu",{"_index":497,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["menu/phoenix",{"_index":512,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"coverage.html":{}}}],["menunodename",{"_index":2385,"title":{},"body":{"interfaces/Window.html":{}}}],["menus",{"_index":656,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["mesh",{"_index":145,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{}}}],["mesh(boxbuffer",{"_index":450,"title":{},"body":{"classes/CMSObjects.html":{}}}],["mesh(geometry",{"_index":1550,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh(particlegeometry",{"_index":359,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["mesh.name",{"_index":1554,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.position.copy(translation",{"_index":1551,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.quaternion.copy(quaternion",{"_index":1552,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.userdata",{"_index":1553,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.uuid",{"_index":1556,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["meshbasicmaterial",{"_index":144,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["meshphongmaterial",{"_index":928,"title":{},"body":{"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{}}}],["meshtoonmaterial",{"_index":1507,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["meta",{"_index":1307,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["metadata",{"_index":675,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["metadata.push",{"_index":1334,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["methods",{"_index":18,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["mev",{"_index":1714,"title":{},"body":{"classes/RKHelper.html":{}}}],["min",{"_index":1207,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["minimum",{"_index":530,"title":{},"body":{"classes/Cut.html":{}}}],["minvalue",{"_index":524,"title":{},"body":{"classes/Cut.html":{}}}],["miscellaneous",{"_index":2674,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mm",{"_index":1713,"title":{},"body":{"classes/RKHelper.html":{}}}],["mock",{"_index":2127,"title":{},"body":{"classes/StateManager.html":{}}}],["mode",{"_index":1954,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["modular",{"_index":2651,"title":{},"body":{"index.html":{}}}],["modules",{"_index":2672,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mom",{"_index":1648,"title":{},"body":{"classes/PrettySymbols.html":{},"changelog.html":{}}}],["momentum",{"_index":790,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["more",{"_index":1075,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["mouse",{"_index":1948,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.x",{"_index":2047,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.y",{"_index":2050,"title":{},"body":{"classes/SelectionManager.html":{}}}],["move",{"_index":171,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RKHelper.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["moveindirection",{"_index":2209,"title":{},"body":{"classes/VRManager.html":{}}}],["moveindirection(direction",{"_index":2228,"title":{},"body":{"classes/VRManager.html":{}}}],["movement",{"_index":2214,"title":{},"body":{"classes/VRManager.html":{}}}],["moving",{"_index":254,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["mss",{"_index":857,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multidimensional",{"_index":135,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["multiple",{"_index":682,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["multiplyscalar(updatedscale.x",{"_index":258,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["muon",{"_index":405,"title":{},"body":{"classes/CMSObjects.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["muonchamber",{"_index":457,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(boxobject",{"_index":466,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(lineboxobject",{"_index":467,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams",{"_index":408,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams.uuid",{"_index":468,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchambers",{"_index":2681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["muonparams",{"_index":1086,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["muonparams.linkedclusters",{"_index":1276,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonparams.linkedtracks",{"_index":1290,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonparams.uuid",{"_index":1303,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muons",{"_index":1229,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene",{"_index":1273,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.add(cluster",{"_index":1287,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.add(track",{"_index":1300,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.name",{"_index":1305,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.uuid",{"_index":1304,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["name",{"_index":40,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["name('jets",{"_index":1202,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["name.split('>').foreach(nodename",{"_index":1480,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["named",{"_index":1125,"title":{},"body":{"classes/LoadingManager.html":{}}}],["names",{"_index":1081,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["naming",{"_index":1074,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["navigator",{"_index":2248,"title":{},"body":{"classes/VRManager.html":{}}}],["ndof",{"_index":1644,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["need",{"_index":247,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["needed",{"_index":1674,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["needs",{"_index":1577,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["new",{"_index":121,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["node",{"_index":504,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["node.ts",{"_index":1338,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"coverage.html":{}}}],["node.ts:10",{"_index":1367,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:104",{"_index":1374,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:117",{"_index":1396,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:12",{"_index":1369,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:129",{"_index":1377,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:14",{"_index":1360,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:149",{"_index":1389,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:16",{"_index":1362,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:170",{"_index":1391,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:18",{"_index":1365,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:20",{"_index":1368,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:212",{"_index":1382,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:227",{"_index":1387,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:23",{"_index":1361,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:25",{"_index":1358,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:6",{"_index":1364,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:62",{"_index":1372,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:75",{"_index":1394,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:8",{"_index":1363,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:84",{"_index":1392,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:95",{"_index":1401,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild",{"_index":1471,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.loadstatefromjson(childstate",{"_index":1477,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.name",{"_index":1473,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.nodelevel",{"_index":1475,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig",{"_index":1460,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.label",{"_index":1464,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.type",{"_index":1462,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig[prop",{"_index":1466,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodefound",{"_index":1483,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodejs.timeout",{"_index":2304,"title":{},"body":{"classes/VRManager.html":{}}}],["nodelevel",{"_index":1343,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodename",{"_index":1481,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodename.trim",{"_index":1482,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodes",{"_index":1397,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["none",{"_index":485,"title":{},"body":{"interfaces/Configuration.html":{},"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["normal",{"_index":577,"title":{},"body":{"classes/EffectsManager.html":{}}}],["normalblending",{"_index":597,"title":{},"body":{"classes/EffectsManager.html":{}}}],["notable",{"_index":2539,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":2238,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["nowdisplayingevent",{"_index":2331,"title":{},"body":{"interfaces/Window.html":{}}}],["npm",{"_index":2658,"title":{},"body":{"index.html":{}}}],["null",{"_index":351,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["number",{"_index":53,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["number'].includes(typeof",{"_index":2034,"title":{},"body":{"classes/SelectionManager.html":{}}}],["number,onend",{"_index":102,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["numofsteps",{"_index":183,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj",{"_index":708,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["obj.eventobject",{"_index":286,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.eventobject.name",{"_index":285,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.eventobject.visible",{"_index":299,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.obj",{"_index":735,"title":{},"body":{"classes/ExportManager.html":{}}}],["object",{"_index":130,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":455,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["object.assign(configoptions",{"_index":1422,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["object.keys(combinedprops).join",{"_index":1335,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(combinedprops).length",{"_index":1329,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(intersectedobject.userdata).map((key",{"_index":2032,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(muonchamberparams",{"_index":419,"title":{},"body":{"classes/CMSObjects.html":{}}}],["object.keys(object",{"_index":1271,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(paramscopy",{"_index":1668,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(prettyparams",{"_index":2027,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(prettysymbols.symbols",{"_index":1659,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(sceneconfiguration.eventdata",{"_index":2446,"title":{},"body":{"interfaces/Window.html":{}}}],["object.keys(this.eventdata",{"_index":1315,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(this.progressitems).length",{"_index":1161,"title":{},"body":{"classes/LoadingManager.html":{}}}],["object.keys(trackscollections",{"_index":1706,"title":{},"body":{"classes/RKHelper.html":{}}}],["object.name",{"_index":761,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{}}}],["object.userdata",{"_index":952,"title":{},"body":{"classes/ImportManager.html":{}}}],["object.uuid",{"_index":2061,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.values(combinedprops).join",{"_index":1336,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.values(this.progressitems",{"_index":1156,"title":{},"body":{"classes/LoadingManager.html":{}}}],["object3d",{"_index":148,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["object3d,eventdata",{"_index":913,"title":{},"body":{"classes/ImportManager.html":{}}}],["object3d.name",{"_index":964,"title":{},"body":{"classes/ImportManager.html":{}}}],["object3d.traverse((child",{"_index":961,"title":{},"body":{"classes/ImportManager.html":{}}}],["object3d.userdata",{"_index":966,"title":{},"body":{"classes/ImportManager.html":{}}}],["object[collectionname",{"_index":1245,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object[collectionname][0]?.color",{"_index":1251,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectcollection",{"_index":1058,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["objectcollection.length",{"_index":1247,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectcollection[0",{"_index":1256,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectgroup",{"_index":1055,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["objectgroup.add(collscene",{"_index":1265,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectgroup.name",{"_index":1270,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectloader",{"_index":929,"title":{},"body":{"classes/ImportManager.html":{}}}],["objectname",{"_index":2425,"title":{},"body":{"interfaces/Window.html":{}}}],["objectparams",{"_index":1262,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objects",{"_index":44,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["objects.ts",{"_index":394,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["objects.ts:108",{"_index":1498,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:14",{"_index":403,"title":{},"body":{"classes/CMSObjects.html":{}}}],["objects.ts:156",{"_index":1495,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:16",{"_index":1501,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:200",{"_index":1493,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:235",{"_index":1503,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects/phoenix",{"_index":1188,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectsgroup",{"_index":1965,"title":{},"body":{"classes/SelectionManager.html":{}}}],["objectsgroup.traverse((object",{"_index":2060,"title":{},"body":{"classes/SelectionManager.html":{}}}],["objectstoanimatewithsphere",{"_index":204,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objectstoanimatewithsphere.foreach((obj",{"_index":284,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objectstoanimatewithsphere.push",{"_index":278,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objecttype",{"_index":753,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["objecttype.children",{"_index":757,"title":{},"body":{"classes/ExportManager.html":{}}}],["objecttype.name",{"_index":755,"title":{},"body":{"classes/ExportManager.html":{}}}],["objexporter",{"_index":727,"title":{},"body":{"classes/ExportManager.html":{}}}],["objloader",{"_index":931,"title":{},"body":{"classes/ImportManager.html":{}}}],["objloader.load(filename",{"_index":943,"title":{},"body":{"classes/ImportManager.html":{}}}],["objloader.parse(geometry",{"_index":949,"title":{},"body":{"classes/ImportManager.html":{}}}],["observable",{"_index":1939,"title":{},"body":{"classes/SelectionManager.html":{}}}],["olddrawrangecount",{"_index":230,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["onanimationend",{"_index":91,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["onanimationsphereupdate",{"_index":282,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["onanimationsphereupdate(new",{"_index":316,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["onanimationstart",{"_index":74,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["once",{"_index":274,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ScriptLoader.html":{}}}],["onchange",{"_index":1209,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["onclick",{"_index":2109,"title":{},"body":{"classes/StateManager.html":{}}}],["oncontrollerselectend",{"_index":2197,"title":{},"body":{"classes/VRManager.html":{}}}],["oncontrollerselectstart",{"_index":2198,"title":{},"body":{"classes/VRManager.html":{}}}],["ondisplayedeventchange",{"_index":2330,"title":{},"body":{"interfaces/Window.html":{}}}],["ondocumentmousedown",{"_index":1919,"title":{},"body":{"classes/SelectionManager.html":{}}}],["one",{"_index":645,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["onend",{"_index":54,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["oneventschange",{"_index":2329,"title":{},"body":{"interfaces/Window.html":{}}}],["onfileread",{"_index":2091,"title":{},"body":{"classes/StateManager.html":{}}}],["onfileread?.(jsondata",{"_index":2141,"title":{},"body":{"classes/StateManager.html":{}}}],["onloadcallbacks",{"_index":1109,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onprogress",{"_index":1118,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onprogress(itemname",{"_index":1139,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onprogresscallbacks",{"_index":1110,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onscriptsloaded",{"_index":1864,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["onscriptsloaded(jsroot",{"_index":1892,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["onsessionended",{"_index":2199,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["onsessionstarted",{"_index":2234,"title":{},"body":{"classes/VRManager.html":{}}}],["ontoggle",{"_index":1344,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["ontouchdown",{"_index":1920,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ontouchmove",{"_index":1921,"title":{},"body":{"classes/SelectionManager.html":{}}}],["onupdate",{"_index":1935,"title":{},"body":{"classes/SelectionManager.html":{}}}],["onvrsessionended",{"_index":2200,"title":{},"body":{"classes/VRManager.html":{}}}],["onvrsessionstarted",{"_index":2201,"title":{},"body":{"classes/VRManager.html":{}}}],["opacity",{"_index":357,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["operations",{"_index":13,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["option",{"_index":2579,"title":{},"body":{"changelog.html":{}}}],["optional",{"_index":42,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["optionalfeatures",{"_index":2251,"title":{},"body":{"classes/VRManager.html":{}}}],["options",{"_index":1076,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/TrackmlLoader.html":{},"index.html":{}}}],["origin",{"_index":87,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["original",{"_index":253,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PrettySymbols.html":{}}}],["out",{"_index":238,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["outdated",{"_index":2240,"title":{},"body":{"classes/VRManager.html":{}}}],["outline",{"_index":546,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["outlinepass",{"_index":585,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["outlinepass.overlaymaterial.blending",{"_index":619,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xdf5330",{"_index":621,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xffff66",{"_index":620,"title":{},"body":{"classes/EffectsManager.html":{}}}],["output",{"_index":742,"title":{},"body":{"classes/ExportManager.html":{}}}],["over",{"_index":208,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["overlay",{"_index":1764,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["overlaycanvas",{"_index":1802,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["overlayed",{"_index":2472,"title":{},"body":{"interfaces/Window.html":{}}}],["overlayrenderer",{"_index":1745,"title":{},"body":{"classes/RendererManager.html":{}}}],["overview",{"_index":2673,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":1664,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["p",{"_index":791,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["package",{"_index":2598,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["panel",{"_index":1016,"title":{},"body":{"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["param",{"_index":156,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["param.startswith('back",{"_index":423,"title":{},"body":{"classes/CMSObjects.html":{}}}],["param.startswith('front",{"_index":420,"title":{},"body":{"classes/CMSObjects.html":{}}}],["parameter",{"_index":1657,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parameters",{"_index":38,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["parameterss",{"_index":1653,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramkey",{"_index":1667,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["params",{"_index":1059,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PrettySymbols.html":{},"classes/TrackmlLoader.html":{}}}],["paramscopy",{"_index":1665,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams",{"_index":1691,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[0",{"_index":1688,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[1",{"_index":1690,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[2",{"_index":1681,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[3",{"_index":1680,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[4",{"_index":1684,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy?.dparams",{"_index":1678,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy['pos",{"_index":1675,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[paramkey",{"_index":1671,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[symbol",{"_index":1670,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parent",{"_index":1345,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{}}}],["parentelement",{"_index":1867,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parentelement.appendchild(scriptelement",{"_index":1909,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parse",{"_index":738,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["parsegltfgeometry",{"_index":884,"title":{},"body":{"classes/ImportManager.html":{}}}],["parsegltfgeometry(geometry",{"_index":912,"title":{},"body":{"classes/ImportManager.html":{}}}],["parsegltfgeometry(input",{"_index":2411,"title":{},"body":{"interfaces/Window.html":{}}}],["parseobjgeometry",{"_index":885,"title":{},"body":{"classes/ImportManager.html":{}}}],["parseobjgeometry(content",{"_index":2393,"title":{},"body":{"interfaces/Window.html":{}}}],["parseobjgeometry(geometry",{"_index":916,"title":{},"body":{"classes/ImportManager.html":{}}}],["parsephoenixdisplay(input",{"_index":2401,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixevents(eventsdata",{"_index":2363,"title":{},"body":{"interfaces/Window.html":{}}}],["parses",{"_index":915,"title":{},"body":{"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["part",{"_index":398,"title":{},"body":{"classes/CMSObjects.html":{}}}],["part_list",{"_index":1103,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["particle",{"_index":62,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["particle1",{"_index":358,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle1.clone",{"_index":361,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle1.position.setz(distancefromorigin",{"_index":362,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle2",{"_index":360,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle2.position.setz",{"_index":363,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particlecolor",{"_index":110,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particledata",{"_index":2160,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["particlegeometry",{"_index":352,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particlematerial",{"_index":355,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particles",{"_index":114,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/TrackmlLoader.html":{}}}],["particlesize",{"_index":108,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletoorigin",{"_index":368,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens",{"_index":365,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens.push(particletoorigin",{"_index":371,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens[0].oncomplete",{"_index":372,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["pass",{"_index":547,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["passed",{"_index":864,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["passes",{"_index":563,"title":{},"body":{"classes/EffectsManager.html":{}}}],["passindex",{"_index":623,"title":{},"body":{"classes/EffectsManager.html":{}}}],["path",{"_index":860,"title":{},"body":{"classes/Field.html":{},"classes/ImportManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["pathlength",{"_index":2063,"title":{},"body":{"classes/State.html":{}}}],["pdata_list",{"_index":1104,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["perform",{"_index":783,"title":{},"body":{"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{}}}],["performance",{"_index":1953,"title":{},"body":{"classes/SelectionManager.html":{}}}],["performed",{"_index":785,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["performing",{"_index":779,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["phi",{"_index":1639,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["phnx",{"_index":2400,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenix",{"_index":505,"title":{},"body":{"interfaces/Configuration.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["phoenixloader",{"_index":1031,"title":{"classes/PhoenixLoader.html":{}},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{},"index.html":{}}}],["phoenixloader:100",{"_index":1079,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:121",{"_index":1092,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:17",{"_index":1044,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:19",{"_index":1047,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:21",{"_index":1043,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:220",{"_index":1071,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:23",{"_index":1046,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:258",{"_index":1056,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:280",{"_index":1089,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:297",{"_index":1085,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:338",{"_index":1082,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:40",{"_index":1078,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:63",{"_index":1083,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:79",{"_index":1080,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixmenu",{"_index":2113,"title":{},"body":{"classes/StateManager.html":{}}}],["phoenixmenunode",{"_index":502,"title":{"classes/PhoenixMenuNode.html":{}},"body":{"interfaces/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["phoenixmenunode(name",{"_index":1408,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixmenuroot",{"_index":481,"title":{},"body":{"interfaces/Configuration.html":{},"classes/StateManager.html":{}}}],["phoenixnodejson",{"_index":1444,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['children",{"_index":1451,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['children'].push(child.getnodestate",{"_index":1452,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['childrenactive",{"_index":1448,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['configs",{"_index":1450,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['name",{"_index":1445,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['nodelevel",{"_index":1446,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['togglestate",{"_index":1447,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixobjects",{"_index":399,"title":{"classes/PhoenixObjects.html":{}},"body":{"classes/CMSObjects.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["phoenixobjects.getcluster",{"_index":1223,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getcluster(clusterparams",{"_index":1286,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getelectrons",{"_index":1234,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.gethits",{"_index":1216,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getjet",{"_index":1211,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getphotons",{"_index":1232,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.gettrack(trackparams",{"_index":1299,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getvertex",{"_index":1238,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixscene",{"_index":2402,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.scene",{"_index":2405,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.sceneconfiguration",{"_index":2404,"title":{},"body":{"interfaces/Window.html":{}}}],["physics",{"_index":395,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["pi",{"_index":1219,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["pipe",{"_index":2558,"title":{},"body":{"changelog.html":{}}}],["plane",{"_index":151,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{}}}],["plane(vertice",{"_index":327,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["planes",{"_index":61,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["plength",{"_index":859,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["point",{"_index":807,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pointpos",{"_index":1561,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointpos[i",{"_index":1563,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["points",{"_index":1512,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["points(geometry",{"_index":1570,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsmaterial",{"_index":1511,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj",{"_index":1569,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj.name",{"_index":1572,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj.userdata",{"_index":1571,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj.uuid",{"_index":1574,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos",{"_index":127,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos.x",{"_index":1524,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos.y",{"_index":1525,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos1",{"_index":819,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos2",{"_index":826,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos[0",{"_index":165,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["pos[1",{"_index":167,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["pos[2",{"_index":168,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["position",{"_index":96,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["positions",{"_index":133,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["positions.concat(extrapolatedpos",{"_index":1741,"title":{},"body":{"classes/RKHelper.html":{}}}],["positions.length",{"_index":1522,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["positions.length==0",{"_index":1518,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["positions.push([startpos.x",{"_index":1733,"title":{},"body":{"classes/RKHelper.html":{}}}],["positive",{"_index":2562,"title":{},"body":{"changelog.html":{}}}],["possible",{"_index":1321,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["possibly",{"_index":1195,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["post",{"_index":1987,"title":{},"body":{"classes/SelectionManager.html":{}}}],["postion",{"_index":1214,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["preselectionantialias",{"_index":1922,"title":{},"body":{"classes/SelectionManager.html":{}}}],["presenting",{"_index":2655,"title":{},"body":{"index.html":{}}}],["preset",{"_index":507,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["presetview",{"_index":506,"title":{"classes/PresetView.html":{}},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"coverage.html":{}}}],["presetviews",{"_index":482,"title":{},"body":{"interfaces/Configuration.html":{}}}],["pretty",{"_index":1634,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams",{"_index":1679,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['d0",{"_index":1687,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['q",{"_index":1685,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['z0",{"_index":1689,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['|p",{"_index":1682,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettyparams",{"_index":2025,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettyparams[key",{"_index":2031,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbol",{"_index":1658,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols",{"_index":1631,"title":{"classes/PrettySymbols.html":{}},"body":{"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["prettysymbols.getprettyparams(intersectedobject.userdata",{"_index":2026,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbols.getprettysymbol(paramkey",{"_index":1669,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols.symbols[symbol].includes(param",{"_index":1661,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["previous",{"_index":329,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["previousscale",{"_index":250,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["prevlocalclipping",{"_index":331,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["prevnode",{"_index":1479,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.addchild(nodename",{"_index":1485,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.findintree(nodename",{"_index":1484,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["print",{"_index":1676,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["printed",{"_index":1652,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["private",{"_index":28,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["probably",{"_index":1724,"title":{},"body":{"classes/RKHelper.html":{}}}],["process",{"_index":404,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["process(data",{"_index":1051,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["processed",{"_index":903,"title":{},"body":{"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["processes",{"_index":2443,"title":{},"body":{"interfaces/Window.html":{}}}],["processgeometry",{"_index":886,"title":{},"body":{"classes/ImportManager.html":{}}}],["processgeometry(geometry",{"_index":918,"title":{},"body":{"classes/ImportManager.html":{}}}],["processhits",{"_index":2162,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processhits(hits",{"_index":2174,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processing",{"_index":500,"title":{},"body":{"interfaces/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"index.html":{}}}],["processobj",{"_index":887,"title":{},"body":{"classes/ImportManager.html":{}}}],["processobj(object",{"_index":921,"title":{},"body":{"classes/ImportManager.html":{}}}],["processparticles",{"_index":2163,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processparticles(particles",{"_index":2177,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processtruth",{"_index":2164,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processtruth(truth",{"_index":2178,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["progress",{"_index":1124,"title":{},"body":{"classes/LoadingManager.html":{},"classes/VRManager.html":{}}}],["progresses",{"_index":1141,"title":{},"body":{"classes/LoadingManager.html":{}}}],["progressitems",{"_index":1111,"title":{},"body":{"classes/LoadingManager.html":{}}}],["project",{"_index":2540,"title":{},"body":{"changelog.html":{}}}],["promise",{"_index":898,"title":{},"body":{"classes/ImportManager.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["promise((resolve",{"_index":941,"title":{},"body":{"classes/ImportManager.html":{},"classes/ScriptLoader.html":{}}}],["prop",{"_index":1322,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{}}}],["propagate",{"_index":852,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["propagate(startpos",{"_index":1849,"title":{},"body":{"classes/RungeKutta.html":{}}}],["propagation",{"_index":58,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["propagator",{"_index":1699,"title":{},"body":{"classes/RKHelper.html":{}}}],["properties",{"_index":475,"title":{},"body":{"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["props",{"_index":1319,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{}}}],["props.join",{"_index":2039,"title":{},"body":{"classes/SelectionManager.html":{}}}],["props.length",{"_index":2038,"title":{},"body":{"classes/SelectionManager.html":{}}}],["protected",{"_index":1034,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["provided",{"_index":993,"title":{},"body":{"classes/ImportManager.html":{}}}],["pt",{"_index":1640,"title":{},"body":{"classes/PrettySymbols.html":{},"changelog.html":{}}}],["public",{"_index":19,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["pushing",{"_index":1331,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["q",{"_index":789,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["qop",{"_index":795,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["quaternion",{"_index":1509,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["quaternion.setfromunitvectors(v1",{"_index":1544,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["queryselectorall('script[src",{"_index":1897,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["radius",{"_index":181,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["range",{"_index":1597,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["rangeslider",{"_index":1440,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["ratio",{"_index":792,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["raycaster",{"_index":1981,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.intersectobjects(this.scene.children",{"_index":2055,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.params.line.threshold",{"_index":2054,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.setfromcamera(mouse",{"_index":2053,"title":{},"body":{"classes/SelectionManager.html":{}}}],["reachedhits",{"_index":290,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["reachedhits.length",{"_index":294,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["reaches",{"_index":275,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["react",{"_index":2671,"title":{},"body":{"index.html":{}}}],["read",{"_index":2092,"title":{},"body":{"classes/StateManager.html":{}}}],["reader",{"_index":2136,"title":{},"body":{"classes/StateManager.html":{}}}],["reader.onload",{"_index":2138,"title":{},"body":{"classes/StateManager.html":{}}}],["reader.readastext(configfile",{"_index":2144,"title":{},"body":{"classes/StateManager.html":{}}}],["readonly",{"_index":1636,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/VRManager.html":{}}}],["receives",{"_index":1093,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["reconstruct",{"_index":1094,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["reconstructing",{"_index":1063,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["recorded",{"_index":1313,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["recover",{"_index":703,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["reduce((acc",{"_index":1157,"title":{},"body":{"classes/LoadingManager.html":{}}}],["refactoring",{"_index":2585,"title":{},"body":{"changelog.html":{}}}],["reject",{"_index":942,"title":{},"body":{"classes/ImportManager.html":{},"classes/ScriptLoader.html":{}}}],["reject(error",{"_index":948,"title":{},"body":{"classes/ImportManager.html":{}}}],["related",{"_index":12,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["remaining",{"_index":314,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["remove",{"_index":349,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["removechild",{"_index":1354,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removechild(child",{"_index":1393,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removecontrols",{"_index":1756,"title":{},"body":{"classes/RendererManager.html":{}}}],["removecontrols(renderer",{"_index":1789,"title":{},"body":{"classes/RendererManager.html":{}}}],["removed",{"_index":592,"title":{},"body":{"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{}}}],["removepass",{"_index":557,"title":{},"body":{"classes/EffectsManager.html":{}}}],["removepass(pass",{"_index":590,"title":{},"body":{"classes/EffectsManager.html":{}}}],["render",{"_index":553,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["render(scene",{"_index":1792,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendered",{"_index":1803,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderer",{"_index":50,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["renderer.localclippingenabled",{"_index":1845,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderera",{"_index":1809,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererb",{"_index":1806,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererelement",{"_index":2045,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientheight",{"_index":2052,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientwidth",{"_index":2049,"title":{},"body":{"classes/SelectionManager.html":{}}}],["renderermanager",{"_index":35,"title":{"classes/RendererManager.html":{}},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"coverage.html":{}}}],["renderers",{"_index":1746,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendering",{"_index":576,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["renderoverlay(overlaycanvas",{"_index":2474,"title":{},"body":{"interfaces/Window.html":{}}}],["renderpass",{"_index":574,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renderpass(this.scene",{"_index":606,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renders",{"_index":904,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["replacing",{"_index":1192,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["representation",{"_index":2216,"title":{},"body":{"classes/VRManager.html":{}}}],["representing",{"_index":651,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["represents",{"_index":644,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["required",{"_index":2661,"title":{},"body":{"index.html":{}}}],["res.json",{"_index":2518,"title":{},"body":{"interfaces/Window.html":{},"index.html":{}}}],["res.text",{"_index":2525,"title":{},"body":{"interfaces/Window.html":{}}}],["reset",{"_index":525,"title":{},"body":{"classes/Cut.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{}}}],["resolve",{"_index":946,"title":{},"body":{"classes/ImportManager.html":{},"classes/ScriptLoader.html":{}}}],["resources",{"_index":891,"title":{},"body":{"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["responsible",{"_index":499,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/Window.html":{}}}],["restore",{"_index":313,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["restoring",{"_index":252,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["result",{"_index":389,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":391,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":666,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["return",{"_index":170,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["returns",{"_index":72,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["returnvec",{"_index":831,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["revert",{"_index":347,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["right",{"_index":444,"title":{},"body":{"classes/CMSObjects.html":{},"classes/RKHelper.html":{}}}],["rkhelper",{"_index":1514,"title":{"classes/RKHelper.html":{}},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"coverage.html":{}}}],["rkhelper.extrapolatetrackpositions(track",{"_index":1709,"title":{},"body":{"classes/RKHelper.html":{}}}],["rkhelper.extrapolatetrackpositions(trackparams",{"_index":1527,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["rkstate",{"_index":868,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.dir",{"_index":870,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.maxstepsize",{"_index":873,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.p",{"_index":871,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pathlength",{"_index":874,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pos",{"_index":869,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.q",{"_index":872,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["root",{"_index":503,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["rotate.chain(end",{"_index":194,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["rotationpositions",{"_index":189,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["routes",{"_index":2570,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":679,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["runge",{"_index":780,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rungekutta",{"_index":782,"title":{"classes/RungeKutta.html":{}},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["runnumber",{"_index":1101,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{}}}],["same",{"_index":1064,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["save",{"_index":328,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/StateManager.html":{},"changelog.html":{}}}],["save(blob",{"_index":709,"title":{},"body":{"classes/ExportManager.html":{}}}],["saved",{"_index":704,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["saveeventdataconfiguration",{"_index":693,"title":{},"body":{"classes/ExportManager.html":{}}}],["saveeventdataconfiguration(eventdata",{"_index":715,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration",{"_index":694,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration(geometries",{"_index":717,"title":{},"body":{"classes/ExportManager.html":{}}}],["saves",{"_index":2362,"title":{},"body":{"interfaces/Window.html":{}}}],["savesceneconfig",{"_index":695,"title":{},"body":{"classes/ExportManager.html":{}}}],["savesceneconfig(eventdata",{"_index":719,"title":{},"body":{"classes/ExportManager.html":{}}}],["savestateasjson",{"_index":2083,"title":{},"body":{"classes/StateManager.html":{}}}],["savestring",{"_index":696,"title":{},"body":{"classes/ExportManager.html":{}}}],["savestring(text",{"_index":723,"title":{},"body":{"classes/ExportManager.html":{}}}],["scale",{"_index":215,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["scaletween",{"_index":240,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scaletween.onupdate((updatedscale",{"_index":249,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scaling",{"_index":237,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scene",{"_index":32,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["scene's",{"_index":2078,"title":{},"body":{"classes/StateManager.html":{}}}],["scene.background",{"_index":1822,"title":{},"body":{"classes/RendererManager.html":{}}}],["scene.phnx",{"_index":748,"title":{},"body":{"classes/ExportManager.html":{}}}],["scene/geometry",{"_index":895,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["scenecolor",{"_index":1821,"title":{},"body":{"classes/RendererManager.html":{}}}],["sceneconfig",{"_index":736,"title":{},"body":{"classes/ExportManager.html":{}}}],["sceneconfiguration",{"_index":745,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["sceneconfiguration.eventdata[objecttype",{"_index":2448,"title":{},"body":{"interfaces/Window.html":{}}}],["sceneconfiguration.geometries",{"_index":2450,"title":{},"body":{"interfaces/Window.html":{}}}],["scenemanager",{"_index":140,"title":{},"body":{"classes/AnimationsManager.html":{},"coverage.html":{}}}],["scenestring",{"_index":975,"title":{},"body":{"classes/ImportManager.html":{}}}],["sceneurl",{"_index":896,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["screen",{"_index":2484,"title":{},"body":{"interfaces/Window.html":{}}}],["script",{"_index":1854,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement",{"_index":1899,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.addeventlistener('load",{"_index":1905,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.onerror",{"_index":1907,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.setattribute('data",{"_index":1904,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.src",{"_index":1903,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.type",{"_index":1901,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists",{"_index":1895,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists.length",{"_index":1898,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].addeventlistener('load",{"_index":1913,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].dataset.loaded",{"_index":1912,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptfor",{"_index":1866,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptloader",{"_index":1852,"title":{"classes/ScriptLoader.html":{}},"body":{"classes/ScriptLoader.html":{},"coverage.html":{}}}],["scriptloader.loadscript('assets/jsroot",{"_index":1891,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scripts",{"_index":1857,"title":{},"body":{"classes/ScriptLoader.html":{},"miscellaneous/variables.html":{}}}],["scripturl",{"_index":1869,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["second",{"_index":816,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["secondary",{"_index":1767,"title":{},"body":{"classes/RendererManager.html":{}}}],["see",{"_index":2542,"title":{},"body":{"changelog.html":{}}}],["selected",{"_index":1938,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selectedobject",{"_index":1923,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selecting",{"_index":1961,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selection",{"_index":1302,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{}}}],["selectionmanager",{"_index":1914,"title":{"classes/SelectionManager.html":{}},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["send",{"_index":2424,"title":{},"body":{"interfaces/Window.html":{}}}],["service",{"_index":1023,"title":{},"body":{"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"index.html":{}}}],["session",{"_index":2218,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["session.addeventlistener('end",{"_index":2261,"title":{},"body":{"classes/VRManager.html":{}}}],["session_type",{"_index":2202,"title":{},"body":{"classes/VRManager.html":{}}}],["sessioninit",{"_index":2250,"title":{},"body":{"classes/VRManager.html":{}}}],["set",{"_index":319,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["set/get",{"_index":1833,"title":{},"body":{"classes/RendererManager.html":{}}}],["setantialiasing",{"_index":558,"title":{},"body":{"classes/EffectsManager.html":{}}}],["setantialiasing(antialias",{"_index":593,"title":{},"body":{"classes/EffectsManager.html":{}}}],["setcamera",{"_index":2084,"title":{},"body":{"classes/StateManager.html":{}}}],["setcamera(camera",{"_index":2095,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingangle",{"_index":2085,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingangle(angle",{"_index":2097,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingenabled",{"_index":2086,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingenabled(clipping",{"_index":2100,"title":{},"body":{"classes/StateManager.html":{}}}],["seteventdisplay",{"_index":2087,"title":{},"body":{"classes/StateManager.html":{}}}],["seteventdisplay(eventdisplay",{"_index":2101,"title":{},"body":{"classes/StateManager.html":{}}}],["setfixoverlay",{"_index":1757,"title":{},"body":{"classes/RendererManager.html":{}}}],["setfixoverlay(value",{"_index":1793,"title":{},"body":{"classes/RendererManager.html":{}}}],["setflat",{"_index":908,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["setfromsphericalcoordinates",{"_index":1727,"title":{},"body":{"classes/RKHelper.html":{}}}],["setinterval",{"_index":2310,"title":{},"body":{"classes/VRManager.html":{}}}],["setlocalclippingenabled",{"_index":1758,"title":{},"body":{"classes/RendererManager.html":{}}}],["setlocalclippingenabled(value",{"_index":1795,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer",{"_index":1759,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer(renderer",{"_index":1797,"title":{},"body":{"classes/RendererManager.html":{}}}],["setobjflat",{"_index":888,"title":{},"body":{"classes/ImportManager.html":{}}}],["setobjflat(object3d",{"_index":925,"title":{},"body":{"classes/ImportManager.html":{}}}],["setoverlayrenderer",{"_index":1760,"title":{},"body":{"classes/RendererManager.html":{}}}],["setoverlayrenderer(overlaycanvas",{"_index":1799,"title":{},"body":{"classes/RendererManager.html":{}}}],["setphoenixmenuroot",{"_index":2088,"title":{},"body":{"classes/StateManager.html":{}}}],["setphoenixmenuroot(phoenixmenuroot",{"_index":2103,"title":{},"body":{"classes/StateManager.html":{}}}],["setrenderers",{"_index":1761,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderers(renderers",{"_index":1804,"title":{},"body":{"classes/RendererManager.html":{}}}],["sets",{"_index":2471,"title":{},"body":{"interfaces/Window.html":{}}}],["setselectedobject",{"_index":1929,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselectedobject(selectedobject",{"_index":1977,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting",{"_index":1930,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting(enable",{"_index":1979,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setting",{"_index":330,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{}}}],["settings",{"_index":2358,"title":{},"body":{"interfaces/Window.html":{}}}],["setupvrcontrols",{"_index":2210,"title":{},"body":{"classes/VRManager.html":{}}}],["setview",{"_index":1620,"title":{},"body":{"classes/PresetView.html":{}}}],["setvrsession",{"_index":2211,"title":{},"body":{"classes/VRManager.html":{}}}],["setvrsession(renderer",{"_index":2233,"title":{},"body":{"classes/VRManager.html":{}}}],["shaded",{"_index":911,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["shadows",{"_index":970,"title":{},"body":{"classes/ImportManager.html":{}}}],["shininess",{"_index":955,"title":{},"body":{"classes/ImportManager.html":{}}}],["show",{"_index":382,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["showing",{"_index":655,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["shown",{"_index":1014,"title":{},"body":{"classes/InfoLogger.html":{}}}],["si",{"_index":793,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["side",{"_index":453,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{}}}],["sides",{"_index":906,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["simple",{"_index":2660,"title":{},"body":{"index.html":{}}}],["single",{"_index":137,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{}}}],["singleton",{"_index":1120,"title":{},"body":{"classes/LoadingManager.html":{},"classes/StateManager.html":{}}}],["size",{"_index":116,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["sizemenu",{"_index":1197,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["sizemenu.onchange((value",{"_index":1203,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["slider",{"_index":1437,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["smaller",{"_index":2437,"title":{},"body":{"interfaces/Window.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["space",{"_index":854,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["specific",{"_index":1050,"title":{},"body":{"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["specified",{"_index":1618,"title":{},"body":{"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["specifying",{"_index":517,"title":{},"body":{"classes/Cut.html":{}}}],["sphere",{"_index":147,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["sphere(new",{"_index":203,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["sphere.name",{"_index":1611,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.x",{"_index":1605,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.y",{"_index":1607,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.z",{"_index":1609,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.userdata",{"_index":1610,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.uuid",{"_index":1613,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.vertices",{"_index":325,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spherebuffergeometry",{"_index":146,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["spherebuffergeometry(3",{"_index":1603,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["spherebuffergeometry(particlesize",{"_index":353,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spheregeometry",{"_index":150,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spheregeometry(1",{"_index":320,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spherical",{"_index":318,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["sphi",{"_index":1532,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["src/.../constants.ts",{"_index":2676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../script",{"_index":2677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/event",{"_index":626,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["src/extras/configuration.ts",{"_index":473,"title":{},"body":{"interfaces/Configuration.html":{},"coverage.html":{}}}],["src/extras/cut.model.ts",{"_index":516,"title":{},"body":{"classes/Cut.html":{},"coverage.html":{}}}],["src/extras/cut.model.ts:18",{"_index":534,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:19",{"_index":536,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:20",{"_index":535,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:21",{"_index":537,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:30",{"_index":538,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:6",{"_index":533,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:8",{"_index":527,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/preset",{"_index":1614,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{}}}],["src/helpers/constants.ts",{"_index":2609,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/pretty",{"_index":1632,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["src/helpers/rk",{"_index":1692,"title":{},"body":{"classes/RKHelper.html":{},"coverage.html":{}}}],["src/helpers/runge",{"_index":773,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["src/info",{"_index":1004,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["src/loaders/cms",{"_index":2614,"title":{},"body":{"coverage.html":{}}}],["src/loaders/jivexml",{"_index":2617,"title":{},"body":{"coverage.html":{}}}],["src/loaders/jsroot",{"_index":2619,"title":{},"body":{"coverage.html":{}}}],["src/loaders/lhcb",{"_index":1030,"title":{},"body":{"classes/LHCbLoader.html":{},"coverage.html":{}}}],["src/loaders/objects/cms",{"_index":393,"title":{},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["src/loaders/objects/phoenix",{"_index":1486,"title":{},"body":{"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["src/loaders/phoenix",{"_index":1171,"title":{},"body":{"classes/PhoenixLoader.html":{},"coverage.html":{}}}],["src/loaders/script",{"_index":1853,"title":{},"body":{"classes/ScriptLoader.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/loaders/trackml",{"_index":2157,"title":{},"body":{"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["src/managers/loading",{"_index":1107,"title":{},"body":{"classes/LoadingManager.html":{},"coverage.html":{}}}],["src/managers/state",{"_index":2077,"title":{},"body":{"classes/StateManager.html":{},"coverage.html":{}}}],["src/three/animations",{"_index":6,"title":{},"body":{"classes/AnimationsManager.html":{},"coverage.html":{}}}],["src/three/controls",{"_index":2628,"title":{},"body":{"coverage.html":{}}}],["src/three/effects",{"_index":544,"title":{},"body":{"classes/EffectsManager.html":{},"coverage.html":{}}}],["src/three/export",{"_index":690,"title":{},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["src/three/import",{"_index":876,"title":{},"body":{"classes/ImportManager.html":{},"coverage.html":{}}}],["src/three/index.ts",{"_index":2633,"title":{},"body":{"coverage.html":{}}}],["src/three/renderer",{"_index":1742,"title":{},"body":{"classes/RendererManager.html":{},"coverage.html":{}}}],["src/three/scene",{"_index":2635,"title":{},"body":{"coverage.html":{}}}],["src/three/selection",{"_index":1915,"title":{},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["src/three/vr",{"_index":2189,"title":{},"body":{"classes/VRManager.html":{},"coverage.html":{}}}],["src/ui/index.ts",{"_index":2639,"title":{},"body":{"coverage.html":{}}}],["src/ui/phoenix",{"_index":1337,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"coverage.html":{}}}],["start",{"_index":95,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["start.chain(startxaxis",{"_index":192,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["start.start",{"_index":196,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startclone.delay(500",{"_index":191,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startdir",{"_index":855,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["startdir.normalize",{"_index":1737,"title":{},"body":{"classes/RKHelper.html":{}}}],["started",{"_index":2222,"title":{"changelog.html":{},"index.html":{}},"body":{"classes/VRManager.html":{}}}],["starting",{"_index":608,"title":{},"body":{"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["startpos",{"_index":94,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["startpos.y",{"_index":1734,"title":{},"body":{"classes/RKHelper.html":{}}}],["startpos.z",{"_index":1735,"title":{},"body":{"classes/RKHelper.html":{}}}],["startpos[2",{"_index":178,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["starts",{"_index":78,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["startxaxis",{"_index":179,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startxaxis.chain(rotatestart",{"_index":193,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["state",{"_index":784,"title":{"classes/State.html":{}},"body":{"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["state.dir",{"_index":818,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.add(k1.clone().add(k2.clone().multiplyscalar(2)).add(k3.clone().multiplyscalar(2)).add(k4).multiplyscalar(fh",{"_index":850,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().add(k1.clone().multiplyscalar(half_h)).cross(b_middle).multiplyscalar(qop",{"_index":823,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().add(k2.clone().multiplyscalar(half_h)).cross(b_middle).multiplyscalar(qop",{"_index":825,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().add(k3.clone().multiplyscalar(h)).cross(b_last).multiplyscalar(qop",{"_index":830,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().cross(b_first).multiplyscalar(qop",{"_index":812,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.cross(b_first",{"_index":810,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.normalize",{"_index":851,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.p",{"_index":798,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos",{"_index":817,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos.add(state.dir.clone().multiplyscalar(fh)).add(k1.clone().add(k2).add(k3).multiplyscalar(fh2",{"_index":849,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos.clone().add(state.dir.clone().multiplyscalar(h)).add(k3.clone().multiplyscalar(h2",{"_index":827,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos.clone().add(state.dir.clone().multiplyscalar(half_h)).add(k1.clone().multiplyscalar(h2",{"_index":820,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.q",{"_index":796,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.stepsize",{"_index":843,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.unitc",{"_index":797,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["statemanager",{"_index":2076,"title":{"classes/StateManager.html":{}},"body":{"classes/StateManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["statemanager().seteventdisplay(this",{"_index":2344,"title":{},"body":{"interfaces/Window.html":{}}}],["statemanager.instance",{"_index":2105,"title":{},"body":{"classes/StateManager.html":{}}}],["statemanager.loadstatefromjson(jsonstate",{"_index":2520,"title":{},"body":{"interfaces/Window.html":{}}}],["statements",{"_index":2602,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":400,"title":{},"body":{"classes/CMSObjects.html":{},"classes/Field.html":{},"classes/LoadingManager.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["stats",{"_index":2647,"title":{},"body":{"dependencies.html":{}}}],["step",{"_index":188,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["step(state",{"_index":787,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepdistance",{"_index":2229,"title":{},"body":{"classes/VRManager.html":{}}}],["steps",{"_index":853,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepsize",{"_index":2064,"title":{},"body":{"classes/State.html":{}}}],["stheta",{"_index":1536,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["still",{"_index":2242,"title":{},"body":{"classes/VRManager.html":{}}}],["stop",{"_index":2313,"title":{},"body":{"classes/VRManager.html":{}}}],["store",{"_index":2176,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["stored",{"_index":670,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["storing",{"_index":2332,"title":{},"body":{"interfaces/Window.html":{}}}],["string",{"_index":489,"title":{},"body":{"interfaces/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["strings",{"_index":672,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["structured",{"_index":2171,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["super",{"_index":1096,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["svg",{"_index":1630,"title":{},"body":{"classes/PresetView.html":{}}}],["swap",{"_index":1808,"title":{},"body":{"classes/RendererManager.html":{}}}],["swapped",{"_index":1810,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers",{"_index":1762,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers(renderera",{"_index":1805,"title":{},"body":{"classes/RendererManager.html":{}}}],["switching",{"_index":509,"title":{},"body":{"interfaces/Configuration.html":{}}}],["symbol",{"_index":1656,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols",{"_index":1635,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{}}}],["symbols.ts",{"_index":1633,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["symbols.ts:26",{"_index":1655,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:38",{"_index":1651,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:8",{"_index":1649,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["synchronously",{"_index":1863,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["table",{"_index":2641,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2640,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":1873,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["take",{"_index":1558,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{}}}],["takes",{"_index":643,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["temp",{"_index":1844,"title":{},"body":{"classes/RendererManager.html":{}}}],["tempanchor",{"_index":2121,"title":{},"body":{"classes/StateManager.html":{}}}],["tempanchor.click",{"_index":2125,"title":{},"body":{"classes/StateManager.html":{}}}],["tempanchor.download",{"_index":2123,"title":{},"body":{"classes/StateManager.html":{}}}],["tempanchor.href",{"_index":2122,"title":{},"body":{"classes/StateManager.html":{}}}],["tempanchor.remove",{"_index":2126,"title":{},"body":{"classes/StateManager.html":{}}}],["temporary",{"_index":713,"title":{},"body":{"classes/ExportManager.html":{}}}],["tesla",{"_index":778,"title":{},"body":{"classes/Field.html":{}}}],["tests",{"_index":2560,"title":{},"body":{"changelog.html":{}}}],["text",{"_index":726,"title":{},"body":{"classes/ExportManager.html":{},"classes/SelectionManager.html":{}}}],["text/javascript",{"_index":1902,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["text/plain",{"_index":765,"title":{},"body":{"classes/ExportManager.html":{}}}],["then((res",{"_index":2526,"title":{},"body":{"interfaces/Window.html":{},"index.html":{}}}],["then((session",{"_index":2257,"title":{},"body":{"classes/VRManager.html":{}}}],["then(jsonstate",{"_index":2519,"title":{},"body":{"interfaces/Window.html":{}}}],["then(res",{"_index":2517,"title":{},"body":{"interfaces/Window.html":{}}}],["theta",{"_index":1585,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["third",{"_index":824,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["this.activecamera",{"_index":2154,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activecamera.position",{"_index":163,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.activecamera.position.fromarray(jsondata['eventdisplay']?.['cameraposition",{"_index":2150,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activecamera.position.toarray",{"_index":2116,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activeobject",{"_index":1998,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.activeobject.update(intersectedobject.uuid",{"_index":2024,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.addcollection(objectcollection",{"_index":1249,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.caloclusters",{"_index":1222,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.hits",{"_index":1215,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.jets",{"_index":1210,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.muons",{"_index":1227,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.photons",{"_index":1231,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.vertices",{"_index":1237,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addrenderer(overlayrenderer",{"_index":1837,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.addrenderer(renderer",{"_index":1813,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.animateevent",{"_index":157,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateevent.bind(this",{"_index":158,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateeventwithclipping",{"_index":159,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateeventwithclipping.bind(this",{"_index":160,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animatewithcollision(this.animateevent",{"_index":387,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animatewithcollision(this.animateeventwithclipping",{"_index":388,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.antialiasing",{"_index":610,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.antialiasrender",{"_index":611,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.applyconfigstate(nodeconfig",{"_index":1468,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.applyconfigstate(this.configs[configslength",{"_index":1425,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.buildeventdatafromjson(event",{"_index":2380,"title":{},"body":{"interfaces/Window.html":{}}}],["this.buildeventdatafromjson(eventdata",{"_index":2531,"title":{},"body":{"interfaces/Window.html":{}}}],["this.buildgeometryfromparameters(parameters",{"_index":2470,"title":{},"body":{"interfaces/Window.html":{}}}],["this.callbacks",{"_index":1933,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.callbacks.push(callback",{"_index":1936,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.camera",{"_index":603,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.cameragroup",{"_index":2270,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.add(this.vrcamera",{"_index":2278,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.addscaledvector(direction",{"_index":2320,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.copy(this.vrcamera.position",{"_index":2277,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.toarray().join",{"_index":2309,"title":{},"body":{"classes/VRManager.html":{}}}],["this.camerapos",{"_index":1628,"title":{},"body":{"classes/PresetView.html":{}}}],["this.children",{"_index":1405,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.filter(nodechild",{"_index":1472,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.indexof(child",{"_index":1414,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.push(child",{"_index":1412,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.splice(childindex",{"_index":1415,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.childrenactive",{"_index":1449,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.clippingangle",{"_index":2118,"title":{},"body":{"classes/StateManager.html":{}}}],["this.clippingenabled",{"_index":2117,"title":{},"body":{"classes/StateManager.html":{}}}],["this.clipplanes",{"_index":936,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.collideparticles(1500",{"_index":384,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.composer",{"_index":601,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(outlinepass",{"_index":622,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(this.defaultrenderpass",{"_index":607,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.indexof(pass",{"_index":624,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.splice(passindex",{"_index":625,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.render",{"_index":615,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.renderer.render(scene",{"_index":616,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.configs",{"_index":1406,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.find(nodeconfig",{"_index":1461,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.push(configoptions",{"_index":1424,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configuration",{"_index":2341,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader",{"_index":2527,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.buildeventdata(eventdata",{"_index":2375,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getcollection(collectionname",{"_index":2453,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getcollections",{"_index":2454,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.geteventmetadata",{"_index":2459,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.geteventslist(eventsdata",{"_index":2365,"title":{},"body":{"interfaces/Window.html":{}}}],["this.containsobject(renderer",{"_index":1840,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.controller.getworlddirection(direction",{"_index":2318,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1",{"_index":2280,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.add(line.clone",{"_index":2299,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.addeventlistener('selectend",{"_index":2316,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.addeventlistener('selectstart",{"_index":2315,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.position.toarray().join",{"_index":2307,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1?.removeeventlistener('selectend",{"_index":2268,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1?.removeeventlistener('selectstart",{"_index":2266,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller2",{"_index":2283,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller2.add(line.clone",{"_index":2300,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip1",{"_index":2287,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip1.add(controllermodelfactory.createcontrollermodel(this.controllergrip1",{"_index":2289,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip2",{"_index":2291,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip2.add(controllermodelfactory.createcontrollermodel(this.controllergrip2",{"_index":2293,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession",{"_index":2264,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession?.end",{"_index":2271,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession?.removeeventlistener('end",{"_index":2265,"title":{},"body":{"classes/VRManager.html":{}}}],["this.data",{"_index":1097,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.eventnumber",{"_index":1100,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.particles",{"_index":1105,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.runnumber",{"_index":1102,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.defaultmaxvalue",{"_index":540,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultminvalue",{"_index":539,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultrenderpass",{"_index":605,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.camera",{"_index":613,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.scene",{"_index":614,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.disableselecting",{"_index":2000,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager",{"_index":1994,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.addoutlinepassforselection",{"_index":1996,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.antialiasing",{"_index":2009,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.composer.renderer.domelement",{"_index":2046,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.setantialiasing(false",{"_index":2010,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.setantialiasing(this.preselectionantialias",{"_index":2015,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsrender",{"_index":612,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.enableeventdisplayconsole",{"_index":2350,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enablekeyboardcontrols",{"_index":2352,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enableselecting",{"_index":1999,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.event_data_id",{"_index":937,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.eventdata",{"_index":1191,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.caloclusters",{"_index":1281,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.caloclusters[clustercoll",{"_index":1282,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.caloclusters[clustercoll][clusterindex",{"_index":1284,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks",{"_index":1295,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks[trackcoll",{"_index":1296,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks[trackcoll][trackindex",{"_index":1298,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata[eventdatapropkey",{"_index":1326,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdisplay",{"_index":2155,"title":{},"body":{"classes/StateManager.html":{}}}],["this.eventdisplay.getuimanager().rotateclipping(jsondata['eventdisplay']['clippingangle",{"_index":2153,"title":{},"body":{"classes/StateManager.html":{}}}],["this.eventdisplay.getuimanager().setclipping(true",{"_index":2152,"title":{},"body":{"classes/StateManager.html":{}}}],["this.eventsdata",{"_index":2364,"title":{},"body":{"interfaces/Window.html":{}}}],["this.eventsdata[eventkey",{"_index":2379,"title":{},"body":{"interfaces/Window.html":{}}}],["this.fixedoverlay",{"_index":1848,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.geometries_id",{"_index":938,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.getcameragroup().add(this.controller1",{"_index":2282,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controller2",{"_index":2285,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controllergrip1",{"_index":2290,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controllergrip2",{"_index":2294,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameratween(alongaxisposition",{"_index":180,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.getcameratween(startpos",{"_index":172,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.gethitspositions(obj.position",{"_index":289,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.getinfologger().add('could",{"_index":2534,"title":{},"body":{"interfaces/Window.html":{}}}],["this.getmainrenderer",{"_index":1825,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().setanimationloop(null",{"_index":1816,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmuon",{"_index":1228,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.getobjecttypecollections(object",{"_index":1244,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.getoverlayrenderer",{"_index":1819,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().domelement.hidden",{"_index":1820,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().render(scene",{"_index":1824,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.graphicslibrary",{"_index":1189,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.graphicslibrary.addeventdatatypegroup(typename",{"_index":1242,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.graphicslibrary.addgeometryfromparameters(parameters",{"_index":2432,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animateclippingwithcollision(tweenduration",{"_index":2499,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animateeventwithcollision(tweenduration",{"_index":2498,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.cleareventdata",{"_index":2374,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enablekeyboardcontrols",{"_index":2497,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enableselecting(enable",{"_index":2486,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.endvrsession",{"_index":2360,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportphoenixscene",{"_index":2410,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportscenetoobj",{"_index":2398,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.fixoverlayview(fixed",{"_index":2489,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.getactiveobjectid",{"_index":2490,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.getscenemanager().scalejets(value",{"_index":1204,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.graphicslibrary.highlightobject(uuid",{"_index":2494,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.init(configuration",{"_index":2342,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.initvrsession(onsessionended",{"_index":2357,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadgltfgeometry(url",{"_index":2414,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadjsongeometry(json",{"_index":2416,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadobjgeometry(filename",{"_index":2391,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.lookatobject(uuid",{"_index":2493,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsegltfgeometry(phoenixscene.scene",{"_index":2408,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsegltfgeometry(scene",{"_index":2412,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parseobjgeometry(content",{"_index":2395,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setanimationloop(uiloop",{"_index":2347,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setoverlayrenderer(overlaycanvas",{"_index":2475,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setselectedobjectdisplay(selectedobject",{"_index":2479,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.zoomto(zoomfactor",{"_index":2442,"title":{},"body":{"interfaces/Window.html":{}}}],["this.hitdata",{"_index":2180,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.icon",{"_index":1403,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.ignorelist",{"_index":1989,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ignorelist.includes(intersectedobject.type",{"_index":2018,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger",{"_index":1993,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["this.infologger.add('exported",{"_index":2399,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologger.add(log",{"_index":2040,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger.add(name",{"_index":2390,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologgerlist",{"_index":1028,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.length",{"_index":1024,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.pop",{"_index":1026,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.unshift(label",{"_index":1027,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.init(configuration",{"_index":2339,"title":{},"body":{"interfaces/Window.html":{}}}],["this.initeventfromurl",{"_index":2353,"title":{},"body":{"interfaces/Window.html":{}}}],["this.initrenderer(elementid",{"_index":1818,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.intersectobject(event",{"_index":2017,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.isfixedoverlay",{"_index":1823,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.isinit",{"_index":1988,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.loaded",{"_index":1168,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.length",{"_index":1149,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.push(id",{"_index":1147,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.sort().join",{"_index":1151,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loadevent(eventkeys[0",{"_index":2366,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadgltfgeometry(sceneurl",{"_index":2465,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager",{"_index":939,"title":{},"body":{"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem('root_json_geom",{"_index":2418,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem('url_config",{"_index":2515,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem('url_event",{"_index":2523,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`gltf_geom_${name",{"_index":2413,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`json_geom_${name",{"_index":2415,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`obj_geom_${name",{"_index":2388,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_gltf_${name",{"_index":2407,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_obj_${name",{"_index":2394,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded('root_json_geom",{"_index":2423,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded('url_config",{"_index":2522,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded('url_event",{"_index":2536,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`gltf_geom_${name",{"_index":986,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.loadingmanager.itemloaded(`json_geom_${name",{"_index":989,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.loadingmanager.itemloaded(`obj_geom_${name",{"_index":947,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.loadingmanager.itemloaded(`parse_gltf_${name",{"_index":981,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.loadjsongeometry(json",{"_index":2468,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadjsongeometry(jsroot.geo.build(obj",{"_index":2420,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadobjgeometry(filename",{"_index":2467,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadsceneconfiguration(phoenixscene.sceneconfiguration",{"_index":2406,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadstatefromfile",{"_index":2112,"title":{},"body":{"classes/StateManager.html":{}}}],["this.loadstatefromjson(jsondata",{"_index":2142,"title":{},"body":{"classes/StateManager.html":{}}}],["this.mainrenderer",{"_index":1834,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.maxentries",{"_index":1025,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.maxvalue",{"_index":542,"title":{},"body":{"classes/Cut.html":{}}}],["this.minvalue",{"_index":541,"title":{},"body":{"classes/Cut.html":{}}}],["this.moveindirection(direction",{"_index":2311,"title":{},"body":{"classes/VRManager.html":{}}}],["this.name",{"_index":1402,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.nodelevel",{"_index":1411,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.oncontrollerselectend",{"_index":2269,"title":{},"body":{"classes/VRManager.html":{}}}],["this.oncontrollerselectstart",{"_index":2267,"title":{},"body":{"classes/VRManager.html":{}}}],["this.ondisplayedeventchange.foreach((callback",{"_index":2376,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondisplayedeventchange.push(callback",{"_index":2456,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondocumentmousedown",{"_index":2005,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.oneventschange.foreach(callback",{"_index":2367,"title":{},"body":{"interfaces/Window.html":{}}}],["this.oneventschange.push(callback",{"_index":2458,"title":{},"body":{"interfaces/Window.html":{}}}],["this.onloadcallbacks",{"_index":1169,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onloadcallbacks.foreach(callback",{"_index":1152,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onloadcallbacks.push(callback",{"_index":1165,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onprogresscallbacks",{"_index":1163,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onprogresscallbacks.push(callback",{"_index":1166,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onsessionended",{"_index":2247,"title":{},"body":{"classes/VRManager.html":{}}}],["this.ontoggle",{"_index":1404,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(this.togglestate",{"_index":1457,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(value",{"_index":1426,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontouchdown",{"_index":2007,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove",{"_index":2003,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove(event.targettouches[0",{"_index":2044,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.onvrsessionended",{"_index":2262,"title":{},"body":{"classes/VRManager.html":{}}}],["this.onvrsessionstarted(session",{"_index":2258,"title":{},"body":{"classes/VRManager.html":{}}}],["this.outlinepass",{"_index":1995,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects",{"_index":2014,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects[0",{"_index":2019,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.overlayrenderer",{"_index":1838,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.parent",{"_index":1407,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.parent.removechild(this",{"_index":1416,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.parsephoenixevents(res",{"_index":2532,"title":{},"body":{"interfaces/Window.html":{}}}],["this.particledata",{"_index":2181,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.phoenixmenuroot",{"_index":2106,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.addconfig('button",{"_index":2108,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.configactive",{"_index":2148,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.getnodestate",{"_index":2114,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.loadstatefromjson(jsondata['phoenixmenu",{"_index":2147,"title":{},"body":{"classes/StateManager.html":{}}}],["this.preselectionantialias",{"_index":2008,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.processgeometry(geometry",{"_index":984,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.processobj",{"_index":950,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.processobj(object",{"_index":944,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.progressitems",{"_index":1170,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.progressitems[itemname",{"_index":1154,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.render",{"_index":609,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.renderer",{"_index":2246,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcamera(new",{"_index":2273,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontroller(0",{"_index":2281,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontroller(1",{"_index":2284,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontrollergrip(0",{"_index":2288,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontrollergrip(1",{"_index":2292,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.setsession(session",{"_index":2263,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderermanager.getmainrenderer().localclippingenabled",{"_index":332,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.renderermanager.setlocalclippingenabled(true",{"_index":333,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.renderers",{"_index":1839,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.indexof(renderer",{"_index":1842,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.length",{"_index":1846,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.push(renderer",{"_index":1841,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.splice(index",{"_index":1843,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers[0].localclippingenabled",{"_index":1847,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.reset",{"_index":1153,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.save(new",{"_index":763,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.saveeventdataconfiguration(eventdata",{"_index":750,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savegeometriesconfiguration(geometries",{"_index":752,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savesceneconfig(eventdata",{"_index":737,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savestateasjson",{"_index":2110,"title":{},"body":{"classes/StateManager.html":{}}}],["this.savestring(output",{"_index":747,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savestring(result",{"_index":734,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.scene",{"_index":604,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.scene.add(...particles",{"_index":364,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.scene.getobjectbyname(scenemanager.event_data_id",{"_index":201,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.scene.remove(...particles",{"_index":373,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.selectedobject",{"_index":1997,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.length",{"_index":2023,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.push",{"_index":2028,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.splice(0",{"_index":2022,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.name",{"_index":2020,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.setmainrenderer(renderer",{"_index":1814,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.setobjflat(object",{"_index":953,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.setupvrcontrols",{"_index":2259,"title":{},"body":{"classes/VRManager.html":{}}}],["this.togglestate",{"_index":1427,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.toload",{"_index":1167,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.length",{"_index":1148,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.push(id",{"_index":1146,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.sort().join",{"_index":1150,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.truthdata",{"_index":2182,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.ui",{"_index":1190,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.ui.addcollection(typefolder",{"_index":1257,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.ui.addcollectionpm(typefolderpm",{"_index":1258,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.ui.addeventdatafolder",{"_index":2372,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolder(objecttype",{"_index":2447,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolder(typename",{"_index":1240,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.ui.addeventdatatypefolderpm(typename",{"_index":1241,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.ui.addgeometry(geom",{"_index":2451,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addgeometry(name",{"_index":2389,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.enablekeyboardcontrols",{"_index":2496,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.init(configuration",{"_index":2343,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.updateui",{"_index":2346,"title":{},"body":{"interfaces/Window.html":{}}}],["this.uuid",{"_index":1932,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.vractive",{"_index":2260,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera",{"_index":2272,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera.name",{"_index":2275,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera.position.addscaledvector(direction",{"_index":2321,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera?.getworlddirection(direction",{"_index":2319,"title":{},"body":{"classes/VRManager.html":{}}}],["though",{"_index":1729,"title":{},"body":{"classes/RKHelper.html":{}}}],["thr",{"_index":2430,"title":{},"body":{"interfaces/Window.html":{}}}],["three",{"_index":153,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"dependencies.html":{}}}],["three,js",{"_index":1791,"title":{},"body":{"classes/RendererManager.html":{}}}],["three.extra.min.js",{"_index":1883,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["three.js",{"_index":15,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["three.min.js",{"_index":1882,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["three/examples/jsm/exporters/gltfexporter",{"_index":730,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/exporters/objexporter",{"_index":728,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/loaders/gltfloader",{"_index":934,"title":{},"body":{"classes/ImportManager.html":{}}}],["three/examples/jsm/loaders/objloader",{"_index":932,"title":{},"body":{"classes/ImportManager.html":{}}}],["three/examples/jsm/postprocessing/effectcomposer",{"_index":595,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass",{"_index":599,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass.js",{"_index":1985,"title":{},"body":{"classes/SelectionManager.html":{}}}],["three/examples/jsm/postprocessing/pass",{"_index":600,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/renderpass",{"_index":598,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/webxr/xrcontrollermodelfactory",{"_index":2237,"title":{},"body":{"classes/VRManager.html":{}}}],["three/index",{"_index":687,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["threecsg.js",{"_index":1884,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["threejs",{"_index":1267,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{}}}],["threemanager",{"_index":638,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["threemanager(this.infologger",{"_index":2337,"title":{},"body":{"interfaces/Window.html":{}}}],["threeservice",{"_index":1045,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["through",{"_index":93,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["time",{"_index":678,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["todo",{"_index":1193,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["toggle",{"_index":1370,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggles",{"_index":2480,"title":{},"body":{"interfaces/Window.html":{}}}],["toggleselfanddescendants",{"_index":1355,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggleselfanddescendants(value",{"_index":1395,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["togglestate",{"_index":1346,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggling",{"_index":1359,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["tojson",{"_index":2422,"title":{},"body":{"interfaces/Window.html":{}}}],["toload",{"_index":1112,"title":{},"body":{"classes/LoadingManager.html":{}}}],["top",{"_index":439,"title":{},"body":{"classes/CMSObjects.html":{}}}],["totalitems",{"_index":1160,"title":{},"body":{"classes/LoadingManager.html":{}}}],["totalprogress",{"_index":1155,"title":{},"body":{"classes/LoadingManager.html":{}}}],["touch",{"_index":1951,"title":{},"body":{"classes/SelectionManager.html":{}}}],["touchevent",{"_index":2042,"title":{},"body":{"classes/SelectionManager.html":{}}}],["towards",{"_index":2231,"title":{},"body":{"classes/VRManager.html":{}}}],["track",{"_index":217,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["track.children[0",{"_index":378,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["track.dparams",{"_index":1710,"title":{},"body":{"classes/RKHelper.html":{}}}],["track.pos",{"_index":1708,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackcoll",{"_index":1291,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackcolor",{"_index":377,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["trackid",{"_index":1289,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackid.split(':')[0",{"_index":1292,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackid.split(':')[1",{"_index":1294,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackindex",{"_index":1293,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["tracking",{"_index":2255,"title":{},"body":{"classes/VRManager.html":{}}}],["trackml",{"_index":2158,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["trackmlloader",{"_index":2156,"title":{"classes/TrackmlLoader.html":{}},"body":{"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["trackparams",{"_index":1297,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["trackparams.pos",{"_index":1517,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["tracks",{"_index":212,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/TrackmlLoader.html":{},"miscellaneous/variables.html":{}}}],["trackscollection",{"_index":1705,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections",{"_index":1704,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections[trackscollection",{"_index":1707,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollectionsevent",{"_index":1703,"title":{},"body":{"classes/RKHelper.html":{}}}],["transforming/changing",{"_index":1617,"title":{},"body":{"classes/PresetView.html":{}}}],["translation",{"_index":97,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["transparent",{"_index":356,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["traverse",{"_index":207,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["traversed",{"_index":1969,"title":{},"body":{"classes/SelectionManager.html":{}}}],["tree",{"_index":1384,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["true",{"_index":300,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["truncate",{"_index":1356,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["truth",{"_index":2172,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["truthdata",{"_index":2161,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["truthy",{"_index":2168,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["try",{"_index":813,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tryrungekuttastep",{"_index":815,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tryrungekuttastep(state.stepsize",{"_index":841,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tubebuffergeometry",{"_index":141,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["tween",{"_index":66,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["tween.easing(easing",{"_index":169,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.easing(tween.easing.quartic.out).start",{"_index":310,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.easing.cubic.out",{"_index":173,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.js",{"_index":16,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.start",{"_index":344,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween",{"_index":162,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(animationclipplane",{"_index":342,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(animationsphere",{"_index":280,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(particle.material).to",{"_index":366,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(particle.position).to",{"_index":369,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tweenduration",{"_index":64,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["tweenduration).start",{"_index":370,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tweenjs/tween.js",{"_index":154,"title":{},"body":{"classes/AnimationsManager.html":{},"dependencies.html":{}}}],["tweens",{"_index":309,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["two",{"_index":113,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{}}}],["type",{"_index":41,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typefolder",{"_index":1069,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["typefolder.add",{"_index":1198,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["typefolderpm",{"_index":1205,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["typefolderpm.addconfig('slider",{"_index":1206,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["typename",{"_index":1066,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["typeof",{"_index":987,"title":{},"body":{"classes/ImportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/StateManager.html":{}}}],["types",{"_index":1429,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/variables.html":{}}}],["ui",{"_index":639,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["ui/index",{"_index":688,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["ui/phoenix",{"_index":511,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixLoader.html":{},"classes/StateManager.html":{}}}],["uiloop",{"_index":2345,"title":{},"body":{"interfaces/Window.html":{}}}],["uimanager",{"_index":640,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["uimanager(this.graphicslibrary",{"_index":2338,"title":{},"body":{"interfaces/Window.html":{}}}],["uiservice",{"_index":1048,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["undefined",{"_index":1145,"title":{},"body":{"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["undefined/null",{"_index":1419,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["uniquely",{"_index":1060,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["unit",{"_index":2075,"title":{},"body":{"classes/State.html":{},"classes/VRManager.html":{}}}],["unitc",{"_index":2065,"title":{},"body":{"classes/State.html":{}}}],["units",{"_index":794,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["unreal",{"_index":548,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["until",{"_index":863,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["up",{"_index":396,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["update",{"_index":848,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{}}}],["updateanimationsphere",{"_index":283,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["updateanimationsphere.containspoint(obj.position",{"_index":298,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["updated",{"_index":2244,"title":{},"body":{"classes/VRManager.html":{}}}],["updating",{"_index":246,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["url",{"_index":486,"title":{},"body":{"interfaces/Configuration.html":{},"classes/ImportManager.html":{},"classes/PresetView.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["url.createobjecturl(blob",{"_index":770,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{}}}],["url.indexof('.root",{"_index":2427,"title":{},"body":{"interfaces/Window.html":{}}}],["urlparams",{"_index":2507,"title":{},"body":{"interfaces/Window.html":{}}}],["urlparams.get('config",{"_index":2513,"title":{},"body":{"interfaces/Window.html":{}}}],["urlparams.get('file",{"_index":2509,"title":{},"body":{"interfaces/Window.html":{}}}],["urlparams.get('type",{"_index":2510,"title":{},"body":{"interfaces/Window.html":{}}}],["urlparams.get('type').tolowercase",{"_index":2511,"title":{},"body":{"interfaces/Window.html":{}}}],["urlsearchparams(locationhref.substr(locationhref.lastindexof",{"_index":2508,"title":{},"body":{"interfaces/Window.html":{}}}],["usage",{"_index":2669,"title":{},"body":{"index.html":{}}}],["use",{"_index":374,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"changelog.html":{},"index.html":{}}}],["used",{"_index":565,"title":{},"body":{"classes/EffectsManager.html":{},"classes/InfoLogger.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["uses",{"_index":1712,"title":{},"body":{"classes/RKHelper.html":{},"index.html":{}}}],["using",{"_index":14,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["uuid",{"_index":1301,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["v1",{"_index":1541,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["v2",{"_index":1542,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["val",{"_index":1158,"title":{},"body":{"classes/LoadingManager.html":{},"classes/SelectionManager.html":{}}}],["val.pos.x",{"_index":1738,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.y",{"_index":1739,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.z",{"_index":1740,"title":{},"body":{"classes/RKHelper.html":{}}}],["value",{"_index":83,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1378,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/TrackmlLoader.html":{}}}],["variable",{"_index":1875,"title":{},"body":{"classes/ScriptLoader.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":2675,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vector",{"_index":2301,"title":{},"body":{"classes/VRManager.html":{}}}],["vector2",{"_index":596,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["vector2(window.innerwidth",{"_index":617,"title":{},"body":{"classes/EffectsManager.html":{}}}],["vector3",{"_index":143,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["vector3().fromarray(hitposition",{"_index":293,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["vector3().fromarray(muonchamberparams[param",{"_index":422,"title":{},"body":{"classes/CMSObjects.html":{}}}],["vector3(0",{"_index":262,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["vector3(0.5",{"_index":1540,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vector3(4000.0",{"_index":1588,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vector3(x",{"_index":1543,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["version",{"_index":2596,"title":{},"body":{"changelog.html":{}}}],["vertex",{"_index":1504,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams",{"_index":1505,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.uuid",{"_index":1612,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.x",{"_index":1606,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.y",{"_index":1608,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertice",{"_index":324,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["vertices",{"_index":1239,"title":{},"body":{"classes/PhoenixLoader.html":{},"miscellaneous/variables.html":{}}}],["verticies",{"_index":323,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["view",{"_index":487,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["view.model",{"_index":510,"title":{},"body":{"interfaces/Configuration.html":{}}}],["view.model.ts",{"_index":1615,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{}}}],["view.model.ts:10",{"_index":1626,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:14",{"_index":1622,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:32",{"_index":1627,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:6",{"_index":1625,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:8",{"_index":1624,"title":{},"body":{"classes/PresetView.html":{}}}],["views",{"_index":508,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["visible",{"_index":273,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["void",{"_index":55,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["vr",{"_index":2190,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["vr_camera",{"_index":2276,"title":{},"body":{"classes/VRManager.html":{}}}],["vractive",{"_index":2203,"title":{},"body":{"classes/VRManager.html":{}}}],["vrcamera",{"_index":2204,"title":{},"body":{"classes/VRManager.html":{}}}],["vrmanager",{"_index":2188,"title":{"classes/VRManager.html":{}},"body":{"classes/VRManager.html":{},"coverage.html":{}}}],["wait",{"_index":1911,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["want",{"_index":2057,"title":{},"body":{"classes/SelectionManager.html":{}}}],["webglrenderer",{"_index":560,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["webglrenderer(parameters",{"_index":1836,"title":{},"body":{"classes/RendererManager.html":{}}}],["webglrendererparameters",{"_index":1812,"title":{},"body":{"classes/RendererManager.html":{}}}],["webglrenderers",{"_index":1781,"title":{},"body":{"classes/RendererManager.html":{}}}],["webxr",{"_index":2241,"title":{},"body":{"classes/VRManager.html":{}}}],["whether",{"_index":494,"title":{},"body":{"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"classes/ImportManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["whose",{"_index":1380,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["width",{"_index":1531,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["window",{"_index":2322,"title":{"interfaces/Window.html":{}},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["window.eventdisplay",{"_index":2464,"title":{},"body":{"interfaces/Window.html":{}}}],["window.innerheight",{"_index":618,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["window.innerwidth",{"_index":1827,"title":{},"body":{"classes/RendererManager.html":{}}}],["window.location.href",{"_index":2506,"title":{},"body":{"interfaces/Window.html":{}}}],["wipe",{"_index":1731,"title":{},"body":{"classes/RKHelper.html":{}}}],["wireframe",{"_index":956,"title":{},"body":{"classes/ImportManager.html":{}}}],["without",{"_index":213,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{}}}],["work",{"_index":2243,"title":{},"body":{"classes/VRManager.html":{}}}],["workaround",{"_index":225,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["working",{"_index":2568,"title":{},"body":{"changelog.html":{}}}],["works",{"_index":2225,"title":{},"body":{"classes/VRManager.html":{}}}],["wrapper",{"_index":491,"title":{},"body":{"interfaces/Configuration.html":{},"classes/RendererManager.html":{}}}],["x",{"_index":164,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["x,y,z",{"_index":488,"title":{},"body":{"interfaces/Configuration.html":{}}}],["x1d6d8;2",{"_index":1641,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["xrcontrollermodelfactory",{"_index":2236,"title":{},"body":{"classes/VRManager.html":{}}}],["y",{"_index":166,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["yes",{"_index":68,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{}}}],["z",{"_index":119,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["z0",{"_index":1717,"title":{},"body":{"classes/RKHelper.html":{}}}],["zero",{"_index":2554,"title":{},"body":{"changelog.html":{}}}],["zoom",{"_index":2433,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomfactor",{"_index":2438,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomtime",{"_index":2439,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomto(zoomfactor",{"_index":2441,"title":{},"body":{"interfaces/Window.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AnimationsManager.html":{"url":"classes/AnimationsManager.html","title":"class - AnimationsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnimationsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/animations-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing animation related operations using three.js and tween.js.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                animateClippingWithCollision\n                            \n                            \n                                    Public\n                                animateEvent\n                            \n                            \n                                    Public\n                                animateEventWithClipping\n                            \n                            \n                                    Public\n                                animateEventWithCollision\n                            \n                            \n                                    Public\n                                animateThroughEvent\n                            \n                            \n                                    Public\n                                animateWithCollision\n                            \n                            \n                                    Public\n                                collideParticles\n                            \n                            \n                                    Public\n                                getCameraTween\n                            \n                            \n                                    Private\n                                getHitsPositions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scene: Scene, activeCamera: Camera, rendererManager: RendererManager)\n                    \n                \n                        \n                            \n                                Defined in src/three/animations-manager.ts:9\n                            \n                        \n\n                \n                    \n                            Constructor for the animation manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Three.js scene containing all the objects and event data.\n\n                                                        \n                                                \n                                                \n                                                        activeCamera\n                                                  \n                                                        \n                                                                    Camera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Currently active camera.\n\n                                                        \n                                                \n                                                \n                                                        rendererManager\n                                                  \n                                                        \n                                                                        RendererManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Manager for managing event display's renderer related functions.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateClippingWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateClippingWithCollision(tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:434\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data\nusing clipping planes after particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEvent(tweenDuration: number, onEnd?: () => void, onAnimationStart?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:114\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when all animations have ended.\n\n                                    \n                                \n                                \n                                    onAnimationStart\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when the first animation starts.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEventWithClipping\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEventWithClipping(tweenDuration: number, onEnd?: () => void, onAnimationStart?: () => void, clippingConstant: number)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:265\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data using clipping planes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                                \n                                    onAnimationStart\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Callback when the first animation starts.\n\n                                    \n                                \n                                \n                                    clippingConstant\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        11000\n                                    \n\n                                    \n                                        Constant for the clipping planes for distance from the origin.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEventWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEventWithCollision(tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:424\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data with particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateThroughEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateThroughEvent(startPos: number[], tweenDuration: number, onAnimationEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:55\n                \n            \n\n\n            \n                \n                    Animate the camera through the event scene.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    startPos\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Start position of the translation animation.\n\n                                    \n                                \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of each tween in the translation animation.\n\n                                    \n                                \n                                \n                                    onAnimationEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when the last animation ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateWithCollision(animationFunction: (tweenDuration: number,onEnd: function,onAnimationStart: function) => void, tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:385\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data with particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    animationFunction\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Animation function to call after collision.\n\n                                    \n                                \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            collideParticles\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    collideParticles(tweenDuration: number, particleSize: number, distanceFromOrigin: number, particleColor: Color, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:335\n                \n            \n\n\n            \n                \n                    Animate the collision of two particles.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Duration of the particle collision animation tween.\n\n                                    \n                                \n                                \n                                    particleSize\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        10\n                                    \n\n                                    \n                                        Size of the particles.\n\n                                    \n                                \n                                \n                                    distanceFromOrigin\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        5000\n                                    \n\n                                    \n                                        Distance of the particles (along z-axes) from the origin.\n\n                                    \n                                \n                                \n                                    particleColor\n                                    \n                                            Color\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        new Color(0xffffff)\n                                    \n\n                                    \n                                        Color of the particles.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Callback to call when the particle collision ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCameraTween\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraTween(pos: number[], duration: number, easing?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:33\n                \n            \n\n\n            \n                \n                    Get the camera tween for animating camera to a position.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    pos\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        End position of the camera tween.\n\n                                    \n                                \n                                \n                                    duration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1000\n                                    \n\n                                    \n                                        Duration of the tween.\n\n                                    \n                                \n                                \n                                    easing\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Animation easing of the tween if any.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Tween object of the camera animation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getHitsPositions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHitsPositions(positions: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:444\n                \n            \n\n\n            \n                \n                    Get the positions of hits in a multidimensional array\nfrom a single dimensional array.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    positions\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Positions of hits in a single dimensional array.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     [][]\n\n                    \n                    \n                        Positions of hits in a multidimensional array.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SceneManager } from \"./scene-manager\";\nimport { TubeBufferGeometry, BufferGeometry, Vector3, Color, MeshBasicMaterial, Mesh, SphereBufferGeometry, Sphere, Object3D, BufferAttribute, Scene, Camera, SphereGeometry, Plane, Group } from \"three\";\nimport * as TWEEN from \"@tweenjs/tween.js\";\nimport { RendererManager } from \"./renderer-manager\";\n\n/**\n * Manager for managing animation related operations using three.js and tween.js.\n */\nexport class AnimationsManager {\n\n  /**\n   * Constructor for the animation manager.\n   * @param scene Three.js scene containing all the objects and event data.\n   * @param activeCamera Currently active camera.\n   * @param rendererManager Manager for managing event display's renderer related functions.\n   */\n  constructor(\n    private scene: Scene,\n    private activeCamera: Camera,\n    private rendererManager: RendererManager\n  ) {\n    this.animateEvent = this.animateEvent.bind(this);\n    this.animateEventWithClipping = this.animateEventWithClipping.bind(this);\n  }\n\n  /**\n   * Get the camera tween for animating camera to a position.\n   * @param pos End position of the camera tween.\n   * @param duration Duration of the tween.\n   * @param easing Animation easing of the tween if any.\n   * @returns Tween object of the camera animation.\n   */\n  public getCameraTween(\n    pos: number[],\n    duration: number = 1000,\n    easing?: any\n  ): any {\n    const tween = new TWEEN.Tween(\n      this.activeCamera.position\n    ).to({ x: pos[0], y: pos[1], z: pos[2] }, duration);\n\n    if (easing) {\n      tween.easing(easing);\n    }\n\n    return tween;\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(\n    startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void\n  ) {\n    // Move to start\n    const start = this.getCameraTween(startPos, 1000, TWEEN.Easing.Cubic.Out);\n    // Move to position along the detector axis\n    const alongAxisPosition = [0, 0, startPos[2]];\n    const startXAxis = this.getCameraTween(alongAxisPosition, tweenDuration);\n\n    const radius = 500;\n    const numOfSteps = 24;\n    const angle = 3 * Math.PI;\n    const step = angle / numOfSteps;\n\n    let rotationPositions = [];\n    for (let i = 1; i  onAnimationEnd?.());\n    startClone.delay(500);\n\n    start.chain(startXAxis);\n    startXAxis.chain(rotateStart);\n    rotate.chain(end);\n    end.chain(startClone);\n\n    start.start();\n  }\n\n  /**\n   * Animate the propagation and generation of event data.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Callback when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   */\n  public animateEvent(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void\n  ) {\n    const extraAnimationSphereDuration = tweenDuration * 0.25;\n    tweenDuration *= 0.75;\n\n    const eventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    const animationSphere = new Sphere(new Vector3(), 0);\n    const objectsToAnimateWithSphere: { eventObject: Object3D, position: any }[] = [];\n\n    const allTweens = [];\n    // Traverse over all event data\n    eventData.traverse((eventObject: any) => {\n      if (eventObject.geometry) {\n        // Animation for extrapolating tracks without changing scale\n        if (eventObject.name === 'Track') {\n          // Check if geometry drawRange count exists\n          let geometryPosCount = eventObject.geometry?.attributes?.position?.count;\n          if (geometryPosCount) {\n            // WORKAROUND\n            // Changing position count for TubeBufferGeometry because\n            // what we get is not the actual and it has Infinity drawRange count\n            if (eventObject.geometry instanceof TubeBufferGeometry) {\n              geometryPosCount *= 6;\n            }\n            if (eventObject.geometry instanceof BufferGeometry) {\n              const oldDrawRangeCount = eventObject.geometry.drawRange.count;\n              eventObject.geometry.setDrawRange(0, 0);\n              const eventObjectTween = new TWEEN.Tween(\n                eventObject.geometry.drawRange\n              ).to({\n                count: geometryPosCount\n              }, tweenDuration);\n              eventObjectTween.onComplete(() => {\n                eventObject.geometry.drawRange.count = oldDrawRangeCount;\n              });\n              allTweens.push(eventObjectTween);\n            }\n          }\n        }\n        // Animation for scaling out objects with or without position\n        else if (eventObject.name === 'Jet') {\n          const scaleTween = new TWEEN.Tween({\n            x: 0.01,\n            y: 0.01,\n            z: 0.01\n          }).to({\n            x: eventObject.scale.x,\n            y: eventObject.scale.y,\n            z: eventObject.scale.z\n          }, tweenDuration);\n          // Manually updating scale since we need to change position\n          scaleTween.onUpdate((updatedScale: Vector3) => {\n            const previousScale = eventObject.scale.x;\n            eventObject.scale.setScalar(updatedScale.x);\n            // Restoring to original position and then moving again with the current value\n            eventObject.position.divideScalar(previousScale)\n              .multiplyScalar(updatedScale.x);\n          });\n          allTweens.push(scaleTween);\n        } else {\n          const hasPosition = !eventObject.position.equals(new Vector3(0, 0, 0));\n          let position = hasPosition\n            ? eventObject.position\n            : eventObject.geometry.boundingSphere.center;\n\n          // Edit geometry for hits\n          if (eventObject.name === 'Hit') {\n            position = Array.from(eventObject.geometry.attributes['position'].array);\n            eventObject.geometry.deleteAttribute('position');\n            eventObject.geometry.computeBoundingSphere();\n          } else {\n            // Making the object invisible and will make visible\n            // once the animation sphere reaches the object\n            eventObject.visible = false;\n          }\n\n          objectsToAnimateWithSphere.push({\n            eventObject: eventObject,\n            position: position\n          });\n        }\n      }\n    });\n\n    // Tween for the animation sphere\n    const animationSphereTween = new TWEEN.Tween(animationSphere)\n      .to({ radius: 3000 }, tweenDuration);\n\n    const onAnimationSphereUpdate = (updateAnimationSphere: Sphere) => {\n      objectsToAnimateWithSphere.forEach((obj) => {\n        if (obj.eventObject.name === 'Hit') {\n\n          const geometry = (obj.eventObject as any).geometry;\n\n          const hitsPositions = this.getHitsPositions(obj.position);\n          const reachedHits = hitsPositions\n            .filter(hitPosition => updateAnimationSphere\n              .containsPoint(new Vector3().fromArray(hitPosition))\n            );\n\n          if (reachedHits.length > 0) {\n            geometry.setAttribute('position', new BufferAttribute(\n              new Float32Array([].concat(...reachedHits)), 3\n            ));\n            geometry.computeBoundingSphere();\n          }\n\n        } else if (updateAnimationSphere.containsPoint(obj.position)) {\n          obj.eventObject.visible = true;\n        }\n      });\n    };\n\n    animationSphereTween.onUpdate(onAnimationSphereUpdate);\n\n    // Animation sphere tween after covering the tracks\n    const animationSphereTweenClone = new TWEEN.Tween(animationSphere)\n      .to({ radius: 10000 }, extraAnimationSphereDuration);\n    animationSphereTweenClone.onUpdate(onAnimationSphereUpdate);\n\n    animationSphereTween.chain(animationSphereTweenClone);\n\n    allTweens.push(animationSphereTween);\n\n    // Call onAnimationStart when the first tween starts\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all tweens\n    for (const tween of allTweens) {\n      tween.easing(TWEEN.Easing.Quartic.Out).start();\n    }\n\n    // Call onEnd when the last tween completes\n    animationSphereTweenClone.onComplete(() => {\n      // Restore all remaining event data items\n      onAnimationSphereUpdate(new Sphere(new Vector3(), Infinity));\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data using clipping planes.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   * @param clippingConstant Constant for the clipping planes for distance from the origin.\n   */\n  public animateEventWithClipping(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void,\n    clippingConstant: number = 11000\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    // Sphere to get spherical set of clipping planes from\n    const sphere = new SphereGeometry(1, 8, 8);\n    // Clipping planes for animation\n    const animationClipPlanes: Plane[] = [];\n\n    // Get clipping planes from the verticies of sphere\n    for (const vertice of sphere.vertices) {\n      animationClipPlanes.push(new Plane(vertice, 0));\n    }\n\n    // Save the previous clipping setting of the renderer\n    const prevLocalClipping = this.rendererManager.getMainRenderer().localClippingEnabled;\n    if (!prevLocalClipping) {\n      this.rendererManager.setLocalClippingEnabled(true);\n    }\n\n    // Apply clipping planes to all the event data objects' material\n    allEventData.traverse((eventObject: any) => {\n      if (eventObject.geometry && eventObject.material) {\n        eventObject.material.clippingPlanes = animationClipPlanes;\n      }\n    });\n\n    const allTweens = [];\n    // Create tweens for the animation clipping planes\n    for (const animationClipPlane of animationClipPlanes) {\n      animationClipPlane.constant = 0;\n      const tween = new TWEEN.Tween(animationClipPlane)\n        .to({ constant: clippingConstant }, tweenDuration);\n      allTweens.push(tween);\n    }\n\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all the tweens\n    for (const tween of allTweens) {\n      tween.start();\n    }\n\n    allTweens[allTweens.length - 1].onComplete(() => {\n      // Revert local clipping of the renderer\n      if (!prevLocalClipping) {\n        this.rendererManager.getMainRenderer().localClippingEnabled = prevLocalClipping /* false */;\n      }\n      // Remove the applied clipping planes from the event data objects\n      allEventData.traverse((eventObject: any) => {\n        if (eventObject.geometry && eventObject.material) {\n          eventObject.material.clippingPlanes = null;\n        }\n      });\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the collision of two particles.\n   * @param tweenDuration Duration of the particle collision animation tween.\n   * @param particleSize Size of the particles.\n   * @param distanceFromOrigin Distance of the particles (along z-axes) from the origin.\n   * @param particleColor Color of the particles.\n   * @param onEnd Callback to call when the particle collision ends.\n   */\n  public collideParticles(\n    tweenDuration: number,\n    particleSize: number = 10,\n    distanceFromOrigin: number = 5000,\n    particleColor: Color = new Color(0xffffff),\n    onEnd?: () => void\n  ) {\n    const particleGeometry = new SphereBufferGeometry(particleSize, 32, 32);\n    const particleMaterial = new MeshBasicMaterial({\n      color: particleColor,\n      transparent: true,\n      opacity: 0\n    });\n\n    const particle1 = new Mesh(particleGeometry, particleMaterial);\n    const particle2 = particle1.clone();\n\n    particle1.position.setZ(distanceFromOrigin);\n    particle2.position.setZ(-distanceFromOrigin);\n\n    const particles = [particle1, particle2];\n\n    this.scene.add(...particles);\n\n    const particleTweens = [];\n\n    for (const particle of particles) {\n      new TWEEN.Tween(particle.material).to({\n        opacity: 1\n      }, 300).start();\n\n      const particleToOrigin = new TWEEN.Tween(particle.position).to({\n        z: 0\n      }, tweenDuration).start();\n\n      particleTweens.push(particleToOrigin);\n    }\n\n    particleTweens[0].onComplete(() => {\n      this.scene.remove(...particles);\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param animationFunction Animation function to call after collision.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateWithCollision(\n    animationFunction: (\n      tweenDuration: number,\n      onEnd?: () => void,\n      onAnimationStart?: () => void\n    ) => void,\n    tweenDuration: number,\n    onEnd?: () => void\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    // Get the color of the first track to use for colliding particles\n    const track = allEventData.getObjectByName('Track');\n    let trackColor: Color;\n    if (track instanceof Group) {\n      trackColor = (track.children[0] as any)?.material?.color;\n    } else {\n      trackColor = (track as any)?.material.color;\n    }\n\n    // Hide event data to show particles collision\n    if (allEventData) {\n      allEventData.visible = false;\n    }\n\n    this.collideParticles(1500, 30, 5000, trackColor, () => {\n      animationFunction(tweenDuration, onEnd, () => {\n        if (allEventData) {\n          allEventData.visible = true;\n        }\n      });\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.animateWithCollision(this.animateEvent, tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.animateWithCollision(this.animateEventWithClipping, tweenDuration, onEnd);\n  }\n\n  /**\n   * Get the positions of hits in a multidimensional array\n   * from a single dimensional array.\n   * @param positions Positions of hits in a single dimensional array.\n   * @returns Positions of hits in a multidimensional array.\n   */\n  private getHitsPositions(positions: number[]): number[][] {\n    const hitsPositions: number[][] = [];\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CMSObjects.html":{"url":"classes/CMSObjects.html","title":"class - CMSObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CMSObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/cms-objects.ts\n        \n\n            \n                Description\n            \n            \n                Physics objects that make up an event in CMS that are not a part of PhoenixObjects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getMuonChamber\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getMuonChamber\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuonChamber(muonChamberParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/cms-objects.ts:14\n                \n            \n\n\n            \n                \n                    Process the Muon Chamber from the given parameters.\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonChamberParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon Chamber.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon Chamber object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Object3D, Vector3, Geometry, Face3, Group, Mesh, MeshBasicMaterial, EdgesGeometry, LineBasicMaterial, DoubleSide, LineSegments, BufferGeometry } from \"three\";\nimport { EVENT_DATA_TYPE_COLORS } from \"../../helpers/constants\";\n\n/**\n * Physics objects that make up an event in CMS that are not a part of {@link PhoenixObjects}.\n */\nexport class CMSObjects {\n  /**\n   * Process the Muon Chamber from the given parameters.\n   * and get it as a geometry.\n   * @param muonChamberParams Parameters of the Muon Chamber.\n   * @returns Muon Chamber object.\n   */\n  public static getMuonChamber(muonChamberParams: any): Object3D {\n    let faces = [];\n    let backs = [];\n\n    for (const param of Object.keys(muonChamberParams)) {\n      if (param.startsWith('front')) {\n        faces.push(\n          new Vector3().fromArray(muonChamberParams[param])\n        );\n      } else if (param.startsWith('back')) {\n        backs.push(\n          new Vector3().fromArray(muonChamberParams[param])\n        );\n      }\n    }\n\n    let box = new Geometry();\n    box.vertices = faces.concat(backs);\n\n    // front\n    box.faces.push(new Face3(0, 1, 2));\n    box.faces.push(new Face3(2, 3, 0));\n\n    // back\n    box.faces.push(new Face3(4, 5, 6));\n    box.faces.push(new Face3(6, 7, 4));\n\n    // top\n    box.faces.push(new Face3(4, 5, 1));\n    box.faces.push(new Face3(1, 0, 4));\n\n    // bottom\n    box.faces.push(new Face3(7, 6, 2));\n    box.faces.push(new Face3(2, 3, 7));\n\n    // left\n    box.faces.push(new Face3(0, 3, 7));\n    box.faces.push(new Face3(7, 4, 0));\n\n    // right\n    box.faces.push(new Face3(1, 5, 6));\n    box.faces.push(new Face3(6, 2, 1));\n\n    box.computeFaceNormals();\n    box.computeVertexNormals();\n\n    const boxBuffer = new BufferGeometry().fromGeometry(box);\n\n    const boxObject = new Mesh(boxBuffer, new MeshBasicMaterial({\n      color: EVENT_DATA_TYPE_COLORS['MuonChambers'],\n      transparent: true,\n      opacity: 0.1,\n      side: DoubleSide\n    }));\n\n    boxObject.userData = Object.assign({}, muonChamberParams);\n    boxObject.name = 'MuonChamber';\n\n    // These are the lines along the box edges\n\n    const boxEdges = new EdgesGeometry(boxBuffer);\n    const lineBoxObject = new LineSegments(boxEdges, new LineBasicMaterial({\n      color: 0xffffff,\n      transparent: true,\n      opacity: 0.7\n    }));\n\n    const muonChamber = new Group();\n    muonChamber.add(boxObject);\n    muonChamber.add(lineBoxObject);\n\n    muonChamberParams.uuid = boxObject.uuid;\n\n    return muonChamber;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Configuration.html":{"url":"interfaces/Configuration.html","title":"interface - Configuration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Configuration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration of the event display.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        defaultEventFile\n                                \n                                \n                                            Optional\n                                        defaultView\n                                \n                                \n                                            Optional\n                                        elementId\n                                \n                                \n                                            Optional\n                                        enableDatGUIMenu\n                                \n                                \n                                            Optional\n                                        eventDataLoader\n                                \n                                \n                                            Optional\n                                        phoenixMenuRoot\n                                \n                                \n                                            Optional\n                                        presetViews\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        defaultEventFile\n                                    \n                                \n                                \n                                    \n                                        defaultEventFile:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default event to load when none given in URL. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultView\n                                    \n                                \n                                \n                                    \n                                        defaultView:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default view [x,y,z] \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementId\n                                    \n                                \n                                \n                                    \n                                        elementId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    ID of the wrapper element. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableDatGUIMenu\n                                    \n                                \n                                \n                                    \n                                        enableDatGUIMenu:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to enable dat.GUI menu or not. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventDataLoader\n                                    \n                                \n                                \n                                    \n                                        eventDataLoader:         EventDataLoader\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EventDataLoader\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Event data loader responsible for processing and loading event data. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phoenixMenuRoot\n                                    \n                                \n                                \n                                    \n                                        phoenixMenuRoot:         PhoenixMenuNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PhoenixMenuNode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Root node of the phoenix menu. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        presetViews\n                                    \n                                \n                                \n                                    \n                                        presetViews:         PresetView[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PresetView[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Preset views for switching event display camera. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { PresetView } from './preset-view.model';\nimport { EventDataLoader } from '../event-data-loader';\nimport { PhoenixMenuNode } from '../ui/phoenix-menu/phoenix-menu-node';\n\n/**\n * Configuration of the event display.\n */\nexport interface Configuration {\n  /** Default view [x,y,z] */\n  defaultView?: number[];\n  /** Preset views for switching event display camera. */\n  presetViews?: PresetView[];\n  /** Event data loader responsible for processing and loading event data. */\n  eventDataLoader?: EventDataLoader;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot?: PhoenixMenuNode;\n  /** Whether to enable dat.GUI menu or not. */\n  enableDatGUIMenu?: boolean;\n  /** ID of the wrapper element. */\n  elementId?: string;\n  /** Default event to load when none given in URL. */\n  defaultEventFile?: { eventFile: string, eventType: string };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cut.html":{"url":"classes/Cut.html","title":"class - Cut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cut\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/cut.model.ts\n        \n\n            \n                Description\n            \n            \n                Cut for specifying filters on event data attribute.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                defaultMaxValue\n                            \n                            \n                                    Private\n                                defaultMinValue\n                            \n                            \n                                    Public\n                                field\n                            \n                            \n                                    Public\n                                maxValue\n                            \n                            \n                                    Public\n                                minValue\n                            \n                            \n                                    Public\n                                step\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: string, minValue: number, maxValue: number, step: number)\n                    \n                \n                        \n                            \n                                Defined in src/extras/cut.model.ts:8\n                            \n                        \n\n                \n                    \n                            Create the cut to filter an event data attribute.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the event data attribute to be filtered.\n\n                                                        \n                                                \n                                                \n                                                        minValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Minimum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        maxValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Maximum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        step\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Step for each value change.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultMaxValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:8\n                            \n                        \n\n                \n                    \n                        Default maximum allowed value of the event data attribute. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultMinValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:6\n                            \n                        \n\n                \n                    \n                        Default minimum allowed value of the event data attribute. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            field\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:18\n                            \n                        \n\n                \n                    \n                        Name of the event data attribute to be filtered.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            maxValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:20\n                            \n                        \n\n                \n                    \n                        Maximum allowed value of the event data attribute.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            minValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:19\n                            \n                        \n\n                \n                    \n                        Minimum allowed value of the event data attribute.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            step\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:21\n                            \n                        \n\n                \n                    \n                        Step for each value change.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/extras/cut.model.ts:30\n                \n            \n\n\n            \n                \n                    Reset the minimum and maximum value of the cut to default.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Cut {\n  /** Default minimum allowed value of the event data attribute. */\n  private defaultMinValue: number;\n  /** Default maximum allowed value of the event data attribute. */\n  private defaultMaxValue: number;\n\n  /**\n   * Create the cut to filter an event data attribute.\n   * @param field Name of the event data attribute to be filtered.\n   * @param minValue Minimum allowed value of the event data attribute.\n   * @param maxValue Maximum allowed value of the event data attribute.\n   * @param step Step for each value change.\n   */\n  constructor(\n    public field: string,\n    public minValue: number,\n    public maxValue: number,\n    public step: number = 1\n  ) {\n    this.defaultMinValue = minValue;\n    this.defaultMaxValue = maxValue;\n  }\n\n  /**\n   * Reset the minimum and maximum value of the cut to default.\n   */\n  reset() {\n    this.minValue = this.defaultMinValue;\n    this.maxValue = this.defaultMaxValue;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EffectsManager.html":{"url":"classes/EffectsManager.html","title":"class - EffectsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EffectsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/effects-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing three.js event display effects like outline pass and unreal bloom.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                antialiasing\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Public\n                                composer\n                            \n                            \n                                    Private\n                                defaultRenderPass\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Private\n                                scene\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addOutlinePassForSelection\n                            \n                            \n                                    Private\n                                antialiasRender\n                            \n                            \n                                    Private\n                                effectsRender\n                            \n                            \n                                    Public\n                                removePass\n                            \n                            \n                                    Public\n                                setAntialiasing\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(camera: Camera, scene: Scene, renderer: WebGLRenderer)\n                    \n                \n                        \n                            \n                                Defined in src/three/effects-manager.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for the effects manager which manages effects and three.js passes.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        camera\n                                                  \n                                                        \n                                                                    Camera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The camera inside the scene.\n\n                                                        \n                                                \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The default scene used for event display.\n\n                                                        \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    WebGLRenderer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The main renderer used by the event display.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            antialiasing\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:20\n                            \n                        \n\n                \n                    \n                        Whether antialiasing is enabled or disabled. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            camera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:14\n                            \n                        \n\n                \n                    \n                        The camera inside the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            composer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EffectComposer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:12\n                            \n                        \n\n                \n                    \n                        Effect composer for effect passes. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultRenderPass\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RenderPass\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:18\n                            \n                        \n\n                \n                    \n                        Render pass for rendering the default scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            render\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:23\n                            \n                        \n\n                \n                    \n                        Render function with (normal render) or without antialias (effects render). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            scene\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Scene\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:16\n                            \n                        \n\n                \n                    \n                        The default scene used for event display. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addOutlinePassForSelection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addOutlinePassForSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/three/effects-manager.ts:69\n                \n            \n\n\n            \n                \n                    Initialize the outline pass for highlighting hovered over event display elements.\n\n\n                    \n                    \n                    \n                        Returns :     OutlinePass\n\n                    \n                    \n                        OutlinePass for highlighting hovered over event display elements.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            antialiasRender\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    antialiasRender(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/three/effects-manager.ts:61\n                \n            \n\n\n            \n                \n                    Render for antialias without the effects composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The default scene used for event display.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            effectsRender\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    effectsRender(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/three/effects-manager.ts:48\n                \n            \n\n\n            \n                \n                    Render the effects composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The default scene used for event display.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removePass\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removePass(pass: Pass)\n                \n            \n\n\n            \n                \n                    Defined in src/three/effects-manager.ts:86\n                \n            \n\n\n            \n                \n                    Remove a pass from the effect composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pass\n                                    \n                                            Pass\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Effect pass to be removed from the effect composer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setAntialiasing\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setAntialiasing(antialias: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/effects-manager.ts:95\n                \n            \n\n\n            \n                \n                    Set the antialiasing of renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    antialias\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether antialiasing is to enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport { Camera, Scene, WebGLRenderer, Vector2, NormalBlending } from \"three\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\nimport { OutlinePass } from \"three/examples/jsm/postprocessing/OutlinePass\";\nimport { Pass } from \"three/examples/jsm/postprocessing/Pass\";\n\n/**\n * Manager for managing three.js event display effects like outline pass and unreal bloom.\n */\nexport class EffectsManager {\n  /** Effect composer for effect passes. */\n  public composer: EffectComposer;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The default scene used for event display. */\n  private scene: Scene;\n  /** Render pass for rendering the default scene. */\n  private defaultRenderPass: RenderPass;\n  /** Whether antialiasing is enabled or disabled. */\n  public antialiasing: boolean = true;\n\n  /** Render function with (normal render) or without antialias (effects render). */\n  public render: (scene: Scene, camera: Camera) => void;\n\n  /**\n   * Constructor for the effects manager which manages effects and three.js passes.\n   * @param camera The camera inside the scene.\n   * @param scene The default scene used for event display.\n   * @param renderer The main renderer used by the event display.\n   */\n  constructor(camera: Camera, scene: Scene, renderer: WebGLRenderer) {\n    this.composer = new EffectComposer(renderer);\n    this.camera = camera;\n    this.scene = scene;\n\n    this.defaultRenderPass = new RenderPass(this.scene, this.camera);\n    this.composer.addPass(this.defaultRenderPass);\n\n    // Set the starting render function\n    this.render = this.antialiasing ? this.antialiasRender : this.effectsRender;\n  }\n\n  /**\n   * Render the effects composer.\n   * @param scene The default scene used for event display.\n   * @param camera The camera inside the scene.\n   */\n  private effectsRender(scene: Scene, camera: Camera) {\n    if (this.composer) {\n      this.defaultRenderPass.camera = camera;\n      this.defaultRenderPass.scene = scene;\n      this.composer.render();\n    }\n  }\n\n  /**\n   * Render for antialias without the effects composer.\n   * @param scene The default scene used for event display.\n   * @param camera The camera inside the scene.\n   */\n  private antialiasRender(scene: Scene, camera: Camera) {\n    this.composer.renderer.render(scene, camera);\n  }\n\n  /**\n   * Initialize the outline pass for highlighting hovered over event display elements.\n   * @returns OutlinePass for highlighting hovered over event display elements.\n   */\n  public addOutlinePassForSelection(): OutlinePass {\n    const outlinePass = new OutlinePass(\n      new Vector2(window.innerWidth, window.innerHeight), this.scene, this.camera\n    );\n    outlinePass.overlayMaterial.blending = NormalBlending;\n    outlinePass.visibleEdgeColor.set(0xffff66);\n    outlinePass.visibleEdgeColor.set(0xdf5330);\n\n    this.composer.addPass(outlinePass);\n\n    return outlinePass;\n  }\n\n  /**\n   * Remove a pass from the effect composer.\n   * @param pass Effect pass to be removed from the effect composer.\n   */\n  public removePass(pass: Pass) {\n    const passIndex = this.composer.passes.indexOf(pass);\n    this.composer.passes.splice(passIndex, 1);\n  }\n\n  /**\n   * Set the antialiasing of renderer.\n   * @param antialias Whether antialiasing is to enabled or disabled.\n   */\n  public setAntialiasing(antialias: boolean) {\n    this.antialiasing = antialias;\n    this.render = this.antialiasing ? this.antialiasRender : this.effectsRender;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventDataLoader.html":{"url":"interfaces/EventDataLoader.html","title":"interface - EventDataLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EventDataLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event-data-loader.ts\n        \n\n            \n                Description\n            \n            \n                Event data loader for implementing different event data loaders.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    buildEventData\n                                \n                                \n                                    getCollection\n                                \n                                \n                                    getCollections\n                                \n                                \n                                    getEventMetadata\n                                \n                                \n                                    getEventsList\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \nbuildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/event-data-loader.ts:18\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Logger for logging event display data..\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/event-data-loader.ts:38\n                \n            \n\n\n            \n                \n                    Get all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Key of the collection that will be retrieved.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Object containing all physics objects from the desired collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/event-data-loader.ts:31\n                \n            \n\n\n            \n                \n                    Get the different collections for the current stored event.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of strings, each representing a collection of the event displayed.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/event-data-loader.ts:44\n                \n            \n\n\n            \n                \n                    Get metadata associated to the displayed event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the displayed event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/event-data-loader.ts:25\n                \n            \n\n\n            \n                \n                    Takes an object containing multiple events and returns the keys of these events.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object that contains the different events.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of keys of the different events.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ThreeManager } from './three/index';\nimport { UIManager } from './ui/index';\nimport { InfoLogger } from './info-logger';\n\n/**\n * Event data loader for implementing different event data loaders.\n */\nexport interface EventDataLoader {\n\n  /**\n   * Takes an object that represents ONE event and takes care of adding\n   * the different objects to the graphic library and the UI controls.\n   * @param eventData Object representing the event.\n   * @param graphicsLibrary Manager containing functionality to draw the 3D objects.\n   * @param ui Manager for showing menus and controls to manipulate the geometries.\n   * @param infoLogger Logger for logging event display data..\n   */\n  buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger): void;\n\n  /**\n   * Takes an object containing multiple events and returns the keys of these events.\n   * @param eventsData Object that contains the different events.\n   * @returns List of keys of the different events.\n   */\n  getEventsList(eventsData: any): string[];\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  getCollections(): string[];\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  getCollection(collectionName: string): any;\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  getEventMetadata(): any[];\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExportManager.html":{"url":"classes/ExportManager.html","title":"class - ExportManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExportManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/export-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's export related functionality.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                exportPhoenixScene\n                            \n                            \n                                    Public\n                                exportSceneToOBJ\n                            \n                            \n                                    Private\n                                save\n                            \n                            \n                                    Private\n                                saveEventDataConfiguration\n                            \n                            \n                                    Private\n                                saveGeometriesConfiguration\n                            \n                            \n                                    Private\n                                saveSceneConfig\n                            \n                            \n                                    Private\n                                saveString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/three/export-manager.ts:8\n                            \n                        \n\n                \n                    \n                            Constructor for the export manager.\n\n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exportPhoenixScene\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportPhoenixScene(scene: Scene, eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:33\n                \n            \n\n\n            \n                \n                    Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exportSceneToOBJ\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportSceneToOBJ(scene: Scene)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:20\n                \n            \n\n\n            \n                \n                    Exports scene to OBJ file format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            save\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    save(blob: Blob, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:108\n                \n            \n\n\n            \n                \n                    Create a temporary link and download/save the data (blob) in a file.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    blob\n                                    \n                                            Blob\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Blob containing exported data.\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the export file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveEventDataConfiguration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveEventDataConfiguration(eventData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:65\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveGeometriesConfiguration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveGeometriesConfiguration(geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:84\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded geometries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveSceneConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveSceneConfig(eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:54\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded scene including event data and geometries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Curently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { eventData: {}; geometries: {}; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveString(text: string, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:99\n                \n            \n\n\n            \n                \n                    Save string in the file and download it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Text to be stored.\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { OBJExporter } from 'three/examples/jsm/exporters/OBJExporter';\nimport { Scene, Object3D, Group } from 'three';\nimport { GLTFExporter } from 'three/examples/jsm/exporters/GLTFExporter';\n\n/**\n * Manager for managing event display's export related functionality.\n */\nexport class ExportManager {\n\n  /**\n   * Constructor for the export manager.\n   */\n  constructor() {\n  }\n\n  /**\n   * Exports scene to OBJ file format.\n   * @param scene The scene to be exported.\n   */\n  public exportSceneToOBJ(scene: Scene) {\n    // Instantiate a exporter\n    const exporter = new OBJExporter();\n    const result = exporter.parse(scene);\n    this.saveString(result, 'phoenix-obj.obj');\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   * @param scene The scene to be exported.\n   * @param eventData Currently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  public exportPhoenixScene(scene: Scene, eventData: Object3D, geometries: Object3D) {\n    const exporter = new GLTFExporter();\n\n    const sceneConfig = this.saveSceneConfig(eventData, geometries);\n    // Parse the input and generate the glTF output\n    exporter.parse(\n      scene,\n      result => {\n        const jsonResult = { sceneConfiguration: sceneConfig, scene: result };\n        const output = JSON.stringify(jsonResult, null, 2);\n        this.saveString(output, 'phoenix-scene.phnx');\n      },\n      null\n    );\n  }\n\n  /**\n   * Save the configuration of the currently loaded scene including event data and geometries.\n   * @param eventData Curently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveSceneConfig(eventData: Object3D, geometries: Object3D) {\n    const eventDataConfig = this.saveEventDataConfiguration(eventData);\n    const geometriesConfig = this.saveGeometriesConfiguration(geometries);\n    const sceneConfig = { eventData: eventDataConfig, geometries: geometriesConfig };\n    return sceneConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded event data.\n   * @param eventData Currently loaded event data.\n   */\n  private saveEventDataConfiguration(eventData: any) {\n    const eventDataConfig = {};\n    for (const objectType of eventData.children) {\n      if (objectType.name) {\n        eventDataConfig[objectType.name] = [];\n        for (const collection of objectType.children) {\n          if (collection.name) {\n            eventDataConfig[objectType.name].push(collection.name);\n          }\n        }\n      }\n    }\n    return eventDataConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded geometries.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveGeometriesConfiguration(geometries: Object3D) {\n    const geometriesConfig = [];\n    geometries.children.forEach((object) => {\n      if (object.name !== 'EventData') {\n        geometriesConfig.push(object.name);\n      }\n    });\n    return geometriesConfig;\n  }\n\n  /**\n   * Save string in the file and download it.\n   * @param text Text to be stored.\n   * @param filename Name of the file.\n   */\n  private saveString(text: string, filename: string) {\n    this.save(new Blob([text], { type: 'text/plain' }), filename);\n  }\n\n  /**\n   * Create a temporary link and download/save the data (blob) in a file.\n   * @param blob Blob containing exported data.\n   * @param filename Name of the export file.\n   */\n  private save(blob: Blob, filename: string) {\n    const link = document.createElement('a');\n    link.style.display = 'none';\n    document.body.appendChild(link);\n    link.href = URL.createObjectURL(blob);\n    link.download = filename;\n    link.click();\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                Default class to define the field.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(field: Vector3)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:156\n                \n            \n\n\n            \n                \n                    Returns field as a Vector3 in Tesla.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Vector3\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(half_h)).add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir.clone().add(k1.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir.clone().add(k2.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(h)).add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir.clone().add(k3.clone().multiplyScalar(h)).cross(B_last).multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return h * (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z));\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    let fh: number = state.stepSize;\n    let fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(k1.clone().add(k2).add(k3).multiplyScalar(fh2 / 6));\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(k1.clone().add(k2.clone().multiplyScalar(2)).add(k3.clone().multiplyScalar(2)).add(k4).multiplyScalar(fh / 6));\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3, startDir: Vector3,\n    p: number, q: number,\n    mss: number = -1, plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3, dir: Vector3 }[] {\n    let rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    let result: { pos: Vector3, dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImportManager.html":{"url":"classes/ImportManager.html","title":"class - ImportManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImportManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/import-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's import related functionality.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clipPlanes\n                            \n                            \n                                    Private\n                                EVENT_DATA_ID\n                            \n                            \n                                    Private\n                                GEOMETRIES_ID\n                            \n                            \n                                    Private\n                                loadingManager\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                loadGLTFGeometry\n                            \n                            \n                                    Public\n                                loadJSONGeometry\n                            \n                            \n                                    Public\n                                loadOBJGeometry\n                            \n                            \n                                    Public\n                                parseGLTFGeometry\n                            \n                            \n                                    Public\n                                parseOBJGeometry\n                            \n                            \n                                    Private\n                                processGeometry\n                            \n                            \n                                    Private\n                                processOBJ\n                            \n                            \n                                    Private\n                                setObjFlat\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clipPlanes: Plane[], EVENT_DATA_ID: string, GEOMETRIES_ID: string)\n                    \n                \n                        \n                            \n                                Defined in src/three/import-manager.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor for the import manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        clipPlanes\n                                                  \n                                                        \n                                                                    Plane[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Planes for clipping geometry.\n\n                                                        \n                                                \n                                                \n                                                        EVENT_DATA_ID\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Object group ID containing event data.\n\n                                                        \n                                                \n                                                \n                                                        GEOMETRIES_ID\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Object group ID containing detector geometries.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            clipPlanes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Plane[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/import-manager.ts:12\n                            \n                        \n\n                \n                    \n                        Planes for clipping geometry. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            EVENT_DATA_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/import-manager.ts:14\n                            \n                        \n\n                \n                    \n                        Object group ID containing event data. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            GEOMETRIES_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/import-manager.ts:16\n                            \n                        \n\n                \n                    \n                        Object group ID containing detector geometries. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            loadingManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LoadingManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/import-manager.ts:18\n                            \n                        \n\n                \n                    \n                        Loading manager for loadable resources \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            loadGLTFGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadGLTFGeometry(sceneUrl: any, name: string, callback: (Geometry: Object3D) => void, scale?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:188\n                \n            \n\n\n            \n                \n                    Loads a GLTF (.gltf) scene/geometry from the given URL.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sceneUrl\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        URL to the GLTF (.gltf) file.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the loaded scene/geometry.\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback called after the scene/geometry is loaded.\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Scale of the geometry.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise for loading the geometry.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            loadJSONGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadJSONGeometry(json: string | object, name: string, callback: (Geometry: Object3D) => void, scale?: number, doubleSided?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:214\n                \n            \n\n\n            \n                \n                    Loads geometries from JSON.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    json\n                                    \n                                            string | object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON or URL to JSON file of the geometry.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the geometry or group of geometries.\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback called after the geometries are processed and loaded.\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Scale of the geometry.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise for loading the geometry.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            loadOBJGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadOBJGeometry(callback: (object: Object3D) => void, filename: string, name: string, color: any, doubleSided: boolean, setFlat: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:43\n                \n            \n\n\n            \n                \n                    Loads an OBJ (.obj) geometry from the given filename.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback when geometry is processed.\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path to the geometry.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name given to the geometry.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color to initialize the geometry.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                                \n                                    setFlat\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether object should be flat-shaded or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise for loading the geometry.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            parseGLTFGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    parseGLTFGeometry(geometry: any, callback: (geometries: Object3D,eventData: Object3D) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:160\n                \n            \n\n\n            \n                \n                    Parses and loads a geometry in GLTF (.gltf) format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometry\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Geometry in GLTF (.gltf) format.\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback called after the geometry is loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise for loading the geometry.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            parseOBJGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    parseOBJGeometry(geometry: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:74\n                \n            \n\n\n            \n                \n                    Parses and loads a geometry in OBJ (.obj) format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometry\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Geometry in OBJ (.obj) format.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name given to the geometry.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        The processed object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            processGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processGeometry(geometry: Object3D, name: string, scale?: number, doubleSided?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:249\n                \n            \n\n\n            \n                \n                    Process the geometry by setting up material and clipping attributes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometry\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Geometry to be processed.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the geometry.\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Scale of the geometry.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            processOBJ\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processOBJ(object: Object3D, name: string, color: any, doubleSided: boolean, setFlat: boolean, data?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:97\n                \n            \n\n\n            \n                \n                    Process the geometry object being loaded from OBJ (.obj) format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        3D object.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the object.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color of the object.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                                \n                                    setFlat\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether object should be flat-shaded or not.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Data/description to be associated with the object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        The processed object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            setObjFlat\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setObjFlat(object3d: Object3D, color: any, doubleSided: boolean, setFlat: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:118\n                \n            \n\n\n            \n                \n                    Process the 3D object and flatten it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object3d\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group of geometries that make up the object.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color of the object.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                                \n                                    setFlat\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether object should be flat-shaded or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        The processed object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DoubleSide, Mesh, LineSegments, LineBasicMaterial, MeshPhongMaterial, Object3D, Plane, Material, ObjectLoader, Color, FrontSide } from 'three';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { LoadingManager } from '../managers/loading-manager';\n\n/**\n * Manager for managing event display's import related functionality.\n */\nexport class ImportManager {\n\n  /** Planes for clipping geometry. */\n  private clipPlanes: Plane[];\n  /** Object group ID containing event data. */\n  private EVENT_DATA_ID: string;\n  /** Object group ID containing detector geometries. */\n  private GEOMETRIES_ID: string;\n  /** Loading manager for loadable resources */\n  private loadingManager: LoadingManager;\n\n  /**\n   * Constructor for the import manager.\n   * @param clipPlanes Planes for clipping geometry.\n   * @param EVENT_DATA_ID Object group ID containing event data.\n   * @param GEOMETRIES_ID Object group ID containing detector geometries.\n   */\n  constructor(clipPlanes: Plane[], EVENT_DATA_ID: string, GEOMETRIES_ID: string) {\n    this.clipPlanes = clipPlanes;\n    this.EVENT_DATA_ID = EVENT_DATA_ID;\n    this.GEOMETRIES_ID = GEOMETRIES_ID;\n    this.loadingManager = new LoadingManager();\n  }\n\n  /**\n   * Loads an OBJ (.obj) geometry from the given filename.\n   * @param callback Callback when geometry is processed.\n   * @param filename Path to the geometry.\n   * @param name Name given to the geometry.\n   * @param color Color to initialize the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param setFlat Whether object should be flat-shaded or not.\n   * @returns Promise for loading the geometry.\n   */\n  public loadOBJGeometry(\n    callback: (object: Object3D) => any,\n    filename: string,\n    name: string,\n    color: any,\n    doubleSided: boolean,\n    setFlat: boolean\n  ): Promise {\n    if (color == null) {\n      color = 0x41a6f4;\n    }\n    const objLoader = new OBJLoader();\n    return new Promise((resolve, reject) => {\n      objLoader.load(filename, object => {\n        const processed = this.processOBJ(object, name, color, doubleSided, setFlat, 'OBJ file');\n        callback(processed);\n        resolve();\n        this.loadingManager.itemLoaded(`obj_geom_${name}`);\n      }, null, (error) => {\n        reject(error);\n        this.loadingManager.itemLoaded(`obj_geom_${name}`);\n      });\n    });\n  }\n\n  /**\n   * Parses and loads a geometry in OBJ (.obj) format.\n   * @param geometry Geometry in OBJ (.obj) format.\n   * @param name Name given to the geometry.\n   * @returns The processed object.\n   */\n  public parseOBJGeometry(geometry: string, name: string): Object3D {\n    const objLoader = new OBJLoader();\n    const object = objLoader.parse(geometry);\n    return this.processOBJ(\n      object,\n      name,\n      0x41a6f4,\n      false,\n      false,\n      'OBJ file loaded from the client.'\n    );\n  }\n\n  /**\n   * Process the geometry object being loaded from OBJ (.obj) format.\n   * @param object 3D object.\n   * @param name Name of the object.\n   * @param color Color of the object.\n   * @param doubleSided Renders both sides of the material.\n   * @param setFlat Whether object should be flat-shaded or not.\n   * @param data Data/description to be associated with the object.\n   * @returns The processed object.\n   */\n  private processOBJ(\n    object: Object3D,\n    name: string,\n    color: any,\n    doubleSided: boolean,\n    setFlat: boolean,\n    data?: string\n  ): Object3D {\n    object.name = name;\n    object.userData = { info: data };\n    return this.setObjFlat(object, color, doubleSided, setFlat);\n  }\n\n  /**\n   * Process the 3D object and flatten it.\n   * @param object3d Group of geometries that make up the object.\n   * @param color Color of the object.\n   * @param doubleSided Renders both sides of the material.\n   * @param setFlat Whether object should be flat-shaded or not.\n   * @returns The processed object.\n   */\n  private setObjFlat(object3d: Object3D, color: any, doubleSided: boolean, setFlat: boolean): Object3D {\n    const material2 = new MeshPhongMaterial({\n      color: color,\n      shininess: 0,\n      wireframe: false,\n      clippingPlanes: this.clipPlanes,\n      clipIntersection: true,\n      clipShadows: false,\n      side: doubleSided ? DoubleSide : FrontSide,\n      flatShading: setFlat\n    });\n\n    object3d.traverse((child: Object3D) => {\n      if (child instanceof Mesh) {\n        child.name = object3d.name;\n        child.userData = object3d.userData;\n        // Use the new material\n        if (child.material instanceof Material) {\n          child.material.dispose();\n          child.material = material2;\n        }\n        // enable casting shadows\n        child.castShadow = false;\n        child.receiveShadow = false;\n      } else {\n        if (\n          child instanceof LineSegments &&\n          child.material instanceof LineBasicMaterial\n        ) {\n          (child.material.color as Color).set(color);\n        }\n      }\n    });\n    return object3d;\n  }\n\n  /**\n   * Parses and loads a geometry in GLTF (.gltf) format.\n   * @param geometry Geometry in GLTF (.gltf) format.\n   * @param callback Callback called after the geometry is loaded.\n   * @returns Promise for loading the geometry.\n   */\n  public parseGLTFGeometry(\n    geometry: any,\n    callback: (geometries: Object3D, eventData: Object3D) => any\n  ): Promise {\n    const loader = new GLTFLoader();\n    const sceneString = JSON.stringify(geometry, null, 2);\n    return new Promise((resolve, reject) => {\n      loader.parse(sceneString, '', gltf => {\n        const eventData = gltf.scene.getObjectByName(this.EVENT_DATA_ID);\n        const geometries = gltf.scene.getObjectByName(this.GEOMETRIES_ID);\n        callback(eventData, geometries);\n        resolve();\n        this.loadingManager.itemLoaded(`parse_gltf_${name}`);\n      }, (error) => {\n        reject(error);\n        this.loadingManager.itemLoaded(`parse_gltf_${name}`);\n      });\n    });\n  }\n\n  /**\n   * Loads a GLTF (.gltf) scene/geometry from the given URL.\n   * @param sceneUrl URL to the GLTF (.gltf) file.\n   * @param name Name of the loaded scene/geometry.\n   * @param callback Callback called after the scene/geometry is loaded.\n   * @param scale Scale of the geometry.\n   * @returns Promise for loading the geometry.\n   */\n  public loadGLTFGeometry(sceneUrl: any, name: string,\n    callback: (Geometry: Object3D) => any, scale?: number): Promise {\n    const loader = new GLTFLoader();\n    return new Promise((resolve, reject) => {\n      loader.load(sceneUrl, gltf => {\n        const geometry = gltf.scene;\n        this.processGeometry(geometry, name, scale);\n        callback(geometry);\n        resolve();\n        this.loadingManager.itemLoaded(`gltf_geom_${name}`);\n      }, null, (error) => {\n        reject(error);\n        this.loadingManager.itemLoaded(`gltf_geom_${name}`);\n      });\n    });\n  }\n\n  /**\n   * Loads geometries from JSON.\n   * @param json JSON or URL to JSON file of the geometry.\n   * @param name Name of the geometry or group of geometries.\n   * @param callback Callback called after the geometries are processed and loaded.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @returns Promise for loading the geometry.\n   */\n  public loadJSONGeometry(json: string | object, name: string,\n    callback: (Geometry: Object3D) => any,\n    scale?: number, doubleSided?: boolean): Promise {\n    const loader = new ObjectLoader();\n    if (typeof json === 'string') {\n      return new Promise((resolve, reject) => {\n        loader.load(json, (geometry: Object3D) => {\n          this.processGeometry(geometry, name, scale, doubleSided);\n          callback(geometry);\n          resolve();\n          this.loadingManager.itemLoaded(`json_geom_${name}`);\n        }, null, (error) => {\n          reject(error);\n          this.loadingManager.itemLoaded(`json_geom_${name}`);\n        });\n      });\n    } else if (typeof json === 'object') {\n      return new Promise((resolve, reject) => {\n        const geometry = loader.parse(json, object => {\n          resolve();\n          this.loadingManager.itemLoaded(`json_geom_${name}`);\n        });\n        this.processGeometry(geometry, name, scale, doubleSided);\n        callback(geometry);\n      });\n    }\n  }\n\n  /**\n   * Process the geometry by setting up material and clipping attributes.\n   * @param geometry Geometry to be processed.\n   * @param name Name of the geometry.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   */\n  private processGeometry(geometry: Object3D, name: string, scale?: number, doubleSided?: boolean) {\n    geometry.name = name;\n    // Set a custom scale if provided\n    if (scale) {\n      geometry.scale.set(scale, scale, scale);\n    }\n    geometry.traverse((child) => {\n      if (child instanceof Mesh) {\n        child.name ? child.userData.name = child.name : child.name = child.userData.name = name;\n        if (child.material instanceof Material) {\n          const color = child.material['color'] ? child.material['color'] : 0x2fd691;\n          const side = doubleSided ? DoubleSide : child.material['side'];\n          // Disposing of the default material\n          child.material.dispose();\n          // Changing to a material with 0 shininess\n          child.material = new MeshPhongMaterial({\n            color: color,\n            shininess: 0,\n            side: side\n          });\n          // Setting up the clipping planes\n          child.material.clippingPlanes = this.clipPlanes;\n          child.material.clipIntersection = true;\n          child.material.clipShadows = false;\n        }\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InfoLogger.html":{"url":"classes/InfoLogger.html","title":"class - InfoLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InfoLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/info-logger.ts\n        \n\n            \n                Description\n            \n            \n                Logger for logging event display data\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                infoLoggerList\n                            \n                            \n                                    Private\n                                maxEntries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                getInfoLoggerList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            infoLoggerList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/info-logger.ts:7\n                            \n                        \n\n                \n                    \n                        List that contains all the info logs \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxEntries\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in src/info-logger.ts:9\n                            \n                        \n\n                \n                    \n                        Max entries to be shown inside the information panel \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(data: string, label?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/info-logger.ts:16\n                \n            \n\n\n            \n                \n                    Add an entry to the info logger\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data of the info log\n\n                                    \n                                \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Label of the info log\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInfoLoggerList\n                        \n                        \n                    \n                \n            \n            \n                \ngetInfoLoggerList()\n                \n            \n\n\n            \n                \n                    Defined in src/info-logger.ts:27\n                \n            \n\n\n            \n                \n                    Get the info logger list being used by the info logger service\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        The info logger list containing log data\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class InfoLogger {\n\n  /** List that contains all the info logs */\n  private infoLoggerList: any[] = [];\n  /** Max entries to be shown inside the information panel */\n  private maxEntries: number = 10;\n\n  /**\n   * Add an entry to the info logger\n   * @param data Data of the info log\n   * @param label Label of the info log\n   */\n  add(data: string, label?: string) {\n    if (this.infoLoggerList.length > this.maxEntries) {\n      this.infoLoggerList.pop();\n    }\n    this.infoLoggerList.unshift(label ? (label + ': ' + data) : data);\n  }\n\n  /**\n   * Get the info logger list being used by the info logger service\n   * @returns The info logger list containing log data\n   */\n  getInfoLoggerList(): any[] {\n    return this.infoLoggerList;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LHCbLoader.html":{"url":"classes/LHCbLoader.html","title":"class - LHCbLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LHCbLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/lhcb-loader.ts\n        \n\n            \n                Description\n            \n            \n                PhoenixLoader for processing and loading an LHCb event.\n\n            \n\n            \n                Extends\n            \n            \n                        PhoenixLoader\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                data\n                            \n                            \n                                    Private\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Protected\n                                loadingManager\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getEventData\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                process\n                            \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/loaders/lhcb-loader.ts:8\n                            \n                        \n\n                \n                    \n                            Constructor for the LHCb loader.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/lhcb-loader.ts:8\n                            \n                        \n\n                \n                    \n                        Event data to be processed. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:21\n\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:17\n\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            loadingManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LoadingManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:23\n\n                            \n                        \n\n                \n                    \n                        Loading manager for loadable resources \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:19\n\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventData()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/lhcb-loader.ts:31\n                \n            \n\n\n            \n                \n                    Process and get the event data.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The processed event data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/lhcb-loader.ts:62\n                \n            \n\n\n            \n                \n                    Get LHCb specific metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            process\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    process(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/lhcb-loader.ts:22\n                \n            \n\n\n            \n                \n                    Set the event data for the loader.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event data as JSON.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:258\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[], extendEventDataTypeUI?: (typeFolder?: any,typeFolderPM?: PhoenixMenuNode) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:220\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                                \n                                    extendEventDataTypeUI\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A callback to add more options to event data type UI folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:40\n\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:100\n\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:79\n\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:338\n\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:63\n\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:297\n\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:280\n\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:121\n\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixLoader } from './phoenix-loader';\n\n/**\n * PhoenixLoader for processing and loading an LHCb event.\n */\nexport class LHCbLoader extends PhoenixLoader {\n  /** Event data to be processed. */\n  private data: any;\n\n  /**\n   * Constructor for the LHCb loader.\n   */\n  constructor() {\n    super();\n    this.data = {};\n  }\n\n  /**\n   * Set the event data for the loader.\n   * @param data Event data as JSON.\n   */\n  public process(data: any) {\n    console.log('Processing event data');\n    this.data = data;\n  }\n\n  /**\n   * Process and get the event data.\n   * @returns The processed event data.\n   */\n  public getEventData(): any {\n\n    const eventData = {\n      eventNumber: this.data.eventNumber,\n      runNumber: this.data.runNumber,\n      Hits: {},\n      Tracks: {}\n    };\n\n    let part_list = [];\n    const pdata_list = this.data.PARTICLES;\n    if (pdata_list) {\n      for (let j = 0; j \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadingManager.html":{"url":"classes/LoadingManager.html","title":"class - LoadingManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadingManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/loading-manager.ts\n        \n\n            \n                Description\n            \n            \n                Phoenix loading manager for managing loadable items.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                    Public\n                                loaded\n                            \n                            \n                                    Private\n                                onLoadCallbacks\n                            \n                            \n                                    Private\n                                onProgressCallbacks\n                            \n                            \n                                    Private\n                                progressItems\n                            \n                            \n                                    Public\n                                toLoad\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addLoadableItem\n                            \n                            \n                                    Public\n                                addLoadListener\n                            \n                            \n                                    Public\n                                addLoadListenerWithCheck\n                            \n                            \n                                    Public\n                                addProgressListener\n                            \n                            \n                                    Public\n                                itemLoaded\n                            \n                            \n                                    Public\n                                onProgress\n                            \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/loading-manager.ts:19\n                            \n                        \n\n                \n                    \n                            Create the singleton Phoenix loading manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            instance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LoadingManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:6\n                            \n                        \n\n                \n                    \n                        Instance of the loading manager \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            loaded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:11\n                            \n                        \n\n                \n                    \n                        Items loaded \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onLoadCallbacks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     (function)[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:14\n                            \n                        \n\n                \n                    \n                        Callbacks to call on load. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onProgressCallbacks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     (function)[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:16\n                            \n                        \n\n                \n                    \n                        Callbacks to call on progress. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            progressItems\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:19\n                            \n                        \n\n                \n                    \n                        Progress for each named item. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toLoad\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:9\n                            \n                        \n\n                \n                    \n                        Items to load. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLoadableItem\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadableItem(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:36\n                \n            \n\n\n            \n                \n                    Add count for a loadable item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        ID of the item to be loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLoadListener\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadListener(callback: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:78\n                \n            \n\n\n            \n                \n                    Add a listener for when all items have loaded.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when all items have loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLoadListenerWithCheck\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadListenerWithCheck(callback: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:87\n                \n            \n\n\n            \n                \n                    Add a listener for when all items have loaded and check if there \nare any items to load when the listener is added.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when all items have loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addProgressListener\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addProgressListener(callback: (progress: number) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:102\n                \n            \n\n\n            \n                \n                    Add a listener for when an item progress.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when there is progress.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            itemLoaded\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    itemLoaded(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:44\n                \n            \n\n\n            \n                \n                    Add count for an item is loaded.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        ID of the item loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            onProgress\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onProgress(itemName: string, progress: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:60\n                \n            \n\n\n            \n                \n                    When an item loading progresses.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    itemName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the item with the progress.\n\n                                    \n                                \n                                \n                                    progress\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Progress of the item.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:109\n                \n            \n\n\n            \n                \n                    Reset the loading manager and its items.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class LoadingManager {\n  /** Instance of the loading manager */\n  private static instance: LoadingManager;\n\n  /** Items to load. */\n  public toLoad: string[] = [];\n  /** Items loaded */\n  public loaded: string[] = [];\n\n  /** Callbacks to call on load. */\n  private onLoadCallbacks: (() => void)[] = [];\n  /** Callbacks to call on progress. */\n  private onProgressCallbacks: ((progress: number) => void)[] = [];\n\n  /** Progress for each named item. */\n  private progressItems: { [key: string]: number } = {};\n\n  /**\n   * Create the singleton Phoenix loading manager.\n   * @returns The loading manager instance.\n   */\n  constructor() {\n    if (LoadingManager.instance === undefined) {\n      LoadingManager.instance = this;\n    }\n    return LoadingManager.instance;\n  }\n\n  /**\n   * Add count for a loadable item.\n   * @param id ID of the item to be loaded.\n   */\n  public addLoadableItem(id: string = '') {\n    this.toLoad.push(id);\n  }\n\n  /**\n   * Add count for an item is loaded.\n   * @param id ID of the item loaded.\n   */\n  public itemLoaded(id: string = '') {\n    this.loaded.push(id);\n    if (\n      this.toLoad.length === this.loaded.length &&\n      this.toLoad.sort().join(',') === this.loaded.sort().join(',')\n    ) {\n      this.onLoadCallbacks.forEach(callback => callback());\n      this.reset();\n    }\n  }\n\n  /**\n   * When an item loading progresses.\n   * @param itemName Name of the item with the progress.\n   * @param progress Progress of the item.\n   */\n  public onProgress(itemName: string, progress: number) {\n    this.progressItems[itemName] = progress;\n\n    let totalProgress = Object.values(this.progressItems)\n      .reduce((acc, val) => acc + val, 0);\n    let totalItems = Object.keys(this.progressItems).length;\n\n    const averageProgress = totalProgress / totalItems;\n\n    for (const callback of this.onProgressCallbacks) {\n      callback(averageProgress);\n    }\n  }\n\n  /**\n   * Add a listener for when all items have loaded.\n   * @param callback Callback to call when all items have loaded.\n   */\n  public addLoadListener(callback: () => void) {\n    this.onLoadCallbacks.push(callback);\n  }\n\n  /**\n   * Add a listener for when all items have loaded and check if there \n   * are any items to load when the listener is added.\n   * @param callback Callback to call when all items have loaded.\n   */\n  public addLoadListenerWithCheck(callback: () => void) {\n    if (\n      this.toLoad.length > 0 &&\n      this.toLoad.length !== this.loaded.length\n    ) {\n      this.onLoadCallbacks.push(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Add a listener for when an item progress.\n   * @param callback Callback to call when there is progress.\n   */\n  public addProgressListener(callback: (progress: number) => void) {\n    this.onProgressCallbacks.push(callback);\n  }\n\n  /**\n   * Reset the loading manager and its items.\n   */\n  public reset() {\n    this.toLoad = [];\n    this.loaded = [];\n    this.onLoadCallbacks = [];\n    this.onProgressCallbacks = [];\n    this.progressItems = {};\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixLoader.html":{"url":"classes/PhoenixLoader.html","title":"class - PhoenixLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/phoenix-loader.ts\n        \n\n            \n                Description\n            \n            \n                Loader for processing and loading an event.\n\n            \n\n\n            \n                Implements\n            \n            \n                            EventDataLoader\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Protected\n                                loadingManager\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/loaders/phoenix-loader.ts:23\n                            \n                        \n\n                \n                    \n                            Create the Phoenix loader.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/phoenix-loader.ts:21\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/phoenix-loader.ts:17\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            loadingManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LoadingManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/phoenix-loader.ts:23\n                            \n                        \n\n                \n                    \n                        Loading manager for loadable resources \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/phoenix-loader.ts:19\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:258\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[], extendEventDataTypeUI?: (typeFolder?: any,typeFolderPM?: PhoenixMenuNode) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:220\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                                \n                                    extendEventDataTypeUI\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A callback to add more options to event data type UI folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:40\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:100\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:79\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:338\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:63\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:297\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:280\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:121\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventDataLoader } from '../event-data-loader';\nimport { Color, Group, Object3D } from 'three';\nimport { UIManager } from '../ui';\nimport { ThreeManager } from '../three';\nimport { Cut } from '../extras/cut.model';\nimport { PhoenixObjects } from './objects/phoenix-objects';\nimport { InfoLogger } from '../info-logger';\nimport { PhoenixMenuNode } from '../ui/phoenix-menu/phoenix-menu-node';\nimport { EVENT_DATA_TYPE_COLORS } from '../helpers/constants';\nimport { LoadingManager } from '../managers/loading-manager';\n\n/**\n * Loader for processing and loading an event.\n */\nexport class PhoenixLoader implements EventDataLoader {\n  /** ThreeService to perform three.js related functions. */\n  private graphicsLibrary: ThreeManager;\n  /** UIService to perform UI related functions. */\n  private ui: UIManager;\n  /** Event data processed by the loader. */\n  private eventData: any;\n  /** Loading manager for loadable resources */\n  protected loadingManager: LoadingManager;\n\n  /**\n   * Create the Phoenix loader.\n   */\n  constructor() {\n    this.loadingManager = new LoadingManager();\n  }\n\n  /**\n   * Takes an object that represents ONE event and takes care of adding\n   * the different objects to the graphic library and the UI controls.\n   * @param eventData Object representing the event.\n   * @param graphicsLibrary Service containing functionality to draw the 3D objects.\n   * @param ui Service for showing menus and controls to manipulate the geometries.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  public buildEventData(eventData: any, graphicsLibrary: ThreeManager,\n    ui: UIManager, infoLogger: InfoLogger): void {\n    this.graphicsLibrary = graphicsLibrary;\n    this.ui = ui;\n    this.eventData = eventData;\n\n    // Replacing tracks with tracks through Runge-Kutta\n    // TODO - make this configurable? Or possibly automatic if tracks have  {\n        if (typeFolder) {\n          const sizeMenu = typeFolder.add({ jetsScale: 100 }, 'jetsScale', 1, 200)\n            .name('Jets Size (%)');\n          sizeMenu.onChange((value: number) => {\n            this.graphicsLibrary.getSceneManager().scaleJets(value);\n          });\n        }\n        // Phoenix menu\n        if (typeFolderPM) {\n          typeFolderPM.addConfig('slider', {\n            label: 'Jets Size (%)',\n            value: 100,\n            min: 1, max: 200,\n            allowCustomValue: true,\n            onChange: (value: number) => {\n              this.graphicsLibrary.getSceneManager().scaleJets(value);\n            }\n          });\n        }\n      };\n\n      this.addObjectType(eventData.Jets, PhoenixObjects.getJet, 'Jets', cuts, addJetsSizeOption);\n    }\n\n    if (eventData.Hits) {\n      // Cannot currently cut on just a postion array.\n      this.addObjectType(eventData.Hits, PhoenixObjects.getHits, 'Hits');\n    }\n\n    if (eventData.CaloClusters) {\n      // (Optional) Cuts can be added to any physics object.\n      const cuts = [\n        new Cut('phi', -pi, pi, 0.01),\n        new Cut('eta', -100, 100),\n        new Cut('energy', 0, 10000)\n      ];\n\n      this.addObjectType(eventData.CaloClusters, PhoenixObjects.getCluster, 'CaloClusters', cuts);\n    }\n\n    if (eventData.Muons) {\n      const cuts = [\n        new Cut('phi', -pi, pi, 0.01),\n        new Cut('eta', -100, 100),\n        new Cut('energy', 0, 10000),\n        new Cut('pT', 0, 50)\n      ];\n      this.addObjectType(eventData.Muons, this.getMuon, 'Muons', cuts);\n    }\n\n    // if (eventData.Photons) {\n    //   this.addObjectType(eventData.Photons, PhoenixObjects.getPhotons, 'Muons');\n    // }\n\n    // if (eventData.Electrons) {\n    //   this.addObjectType(eventData.Photons, PhoenixObjects.getElectrons, 'Muons');\n    // }\n\n    if (eventData.Vertices) {\n      const cuts = [\n        new Cut('vertexType', 0, 5)\n      ];\n      this.addObjectType(eventData.Vertices, PhoenixObjects.getVertex, 'Vertices', cuts);\n    }\n  }\n\n  /**\n   * Adds to the event display all collections of a given object type.\n   * @param object Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n   * @param getObject Function that handles of reconstructing objects of the given type.\n   * @param typeName Label for naming the object type.\n   * @param cuts Filters that can be applied to the objects.\n   * @param extendEventDataTypeUI A callback to add more options to event data type UI folder.\n   */\n  protected addObjectType(object: any, getObject: any, typeName: string,\n    cuts?: Cut[], extendEventDataTypeUI?: (typeFolder: any, typeFolderPM?: PhoenixMenuNode) => void) {\n\n    const typeFolder = this.ui.addEventDataTypeFolder(typeName);\n    const typeFolderPM = this.ui.addEventDataTypeFolderPM(typeName);\n    const objectGroup = this.graphicsLibrary.addEventDataTypeGroup(typeName);\n\n    const collectionsList: string[] = this.getObjectTypeCollections(object);\n\n    for (const collectionName of collectionsList) {\n      const objectCollection = object[collectionName];\n      console.log(`${typeName} collection ${collectionName} has ${objectCollection.length} constituents.`)\n\n      this.addCollection(objectCollection, collectionName, getObject, objectGroup);\n\n      let collectionColor: Color;\n      if (object[collectionName][0]?.color) {\n        collectionColor = new Color(parseInt(object[collectionName][0]?.color));\n      } else {\n        // If the color is not in event data use the default one\n        collectionColor = EVENT_DATA_TYPE_COLORS[typeName];\n      }\n\n      cuts = cuts?.filter(cut => cut.field in objectCollection[0]);\n      this.ui.addCollection(typeFolder, collectionName, cuts, collectionColor);\n      this.ui.addCollectionPM(typeFolderPM, collectionName, cuts, collectionColor);\n    }\n\n    extendEventDataTypeUI?.(typeFolder, typeFolderPM);\n  }\n\n  /**\n   * Adds to the event display all the objects inside a collection.\n   * @param objectCollection Contains the params for every object of the collection.\n   * @param collectionName Label to UNIQUELY identify the collection.\n   * @param getObject Handles reconstructing the objects of the collection.\n   * @param objectGroup Group containing the collections of the same object type.\n   */\n  private addCollection(\n    objectCollection: any, collectionName: string,\n    getObject: (object: any) => Object3D, objectGroup: Group) {\n    const collscene = new Group();\n    collscene.name = collectionName;\n\n    for (const objectParams of objectCollection) {\n      const object = getObject.bind(this)(objectParams);\n      if (object) {\n        collscene.add(object);\n      }\n    }\n\n    objectGroup.add(collscene);\n    // console.log(\"-> Adding a threejs group called \"+collscene.name+\" with \"+collscene.children.length+\" children to the group called \"+objectGroup.name);\n  }\n\n  /**\n   * Get collection names of a given object type.\n   * @param object Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n   * @returns List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n   */\n  private getObjectTypeCollections(object: any): string[] {\n    const collectionsList: string[] = [];\n\n    for (const collectionName of Object.keys(object)) {\n      if (object[collectionName] !== null) {\n        collectionsList.push(collectionName);\n      }\n    }\n\n    return collectionsList;\n  }\n\n  /**\n   * Process the Muon from the given parameters and get it as a group.\n   * @param muonParams Parameters of the Muon.\n   * @returns Muon group containing Clusters and Tracks.\n   */\n  protected getMuon(muonParams: any): Object3D {\n    const muonScene = new Group();\n    if ('LinkedClusters' in muonParams) {\n      for (const clusterID of muonParams.LinkedClusters) {\n        const clusterColl = clusterID.split(':')[0];\n        const clusterIndex = clusterID.split(':')[1];\n\n        if (clusterColl && clusterIndex && this.eventData.CaloClusters && this.eventData.CaloClusters[clusterColl]) {\n          const clusterParams = this.eventData.CaloClusters[clusterColl][clusterIndex];\n          if (clusterParams) {\n            const cluster = PhoenixObjects.getCluster(clusterParams);\n            muonScene.add(cluster);\n          }\n        }\n      }\n    }\n    if ('LinkedTracks' in muonParams) {\n      for (const trackID of muonParams.LinkedTracks) {\n        const trackColl = trackID.split(':')[0];\n        const trackIndex = trackID.split(':')[1];\n\n        if (trackColl && trackIndex && this.eventData.Tracks && this.eventData.Tracks[trackColl]) {\n          const trackParams = this.eventData.Tracks[trackColl][trackIndex];\n          if (trackParams) {\n            const track = PhoenixObjects.getTrack(trackParams);\n            muonScene.add(track);\n          }\n        }\n      }\n    }\n    // uuid for selection of muons from the collections info panel\n    muonParams.uuid = muonScene.uuid;\n    muonScene.name = 'Muon';\n    // add to scene\n    return muonScene;\n  }\n\n  /**\n   * Get metadata associated to the event (experiment info, time, run, event...).\n   * @returns Metadata of the event.\n   */\n  getEventMetadata(): any[] {\n    let metadata = [];\n\n    // Dividing event meta data into groups by keys and label\n    // For example, the first array group is for \"Run / Event / LS\"\n    const eventDataPropGroups = [\n      [\n        { keys: ['runNumber', 'run number'], label: 'Run' },\n        { keys: ['eventNumber', 'event number'], label: 'Event' },\n        { keys: ['ls'], label: 'LS' },\n        { keys: ['lumiBlock'], label: 'LumiBlock' }\n      ],\n      [\n        { keys: ['time'], label: 'Data recorded' }\n      ]\n    ];\n\n    const eventDataKeys = Object.keys(this.eventData);\n\n    // Iterating the group\n    for (const eventDataPropGroup of eventDataPropGroups) {\n      let combinedProps = {};\n      // Iterating the props inside a group\n      for (const eventDataProp of eventDataPropGroup) {\n        // Iterating each possible key of a prop\n        for (const eventDataPropKey of eventDataProp.keys) {\n          if (eventDataKeys.includes(eventDataPropKey) && this.eventData[eventDataPropKey]) {\n            combinedProps[eventDataProp.label] = this.eventData[eventDataPropKey];\n            break;\n          }\n        }\n      }\n      if (Object.keys(combinedProps).length > 0) {\n        // Joining and pushing the collected combined properties to the actual metadata\n        metadata.push({\n          label: Object.keys(combinedProps).join(' / '),\n          value: Object.values(combinedProps).join(' / ')\n        });\n      }\n    }\n\n    return metadata;\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixMenuNode.html":{"url":"classes/PhoenixMenuNode.html","title":"class - PhoenixMenuNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixMenuNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ui/phoenix-menu/phoenix-menu-node.ts\n        \n\n            \n                Description\n            \n            \n                A single node of phoenix menu item.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                children\n                            \n                            \n                                childrenActive\n                            \n                            \n                                configActive\n                            \n                            \n                                configs\n                            \n                            \n                                icon\n                            \n                            \n                                name\n                            \n                            \n                                nodeLevel\n                            \n                            \n                                onToggle\n                            \n                            \n                                    Private\n                                parent\n                            \n                            \n                                toggleState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addChild\n                            \n                            \n                                addConfig\n                            \n                            \n                                applyConfigState\n                            \n                            \n                                findInTree\n                            \n                            \n                                findInTreeOrCreate\n                            \n                            \n                                getNodeState\n                            \n                            \n                                loadStateFromJSON\n                            \n                            \n                                remove\n                            \n                            \n                                removeChild\n                            \n                            \n                                toggleSelfAndDescendants\n                            \n                            \n                                truncate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, icon?: string, onToggle?: (value?: boolean) => void, children?: PhoenixMenuNode[], configs?: any[], parent?: PhoenixMenuNode)\n                    \n                \n                        \n                            \n                                Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:25\n                            \n                        \n\n                \n                    \n                            Create the phoenix menu node.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the node.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Icon of the node.\n\n                                                        \n                                                \n                                                \n                                                        onToggle\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Function on toggling the node.\n\n                                                        \n                                                \n                                                \n                                                        children\n                                                  \n                                                        \n                                                                        PhoenixMenuNode[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Children of the node.\n\n                                                        \n                                                \n                                                \n                                                        configs\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Configuration options in the node.\n\n                                                        \n                                                \n                                                \n                                                        parent\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Parent of the node.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:14\n                            \n                        \n\n                \n                    \n                        Children of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            childrenActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:23\n                            \n                        \n\n                \n                    \n                        If the node children are active or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            configActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:25\n                            \n                        \n\n                \n                    \n                        If the node configuration options are active or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            configs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:16\n                            \n                        \n\n                \n                    \n                        Configuration options in the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            icon\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:8\n                            \n                        \n\n                \n                    \n                        Icon of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:6\n                            \n                        \n\n                \n                    \n                        Name of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nodeLevel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:18\n                            \n                        \n\n                \n                    \n                        Level of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onToggle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:10\n                            \n                        \n\n                \n                    \n                        Function on toggling the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            parent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:20\n                            \n                        \n\n                \n                    \n                        Parent of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:12\n                            \n                        \n\n                \n                    \n                        If the node toggle state is true or false. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addChild\n                        \n                        \n                    \n                \n            \n            \n                \naddChild(name: string, onToggle?: (value?: boolean) => void, icon?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:62\n                \n            \n\n\n            \n                \n                    Add a child to the phoenix menu item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the child.\n\n                                    \n                                \n                                \n                                    onToggle\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function on toggling the child.\n\n                                    \n                                \n                                \n                                    icon\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Icon of the child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The child node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addConfig\n                        \n                        \n                    \n                \n            \n            \n                \naddConfig(type: string, options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:104\n                \n            \n\n\n            \n                \n                    Add a config to the phoenix menu item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Options for the config.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The current node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            applyConfigState\n                        \n                        \n                    \n                \n            \n            \n                \napplyConfigState(config: any)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:129\n                \n            \n\n\n            \n                \n                    Apply the current values of config by calling the change function.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Config whose values are to be applied.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findInTree\n                        \n                        \n                    \n                \n            \n            \n                \nfindInTree(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:212\n                \n            \n\n\n            \n                \n                    Find a node in the tree by name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the node to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The found node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findInTreeOrCreate\n                        \n                        \n                    \n                \n            \n            \n                \nfindInTreeOrCreate(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:227\n                \n            \n\n\n            \n                \n                    Find a node in the tree by name or create one.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the node to find or create.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The found or created node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNodeState\n                        \n                        \n                    \n                \n            \n            \n                \ngetNodeState()\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:149\n                \n            \n\n\n            \n                \n                    Get current state of the node as an object.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        State of the node as an object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadStateFromJSON\n                        \n                        \n                    \n                \n            \n            \n                \nloadStateFromJSON(json: string | object)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:170\n                \n            \n\n\n            \n                \n                    Load the state of the phoenix menu node from JSON.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    json\n                                    \n                                            string | object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON containing the phoenix menu node state.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove()\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:84\n                \n            \n\n\n            \n                \n                    Remove the current node.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeChild\n                        \n                        \n                    \n                \n            \n            \n                \nremoveChild(child: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:75\n                \n            \n\n\n            \n                \n                    Remove a child node.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The child node to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The current node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleSelfAndDescendants\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleSelfAndDescendants(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:117\n                \n            \n\n\n            \n                \n                    Function for toggling the current and all child nodes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the node itself and descendants are to be made true or false.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            truncate\n                        \n                        \n                    \n                \n            \n            \n                \ntruncate()\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:95\n                \n            \n\n\n            \n                \n                    Remove all children.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PhoenixMenuNode {\n  /** Name of the node. */\n  name: string;\n  /** Icon of the node. */\n  icon: string;\n  /** Function on toggling the node. */\n  onToggle: (value: boolean) => void;\n  /** If the node toggle state is true or false. */\n  toggleState: boolean = true;\n  /** Children of the node. */\n  children: PhoenixMenuNode[] = [];\n  /** Configuration options in the node. */\n  configs: any[] = [];\n  /** Level of the node. */\n  nodeLevel: number = 0;\n  /** Parent of the node. */\n  private parent: PhoenixMenuNode;\n\n  /** If the node children are active or not. */\n  childrenActive: boolean = false;\n  /** If the node configuration options are active or not. */\n  configActive: boolean = false;\n\n  /**\n   * Create the phoenix menu node.\n   * @param name Name of the node.\n   * @param icon Icon of the node.\n   * @param onToggle Function on toggling the node.\n   * @param children Children of the node.\n   * @param configs Configuration options in the node.\n   * @param parent Parent of the node.\n   */\n  constructor(\n    name: string,\n    icon?: string,\n    onToggle?: (value: boolean) => void,\n    children?: PhoenixMenuNode[],\n    configs?: any[],\n    parent?: PhoenixMenuNode\n  ) {\n    this.name = name;\n    this.icon = icon;\n    this.onToggle = onToggle;\n    if (children)\n      this.children = children;\n    if (configs)\n      this.configs = configs;\n    if (parent)\n      this.parent = parent;\n  }\n\n  /**\n   * Add a child to the phoenix menu item.\n   * @param name Name of the child.\n   * @param onToggle Function on toggling the child.\n   * @param icon Icon of the child.\n   * @returns The child node.\n   */\n  addChild(name: string, onToggle?: (value: boolean) => void, icon?: string): PhoenixMenuNode {\n    const child = new PhoenixMenuNode(name, icon, onToggle);\n    child.parent = this;\n    child.nodeLevel = this.nodeLevel + 1;\n    this.children.push(child);\n    return child;\n  }\n\n  /**\n   * Remove a child node.\n   * @param child The child node to be removed.\n   * @returns The current node.\n   */\n  removeChild(child: PhoenixMenuNode): PhoenixMenuNode {\n    const childIndex = this.children.indexOf(child);\n    this.children.splice(childIndex, 1);\n    return this;\n  }\n\n  /**\n   * Remove the current node.\n   */\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    } else {\n      console.error('Cannot delete root node of phoenix menu. Set it to undefined/null instead.');\n    }\n  }\n\n  /**\n   * Remove all children.\n   */\n  truncate() {\n    this.children = [];\n  }\n\n  /**\n   * Add a config to the phoenix menu item.\n   * @param options Options for the config.\n   * @returns The current node.\n   */\n  addConfig(type: string, options: any): PhoenixMenuNode {\n    let configOptions = { type };\n    Object.assign(configOptions, options);\n    const configsLength = this.configs.push(configOptions);\n    // Apply the values of config\n    this.applyConfigState(this.configs[configsLength - 1]);\n    return this;\n  }\n\n  /**\n   * Function for toggling the current and all child nodes.\n   * @param value If the node itself and descendants are to be made true or false.\n   */\n  toggleSelfAndDescendants(value: boolean) {\n    this.onToggle?.(value);\n    this.toggleState = value;\n    for (const child of this.children) {\n      child.toggleSelfAndDescendants(value);\n    }\n  }\n\n  /**\n   * Apply the current values of config by calling the change function.\n   * @param config Config whose values are to be applied.\n   */\n  applyConfigState(config: any) {\n    // Apply configs of different config types - manual\n    if (config.type === 'checkbox' && config?.['isChecked']) {\n      config.onChange?.(config?.['isChecked']);\n    } else if (config.type === 'color' && config?.['color']) {\n      config.onChange?.(config?.['color']);\n    } else if (config.type === 'slider' && config?.['value']) {\n      config.onChange?.(config?.['value']);\n    } else if (config.type === 'rangeSlider' && config?.['value'] !== undefined) {\n      config.onChange?.({\n        value: config?.['value'],\n        highValue: config?.['highValue']\n      });\n    }\n  }\n\n  /**\n   * Get current state of the node as an object.\n   * @returns State of the node as an object.\n   */\n  getNodeState(): object {\n    const phoenixNodeJSON: object = {};\n\n    phoenixNodeJSON['name'] = this.name;\n    phoenixNodeJSON['nodeLevel'] = this.nodeLevel;\n    phoenixNodeJSON['toggleState'] = this.toggleState;\n    phoenixNodeJSON['childrenActive'] = this.childrenActive;\n    phoenixNodeJSON['configs'] = this.configs;\n    phoenixNodeJSON['children'] = [];\n\n    for (const child of this.children) {\n      phoenixNodeJSON['children'].push(child.getNodeState());\n    }\n\n    return phoenixNodeJSON;\n  }\n\n  /**\n   * Load the state of the phoenix menu node from JSON.\n   * @param json JSON containing the phoenix menu node state.\n   */\n  loadStateFromJSON(json: string | object) {\n    let jsonObject: any;\n    if (typeof json === 'string') {\n      jsonObject = JSON.parse(json);\n    } else {\n      jsonObject = json;\n    }\n\n    this.childrenActive = jsonObject['childrenActive'];\n    this.toggleState = jsonObject['toggleState'];\n    this.onToggle?.(this.toggleState);\n\n    for (const configState of jsonObject['configs']) {\n      const nodeConfig = this.configs.find(nodeConfig =>\n        nodeConfig.type === configState['type'] && nodeConfig.label === configState['label']\n      );\n\n      if (nodeConfig) {\n        for (const prop in configState) {\n          nodeConfig[prop] = configState[prop];\n        }\n\n        this.applyConfigState(nodeConfig);\n      }\n    }\n\n    for (const childState of jsonObject['children']) {\n      const nodeChild = this.children.filter(nodeChild =>\n        nodeChild.name === childState.name && nodeChild.nodeLevel === childState.nodeLevel\n      )[0];\n\n      if (nodeChild) {\n        nodeChild.loadStateFromJSON(childState);\n      }\n    }\n  }\n\n  /**\n   * Find a node in the tree by name.\n   * @param name Name of the node to find.\n   * @returns The found node.\n   */\n  findInTree(name: string): PhoenixMenuNode {\n    if (this.name === name) {\n      return this;\n    } else {\n      for (const child of this.children) {\n        return child.findInTree(name);\n      }\n    }\n  }\n\n  /**\n   * Find a node in the tree by name or create one.\n   * @param name Name of the node to find or create.\n   * @returns The found or created node.\n   */\n  findInTreeOrCreate(name: string): PhoenixMenuNode {\n    let prevNode: PhoenixMenuNode = this;\n    name.split('>').forEach(nodeName => {\n      nodeName = nodeName.trim();\n      const nodeFound = prevNode.findInTree(nodeName);\n      prevNode = nodeFound ? nodeFound : prevNode.addChild(nodeName, () => { });\n    });\n    return prevNode;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixObjects.html":{"url":"classes/PhoenixObjects.html","title":"class - PhoenixObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/phoenix-objects.ts\n        \n\n            \n                Description\n            \n            \n                Physics objects that make up an event in Phoenix.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getCluster\n                            \n                            \n                                    Static\n                                getHits\n                            \n                            \n                                    Static\n                                getJet\n                            \n                            \n                                    Static\n                                getTrack\n                            \n                            \n                                    Static\n                                getVertex\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getCluster\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCluster(clusterParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:200\n                \n            \n\n\n            \n                \n                    Process the CLuster from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clusterParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Cluster.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Cluster object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getHits\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHits(hitsParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:156\n                \n            \n\n\n            \n                \n                    Process the Hits from the given parameters and get them as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hitsParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Hits.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Hits object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getJet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getJet(jetParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:108\n                \n            \n\n\n            \n                \n                    Process the Jet from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jetParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Jet.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Jet object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getTrack\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTrack(trackParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:16\n                \n            \n\n\n            \n                \n                    Process the Track from the given parameters (and positions)\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    trackParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Track.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Track object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getVertex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVertex(vertexParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:235\n                \n            \n\n\n            \n                \n                    Process the Vertex from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vertexParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Vertex.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Vertex object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3, Object3D, CatmullRomCurve3, TubeBufferGeometry, MeshToonMaterial, Mesh, BufferGeometry, LineBasicMaterial, Line, Group, Quaternion, CylinderBufferGeometry, MeshBasicMaterial, BufferAttribute, PointsMaterial, Points, BoxBufferGeometry, MeshPhongMaterial, SphereBufferGeometry } from 'three';\nimport { EVENT_DATA_TYPE_COLORS } from '../../helpers/constants';\nimport { RKHelper } from '../../helpers/rk-helper';\n\n/**\n * Physics objects that make up an event in Phoenix.\n */\nexport class PhoenixObjects {\n\n  /**\n   * Process the Track from the given parameters (and positions)\n   * and get it as a geometry.\n   * @param trackParams Parameters of the Track.\n   * @returns Track object.\n   */\n  public static getTrack(trackParams: any): Object3D {\n    let positions = trackParams.pos;\n    // Track with no points\n    // if (positions.length==0) {\n    //   console.log(\"Track with no positions.\")\n    //   return;\n    // }\n\n    // Track with too few points are extrapolated with RungeKutta\n    if (positions.length  3000)\n            return false;\n          if (Math.sqrt(pos.x * pos.x + pos.y * pos.y) > 1100)\n            return false;\n\n          return true\n        };\n\n        positions = RKHelper.extrapolateTrackPositions(trackParams, inBounds);\n      }\n    }\n    // Check again, in case there was an issue with the extrapolation.\n    if (positions.length  3000) {\n      length = 3000;\n    }\n    const width = length * 0.1;\n\n    const sphi = Math.sin(phi);\n    const cphi = Math.cos(phi);\n    const stheta = Math.sin(theta);\n    const ctheta = Math.cos(theta);\n    //\n    const translation = new Vector3(0.5 * length * cphi * stheta, 0.5 * length * sphi * stheta, 0.5 * length * ctheta);\n\n    const x = cphi * stheta;\n    const y = sphi * stheta;\n    const z = ctheta;\n    const v1 = new Vector3(0, 1, 0);\n    const v2 = new Vector3(x, y, z);\n    const quaternion = new Quaternion();\n    quaternion.setFromUnitVectors(v1, v2);\n\n    const geometry = new CylinderBufferGeometry(width, 1, length, 50, 50, false); // Cone\n\n    const material = new MeshBasicMaterial({ color: EVENT_DATA_TYPE_COLORS['Jets'], opacity: 0.3, transparent: true });\n    material.opacity = 0.5;\n    const mesh = new Mesh(geometry, material);\n    mesh.position.copy(translation);\n    mesh.quaternion.copy(quaternion);\n    mesh.userData = Object.assign({}, jetParams);\n    mesh.name = 'Jet';\n    // Setting uuid for selection from collections info\n    jetParams.uuid = mesh.uuid;\n\n    return mesh;\n  }\n\n  /**\n   * Process the Hits from the given parameters and get them as a geometry.\n   * @param hitsParams Parameters for the Hits.\n   * @returns Hits object.\n   */\n  public static getHits(hitsParams: any): Object3D {\n    let positions: any[];\n    let hitsParamsClone: any;\n\n    // If the parameters is an object then take out 'pos' for hits positions\n    if (typeof hitsParams === 'object' && !Array.isArray(hitsParams)) {\n      positions = [hitsParams.pos];\n      hitsParamsClone = hitsParams;\n    } else {\n      positions = hitsParams;\n      hitsParamsClone = { pos: hitsParams };\n    }\n\n    // attributes\n    const pointPos = new Float32Array(positions.length * 3);\n    let i = 0;\n    for (const hit of positions) {\n      pointPos[i] = hit[0];\n      pointPos[i + 1] = hit[1];\n      pointPos[i + 2] = hit[2];\n      i += 3;\n    }\n\n    // geometry\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new BufferAttribute(pointPos, 3));\n    geometry.computeBoundingSphere();\n    // material\n    const material = new PointsMaterial({ size: 10, color: EVENT_DATA_TYPE_COLORS['Hits'] });\n    // object\n    const pointsObj = new Points(geometry, material);\n    pointsObj.userData = Object.assign({}, hitsParamsClone);\n    pointsObj.name = 'Hit';\n    // Setting uuid for selection from collections info\n    hitsParams.uuid = pointsObj.uuid;\n\n    return pointsObj;\n  }\n\n  /**\n   * Process the CLuster from the given parameters and get it as a geometry.\n   * @param clusterParams Parameters for the Cluster.\n   * @returns Cluster object.\n   */\n  public static getCluster(clusterParams: any): Object3D {\n    const maxR = 1100.0; // This needs to be configurable. \n    const maxZ = 3200.0;\n    const length = clusterParams.energy * 0.003;\n    // geometry\n    const geometry = new BoxBufferGeometry(30, 30, length);\n    // material\n    const material = new MeshPhongMaterial({ color: EVENT_DATA_TYPE_COLORS['CaloClusters'] });\n    // object\n    const cube = new Mesh(geometry, material);\n    const theta = 2 * Math.atan(Math.pow(Math.E, clusterParams.eta));\n    const pos = new Vector3(4000.0 * Math.cos(clusterParams.phi) * Math.sin(theta),\n      4000.0 * Math.sin(clusterParams.phi) * Math.sin(theta),\n      4000.0 * Math.cos(theta));\n    cube.position.x = pos.x;\n    cube.position.y = pos.y;\n    if (pos.x * pos.x + pos.y * pos.y > maxR * maxR) {\n      cube.position.x = maxR * Math.cos(clusterParams.phi);\n      cube.position.y = maxR * Math.sin(clusterParams.phi);\n    }\n    cube.position.z = Math.max(Math.min(pos.z, maxZ), -maxZ); // keep in maxZ range.\n    cube.lookAt(new Vector3(0, 0, 0));\n    cube.userData = Object.assign({}, clusterParams);\n    cube.name = 'Cluster';\n    // Setting uuid for selection from collections info\n    clusterParams.uuid = cube.uuid;\n\n    return cube;\n  }\n\n  /**\n   * Process the Vertex from the given parameters and get it as a geometry.\n   * @param vertexParams Parameters for the Vertex.\n   * @returns Vertex object.\n   */\n  public static getVertex(vertexParams: any): Object3D {\n    // geometry\n    const geometry = new SphereBufferGeometry(3);\n    // material\n    const material = new MeshPhongMaterial({ color: EVENT_DATA_TYPE_COLORS['Vertices'] });\n    // object\n    const sphere = new Mesh(geometry, material);\n    sphere.position.x = vertexParams.x;\n    sphere.position.y = vertexParams.y;\n    sphere.position.z = vertexParams.y;\n\n    sphere.userData = Object.assign({}, vertexParams);\n    sphere.name = 'Vertex';\n    // Setting uuid for selection from collections info\n    vertexParams.uuid = sphere.uuid;\n\n    return sphere;\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresetView.html":{"url":"classes/PresetView.html","title":"class - PresetView","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresetView\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/preset-view.model.ts\n        \n\n            \n                Description\n            \n            \n                Preset view for easily transforming/changing camera position to a specified position.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraPos\n                            \n                            \n                                    Public\n                                icon\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                setView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getIconURL\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, cameraPos: number[], icon: string)\n                    \n                \n                        \n                            \n                                Defined in src/extras/preset-view.model.ts:14\n                            \n                        \n\n                \n                    \n                            Create a preset view.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the preset view.\n\n                                                        \n                                                \n                                                \n                                                        cameraPos\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Position to which the camera is to be set.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Icon of the preset view (to describe the view angle).\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cameraPos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:8\n                            \n                        \n\n                \n                    \n                        Position to which the camera is to be set. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            icon\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:6\n                            \n                        \n\n                \n                    \n                        Icon of the preset view (to describe the view angle). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:10\n                            \n                        \n\n                \n                    \n                        Name of the preset view. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setView\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:14\n                            \n                        \n\n                \n                    \n                        Set the preset view.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIconURL\n                        \n                        \n                    \n                \n            \n            \n                \ngetIconURL()\n                \n            \n\n\n            \n                \n                    Defined in src/extras/preset-view.model.ts:32\n                \n            \n\n\n            \n                \n                    Get the URL of the preset view icon.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Icon URL.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PresetView {\n  /** Icon of the preset view (to describe the view angle). */\n  public icon: string;\n  /** Position to which the camera is to be set. */\n  public cameraPos: number[];\n  /** Name of the preset view. */\n  public name: string;\n  /**\n   * Set the preset view.\n   */\n  setView: () => void;\n\n  /**\n   * Create a preset view.\n   * @param name Name of the preset view.\n   * @param cameraPos Position to which the camera is to be set.\n   * @param icon Icon of the preset view (to describe the view angle).\n   */\n  constructor(name: string, cameraPos: number[], icon: string) {\n    this.name = name;\n    this.cameraPos = cameraPos;\n    this.icon = icon;\n  }\n\n  /**\n   * Get the URL of the preset view icon.\n   * @returns Icon URL.\n   */\n  getIconURL(): string {\n    return 'assets/preset-views/' + this.icon + '.svg#' + this.icon;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrettySymbols.html":{"url":"classes/PrettySymbols.html","title":"class - PrettySymbols","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrettySymbols\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/pretty-symbols.ts\n        \n\n            \n                Description\n            \n            \n                Helper for pretty symbols functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                symbols\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getPrettyParams\n                            \n                            \n                                    Static\n                                getPrettySymbol\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            symbols\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    'θ': ['theta'],\n    'ϕ': ['phi'],\n    'pT': ['pt'],\n    '&#x1D6D8;2': ['chi2'],\n    'η': ['eta'],\n    'q': ['charge'],\n    'NDOF': ['ndof'],\n    'DOF': ['dof'],\n    'Energy': ['energy'],\n    'ET': ['et'],\n    '|p|': ['momentum', 'mom']\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/pretty-symbols.ts:8\n                            \n                        \n\n                \n                    \n                        Pretty symbols for object params. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getPrettyParams\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrettyParams(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/pretty-symbols.ts:38\n                \n            \n\n\n            \n                \n                    Get pretty printed parameters of an object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object parameters to be pretty printed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        New pretty printed parameterss.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getPrettySymbol\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrettySymbol(param: string)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/pretty-symbols.ts:26\n                \n            \n\n\n            \n                \n                    Get pretty symbol of a parameter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameter of a physics object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PrettySymbols {\n\n  /** Pretty symbols for object params. */\n  public static readonly symbols: object = {\n    'θ': ['theta'],\n    'ϕ': ['phi'],\n    'pT': ['pt'],\n    '&#x1D6D8;2': ['chi2'],\n    'η': ['eta'],\n    'q': ['charge'],\n    'NDOF': ['ndof'],\n    'DOF': ['dof'],\n    'Energy': ['energy'],\n    'ET': ['et'],\n    '|p|': ['momentum', 'mom']\n  };\n\n  /**\n   * Get pretty symbol of a parameter.\n   * @param param Parameter of a physics object.\n   */\n  public static getPrettySymbol(param: string) {\n    const prettySymbol = Object.keys(PrettySymbols.symbols)\n      .find(symbol => PrettySymbols.symbols[symbol].includes(param));\n\n    return prettySymbol ? prettySymbol : param;\n  }\n\n  /**\n   * Get pretty printed parameters of an object.\n   * @param params Object parameters to be pretty printed.\n   * @returns New pretty printed parameterss.\n   */\n  public static getPrettyParams(params: { [key: string]: any }): object {\n    // Create a copy of the params so we don't overwrite the original object\n    const paramsCopy = Object.assign({}, params);\n    // Go through all the parameters\n    for (const paramKey of Object.keys(paramsCopy)) {\n      // Get the pretty printed symbol\n      const symbol = PrettySymbols.getPrettySymbol(paramKey);\n      // If we do get a symbol\n      if (symbol !== paramKey) {\n        // Add a parameter with pretty printed symbol\n        paramsCopy[symbol] = paramsCopy[paramKey];\n        delete paramsCopy[paramKey];\n      }\n    }\n\n    // Delete 'pos' since it's too long and not needed\n    delete paramsCopy['pos'];\n\n    // Pretty print the dparams if any\n    if (paramsCopy?.dparams) {\n      const prettyDParams: object = {};\n\n      prettyDParams['θ'] = paramsCopy.dparams[3];\n      prettyDParams['ϕ'] = paramsCopy.dparams[2];\n      prettyDParams['|p|'] = Math.abs(1 / paramsCopy.dparams[4]);\n      prettyDParams['q'] = Math.sign(1 / paramsCopy.dparams[4]);\n      prettyDParams['d0'] = paramsCopy.dparams[0];\n      prettyDParams['z0'] = paramsCopy.dparams[1];\n\n      delete paramsCopy.dparams;\n\n      return { ...paramsCopy, ...prettyDParams };\n    }\n\n    return paramsCopy;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RKHelper.html":{"url":"classes/RKHelper.html","title":"class - RKHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RKHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/rk-helper.ts\n        \n\n            \n                Description\n            \n            \n                Helper methods for RungeKutta functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                extrapolateTrackPositions\n                            \n                            \n                                    Static\n                                getTracksWithRungeKutta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            extrapolateTrackPositions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    extrapolateTrackPositions(track: literal type, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/rk-helper.ts:33\n                \n            \n\n\n            \n                \n                    Extrapolate tracks using RungeKutta propagator.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    track\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Track which is to be extrapolated.\n\n                                    \n                                \n                                \n                                    inbounds\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        () => true\n                                    \n\n                                    \n                                        Function which returns true until the passed position\nis out of bounds, when it returns false. Default just always returns true.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An array of track positions.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getTracksWithRungeKutta\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTracksWithRungeKutta(tracksCollectionsEvent: any)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/rk-helper.ts:13\n                \n            \n\n\n            \n                \n                    Get extrapolated tracks using RungeKutta.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tracksCollectionsEvent\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event containing tracks collections.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { RungeKutta } from \"./runge-kutta\";\nimport { Vector3 } from \"three\";\n\n/**\n * Helper methods for RungeKutta functions.\n */\nexport class RKHelper {\n\n  /**\n   * Get extrapolated tracks using RungeKutta.\n   * @param tracksCollectionsEvent Event containing tracks collections.\n   */\n  public static getTracksWithRungeKutta(tracksCollectionsEvent: any) {\n    const tracksCollections = Object.assign({}, tracksCollectionsEvent);\n    const Tracks = {};\n    for (const tracksCollection of Object.keys(tracksCollections)) {\n      for (const track of tracksCollections[tracksCollection]) {\n        track.pos = RKHelper.extrapolateTrackPositions(track);\n      }\n    }\n\n    return Tracks;\n  }\n\n  /**\n   * Extrapolate tracks using RungeKutta propagator.\n   * @param track Track which is to be extrapolated.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false. Default just always returns true.\n   * @returns An array of track positions.\n\n   */\n  public static extrapolateTrackPositions(\n    track: { dparams: any },\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): any {\n    const dparams = track.dparams;\n    // ATLAS uses mm, MeV\n    let d0 = dparams[0],\n      z0 = dparams[1],\n      phi = dparams[2],\n      theta = dparams[3],\n      qop = dparams[4];\n\n    let p: number;\n    if (qop !== 0) {\n      p = Math.abs(1 / qop);\n    } else {\n      p = 0;\n    }\n    const q = Math.round(p * qop);\n\n    // ATLAS definition of momentum, so probably so move this calc there.\n    let globalMomentum = new Vector3(\n      p * Math.cos(phi) * Math.sin(theta),\n      p * Math.sin(phi) * Math.sin(theta),\n      p * Math.cos(theta)\n    );\n\n    // Cannot use setFromSphericalCoordinates since ATLAS and threejs use\n    // different phi & theta definitions (though both are right-handed)\n    let startPos = new Vector3(\n      -d0 * Math.sin(phi),\n      d0 * Math.cos(phi),\n      z0\n    );\n\n    // Wipe existing positions\n    let positions: number[][] = []\n    positions.push([startPos.x, startPos.y, startPos.z]);\n\n    const startDir = globalMomentum.clone();\n    startDir.normalize();\n\n    // if (p  [val.pos.x, val.pos.y, val.pos.z]);\n\n    return positions.concat(extrapolatedPos);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RendererManager.html":{"url":"classes/RendererManager.html","title":"class - RendererManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RendererManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/renderer-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's renderer related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fixedOverlay\n                            \n                            \n                                    Private\n                                mainRenderer\n                            \n                            \n                                    Private\n                                overlayRenderer\n                            \n                            \n                                    Private\n                                renderers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addRenderer\n                            \n                            \n                                    Private\n                                containsObject\n                            \n                            \n                                    Public\n                                getLocalClipping\n                            \n                            \n                                getMainRenderer\n                            \n                            \n                                getOverlayRenderer\n                            \n                            \n                                getRenderers\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                initRenderer\n                            \n                            \n                                isFixedOverlay\n                            \n                            \n                                    Public\n                                removeControls\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                setFixOverlay\n                            \n                            \n                                    Public\n                                setLocalClippingEnabled\n                            \n                            \n                                setMainRenderer\n                            \n                            \n                                    Public\n                                setOverlayRenderer\n                            \n                            \n                                setRenderers\n                            \n                            \n                                    Public\n                                swapRenderers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/three/renderer-manager.ts:14\n                            \n                        \n\n                \n                    \n                            Create the renderer manager by initializing the main renderer.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            fixedOverlay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/renderer-manager.ts:14\n                            \n                        \n\n                \n                    \n                        If the overlay is fixed or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            mainRenderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/three/renderer-manager.ts:8\n                            \n                        \n\n                \n                    \n                        Main renderer to be used by the event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            overlayRenderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/three/renderer-manager.ts:10\n                            \n                        \n\n                \n                    \n                        Overlay renderer for rendering a secondary overlay canvas. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            renderers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/three/renderer-manager.ts:12\n                            \n                        \n\n                \n                    \n                        A list of all available/created renderers. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:143\n                \n            \n\n\n            \n                \n                    Add a renderer to the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer to be added.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            containsObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    containsObject(obj: WebGLRenderer, list: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:177\n                \n            \n\n\n            \n                \n                    Check if the list of available renderers contains a renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The renderer to be checked for containment.\n\n                                    \n                                \n                                \n                                    list\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of available renderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the list contains the renderer or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLocalClipping\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLocalClipping()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:200\n                \n            \n\n\n            \n                \n                    Get if the local clipping for the first renderer is enabled or disabled.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        If the renderer local clipping is enabled or disabled.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMainRenderer\n                        \n                        \n                    \n                \n            \n            \n                \ngetMainRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:116\n                \n            \n\n\n            \n                \n                    Get the main renderer.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The main renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOverlayRenderer\n                        \n                        \n                    \n                \n            \n            \n                \ngetOverlayRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:124\n                \n            \n\n\n            \n                \n                    Get the renderer used for overlay.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The overlay renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRenderers\n                        \n                        \n                    \n                \n            \n            \n                \ngetRenderers()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:132\n                \n            \n\n\n            \n                \n                    Get all the available renderers.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer[]\n\n                    \n                    \n                        A list of three.js WebGLRenderers\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(elementId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:32\n                \n            \n\n\n            \n                \n                    Initialize the renderer manager by setting up the main renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    elementId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'eventDisplay'\n                                    \n\n                                    \n                                        ID of the wrapper element.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            initRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initRenderer(elementId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:62\n                \n            \n\n\n            \n                \n                    Set up the renderer with the DOM.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    elementId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the wrapper element.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isFixedOverlay\n                        \n                        \n                    \n                \n            \n            \n                \nisFixedOverlay()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:210\n                \n            \n\n\n            \n                \n                    Check if the overlay is fixed or not.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the overlay is fixed or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeControls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeControls(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:153\n                \n            \n\n\n            \n                \n                    Remove a renderer from the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three,js WebGLRenderer to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:44\n                \n            \n\n\n            \n                \n                    Render the overlay.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event display scene to render.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Camera for render.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setFixOverlay\n                        \n                        \n                    \n                \n            \n            \n                \nsetFixOverlay(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:218\n                \n            \n\n\n            \n                \n                    Set if the overlay is to be fixed or not.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the overlay is to be fixed or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLocalClippingEnabled\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLocalClippingEnabled(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:190\n                \n            \n\n\n            \n                \n                    Set if local clipping is to be enabled or disabled for all the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the local clipping is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setMainRenderer\n                        \n                        \n                    \n                \n            \n            \n                \nsetMainRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:85\n                \n            \n\n\n            \n                \n                    Set the main renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setOverlayRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setOverlayRenderer(overlayCanvas: HTMLCanvasElement)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:93\n                \n            \n\n\n            \n                \n                    Set the renderer for overlay event display view.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    overlayCanvas\n                                    \n                                            HTMLCanvasElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Canvas on which the overlay is to be rendered.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setRenderers\n                        \n                        \n                    \n                \n            \n            \n                \nsetRenderers(renderers: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:108\n                \n            \n\n\n            \n                \n                    Set the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderers\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of three.js WebGLRenderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            swapRenderers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:165\n                \n            \n\n\n            \n                \n                    Swap any two renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    rendererA\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer A to be swapped with renderer B.\n\n                                    \n                                \n                                \n                                    rendererB\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer B to be swapped with renderer A.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Scene, WebGLRendererParameters, Camera } from 'three';\n\n/**\n * Manager for managing event display's renderer related functions.\n */\nexport class RendererManager {\n  /** Main renderer to be used by the event display. */\n  private mainRenderer: WebGLRenderer = null;\n  /** Overlay renderer for rendering a secondary overlay canvas. */\n  private overlayRenderer: WebGLRenderer = null;\n  /** A list of all available/created renderers. */\n  private renderers: WebGLRenderer[] = [];\n  /** If the overlay is fixed or not. */\n  private fixedOverlay: boolean;\n\n  /**\n   * Create the renderer manager by initializing the main renderer.\n   */\n  constructor() {\n    const renderer: WebGLRenderer = new WebGLRenderer({\n      antialias: true\n    });\n\n    this.addRenderer(renderer);\n    this.setMainRenderer(renderer);\n  }\n\n  /**\n   * Initialize the renderer manager by setting up the main renderer.\n   * @param elementId ID of the wrapper element.\n   */\n  public init(elementId: string = 'eventDisplay') {\n    // Reset the animation loop\n    this.getMainRenderer().setAnimationLoop(null);\n    // Main renderer for current browsers\n    this.initRenderer(elementId);\n  }\n\n  /**\n   * Render the overlay.\n   * @param scene The event display scene to render.\n   * @param camera Camera for render.\n   */\n  public render(scene: Scene, camera: Camera) {\n    if (this.getOverlayRenderer()) {\n      if (!this.getOverlayRenderer().domElement.hidden) {\n        const sceneColor = scene.background;\n        scene.background = null;\n\n        if (!this.isFixedOverlay()) {\n          this.getOverlayRenderer().render(scene, camera);\n        }\n        scene.background = sceneColor;\n      }\n    }\n  }\n\n  /**\n   * Set up the renderer with the DOM.\n   * @param elementId ID of the wrapper element.\n   */\n  private initRenderer(elementId: string) {\n    const mainRenderer = this.getMainRenderer();\n    mainRenderer.setSize(\n      window.innerWidth,\n      window.innerHeight,\n      false\n    );\n    mainRenderer.setPixelRatio(window.devicePixelRatio);\n    mainRenderer.domElement.id = 'three-canvas';\n\n    let canvas = document.getElementById(elementId);\n    if (canvas == null) {\n      canvas = document.body;\n    }\n    canvas.appendChild(this.getMainRenderer().domElement);\n  }\n\n  // SET/GET\n\n  /**\n   * Set the main renderer.\n   * @param renderer Three.js WebGLRenderer.\n   */\n  setMainRenderer(renderer: WebGLRenderer) {\n    this.mainRenderer = renderer;\n  }\n\n  /**\n   * Set the renderer for overlay event display view.\n   * @param overlayCanvas Canvas on which the overlay is to be rendered.\n   */\n  public setOverlayRenderer(overlayCanvas: HTMLCanvasElement): void {\n    const parameters: WebGLRendererParameters = {\n      canvas: overlayCanvas,\n      antialias: false,\n      alpha: true\n    };\n    const overlayRenderer: WebGLRenderer = new WebGLRenderer(parameters);\n    this.addRenderer(overlayRenderer);\n    this.overlayRenderer = overlayRenderer;\n  }\n\n  /**\n   * Set the available renderers.\n   * @param renderers List of three.js WebGLRenderers.\n   */\n  setRenderers(renderers: WebGLRenderer[]) {\n    this.renderers = renderers;\n  }\n\n  /**\n   * Get the main renderer.\n   * @returns The main renderer.\n   */\n  getMainRenderer(): WebGLRenderer {\n    return this.mainRenderer;\n  }\n\n  /**\n   * Get the renderer used for overlay.\n   * @returns The overlay renderer.\n   */\n  getOverlayRenderer(): WebGLRenderer {\n    return this.overlayRenderer;\n  }\n\n  /**\n   * Get all the available renderers.\n   * @returns A list of three.js WebGLRenderers\n   */\n  getRenderers(): WebGLRenderer[] {\n    return this.renderers;\n  }\n\n\n  // FUNCTIONS\n\n  /**\n   * Add a renderer to the available renderers list.\n   * @param renderer Three.js WebGLRenderer to be added.\n   */\n  public addRenderer(renderer: WebGLRenderer) {\n    if (!this.containsObject(renderer, this.renderers)) {\n      this.renderers.push(renderer);\n    }\n  }\n\n  /**\n   * Remove a renderer from the available renderers list.\n   * @param renderer Three,js WebGLRenderer to be removed.\n   */\n  public removeControls(renderer: WebGLRenderer) {\n    const index: number = this.renderers.indexOf(renderer);\n    if (index > -1) {\n      this.renderers.splice(index, 1);\n    }\n  }\n\n  /**\n   * Swap any two renderers.\n   * @param rendererA Renderer A to be swapped with renderer B.\n   * @param rendererB Renderer B to be swapped with renderer A.\n   */\n  public swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer) {\n    const temp: WebGLRenderer = rendererA;\n    rendererA = rendererB;\n    rendererB = temp;\n  }\n\n  /**\n   * Check if the list of available renderers contains a renderer.\n   * @param obj The renderer to be checked for containment.\n   * @param list List of available renderers.\n   * @returns If the list contains the renderer or not.\n   */\n  private containsObject(obj: WebGLRenderer, list: WebGLRenderer[]): boolean {\n    for (const object of list) {\n      if (object === obj) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set if local clipping is to be enabled or disabled for all the available renderers.\n   * @param value If the local clipping is to be enabled or disabled.\n   */\n  public setLocalClippingEnabled(value: boolean) {\n    for (const renderer of this.renderers) {\n      renderer.localClippingEnabled = value;\n    }\n  }\n\n  /**\n   * Get if the local clipping for the first renderer is enabled or disabled.\n   * @returns If the renderer local clipping is enabled or disabled.\n   */\n  public getLocalClipping() {\n    if (this.renderers.length > 0) {\n      return this.renderers[0].localClippingEnabled;\n    }\n  }\n\n  /**\n   * Check if the overlay is fixed or not.\n   * @returns If the overlay is fixed or not.\n   */\n  isFixedOverlay(): boolean {\n    return this.fixedOverlay;\n  }\n\n  /**\n   * Set if the overlay is to be fixed or not.\n   * @param value If the overlay is to be fixed or not.\n   */\n  setFixOverlay(value: boolean) {\n    this.fixedOverlay = value;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RungeKutta.html":{"url":"classes/RungeKutta.html","title":"class - RungeKutta","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RungeKutta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                Class for performing Runge-Kutta operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                propagate\n                            \n                            \n                                    Static\n                                step\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            propagate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    propagate(startPos: Vector3, startDir: Vector3, p: number, q: number, mss: number, plength: number, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:93\n                \n            \n\n\n            \n                \n                    Propagate using the given properties by performing the Runge-Kutta steps.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    startPos\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Starting position in 3D space.\n\n                                    \n                                \n                                \n                                    startDir\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Starting direction in 3D space.\n\n                                    \n                                \n                                \n                                    p\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Momentum.\n\n                                    \n                                \n                                \n                                    q\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Charge.\n\n                                    \n                                \n                                \n                                    mss\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        -1\n                                    \n\n                                    \n                                        Max step size.\n\n                                    \n                                \n                                \n                                    plength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1000\n                                    \n\n                                    \n                                        Path length.\n\n                                    \n                                \n                                \n                                    inbounds\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        () => true\n                                    \n\n                                    \n                                        Function which returns true until the passed position\nis out of bounds, when it returns false.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type[]\n\n                    \n                    \n                        An array containing position and direction at that position calculated\nthrough the Runge-Kutta steps.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            step\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    step(state: State)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:13\n                \n            \n\n\n            \n                \n                    Perform a Runge-Kutta step for the given state.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                State\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State at which the step is to be performed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The computed step size.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(half_h)).add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir.clone().add(k1.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir.clone().add(k2.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(h)).add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir.clone().add(k3.clone().multiplyScalar(h)).cross(B_last).multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return h * (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z));\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    let fh: number = state.stepSize;\n    let fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(k1.clone().add(k2).add(k3).multiplyScalar(fh2 / 6));\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(k1.clone().add(k2.clone().multiplyScalar(2)).add(k3.clone().multiplyScalar(2)).add(k4).multiplyScalar(fh / 6));\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3, startDir: Vector3,\n    p: number, q: number,\n    mss: number = -1, plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3, dir: Vector3 }[] {\n    let rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    let result: { pos: Vector3, dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScriptLoader.html":{"url":"classes/ScriptLoader.html","title":"class - ScriptLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScriptLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/script-loader.ts\n        \n\n            \n                Description\n            \n            \n                Script loader for dynamically loading external scripts.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                loadJSRootScripts\n                            \n                            \n                                    Static\n                                loadScript\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            loadJSRootScripts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadJSRootScripts(onScriptsLoaded: (JSROOT: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/script-loader.ts:15\n                \n            \n\n\n            \n                \n                    Synchronously load all JSRoot scripts. ONLY CALL ONCE.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    onScriptsLoaded\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback when all the JSRoot scripts have loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            loadScript\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadScript(scriptURL: string, scriptFor?: string, parentElement: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/script-loader.ts:40\n                \n            \n\n\n            \n                \n                    Load a script dynamically from a URL.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    scriptURL\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        URL of the script to be loaded.\n\n                                    \n                                \n                                \n                                    scriptFor\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Optional data attribute to identify what the script is for. [data-scriptFor]\n\n                                    \n                                \n                                \n                                    parentElement\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        document.getElementsByTagName('head')[0]\n                                    \n\n                                    \n                                        Parent element to which the script is to be appended.\nDefaults to  tag.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise for the script load.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { LoadingManager } from \"../managers/loading-manager\";\n\n/** Global JSROOT variable for accessing functions after loading JSRoot scripts. */\ndeclare const JSROOT: any;\n\n/**\n * Script loader for dynamically loading external scripts.\n */\nexport class ScriptLoader {\n\n  /**\n   * Synchronously load all JSRoot scripts. ONLY CALL ONCE.\n   * @param onScriptsLoaded Callback when all the JSRoot scripts have loaded.\n   */\n  public static loadJSRootScripts(onScriptsLoaded: (JSROOT: any) => void) {\n    const loadingManager = new LoadingManager();\n    loadingManager.addLoadableItem('jsroot_scripts');\n    (async () => {\n      const allScripts = [\n        'JSRootCore.js', 'three.min.js', 'three.extra.min.js',\n        'ThreeCSG.js', 'd3.min.js', 'JSRootPainter.js', 'JSRoot3DPainter.js',\n        'JSRootGeoBase.js', 'JSRootGeoPainter.js'\n      ];\n      for (const script of allScripts) {\n        await ScriptLoader.loadScript('assets/jsroot/' + script, 'JSROOT');\n      }\n      onScriptsLoaded(JSROOT);\n      loadingManager.itemLoaded('jsroot_scripts');\n    })();\n  }\n\n  /**\n   * Load a script dynamically from a URL.\n   * @param scriptURL URL of the script to be loaded.\n   * @param scriptFor Optional data attribute to identify what the script is for. `[data-scriptFor]`\n   * @param parentElement Parent element to which the script is to be appended.\n   * Defaults to `` tag.\n   * @returns Promise for the script load.\n   */\n  public static loadScript(scriptURL: string, scriptFor?: string,\n    parentElement: HTMLElement = document.getElementsByTagName('head')[0]): Promise {\n    const loadingManager = new LoadingManager();\n    loadingManager.addLoadableItem('single_script');\n    return new Promise((resolve, reject) => {\n      const scriptExists = document\n        .querySelectorAll('script[src=\"' + scriptURL + '\"]');\n      // If no script exists - add one\n      if (scriptExists.length === 0) {\n        const scriptElement = document.createElement('script');\n        scriptElement.type = 'text/javascript';\n        scriptElement.src = scriptURL;\n        if (scriptFor) {\n          scriptElement.setAttribute('data-scriptfor', scriptFor);\n        }\n        scriptElement.addEventListener('load', () => {\n          scriptElement.setAttribute('data-loaded', 'true');\n          resolve();\n          loadingManager.itemLoaded('single_script');\n        });\n        scriptElement.onerror = (event) => {\n          console.error('ERROR LOADING SCRIPT: ', event);\n          reject();\n          loadingManager.itemLoaded('single_script');\n        }\n        parentElement.appendChild(scriptElement);\n      } else {\n        // If script has already loaded then resolve else wait for it to load\n        if (scriptExists[0].dataset.loaded === 'true') {\n          resolve();\n          loadingManager.itemLoaded('single_script');\n        } else {\n          scriptExists[0].addEventListener('load', () => {\n            resolve();\n            loadingManager.itemLoaded('single_script');\n          });\n        }\n      }\n    });\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectionManager.html":{"url":"classes/SelectionManager.html","title":"class - SelectionManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectionManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/selection-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's selection related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeObject\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Private\n                                effectsManager\n                            \n                            \n                                    Private\n                                ignoreList\n                            \n                            \n                                    Private\n                                infoLogger\n                            \n                            \n                                    Private\n                                isInit\n                            \n                            \n                                    Private\n                                onDocumentMouseDown\n                            \n                            \n                                    Private\n                                onTouchDown\n                            \n                            \n                                    Private\n                                onTouchMove\n                            \n                            \n                                    Private\n                                outlinePass\n                            \n                            \n                                    Private\n                                preSelectionAntialias\n                            \n                            \n                                    Private\n                                scene\n                            \n                            \n                                    Private\n                                selectedObject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                disableSelecting\n                            \n                            \n                                    Private\n                                enableSelecting\n                            \n                            \n                                    Public\n                                getActiveObjectId\n                            \n                            \n                                    Public\n                                highlightObject\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                intersectObject\n                            \n                            \n                                    Public\n                                setSelectedObject\n                            \n                            \n                                    Public\n                                setSelecting\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/three/selection-manager.ts:51\n                            \n                        \n\n                \n                    \n                            Constructor for the selection manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            activeObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    uuid: '',\n    callbacks: [],\n    update: function (uuid: string) {\n      this.uuid = uuid;\n      for (const callback of this.callbacks) {\n        callback(uuid);\n      }\n    },\n    onUpdate: function (callback: (uuid: string) => void) {\n      this.callbacks.push(callback);\n    }\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:26\n                            \n                        \n\n                \n                    \n                        The currently selected object which is observable for changes. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            camera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:20\n                            \n                        \n\n                \n                    \n                        The camera inside the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            effectsManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EffectsManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:46\n                            \n                        \n\n                \n                    \n                        Manager for managing three.js event display effects like outline pass and unreal bloom. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ignoreList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:40\n                            \n                        \n\n                \n                    \n                        Objects to be ignored on hovering over the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            infoLogger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         InfoLogger\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:49\n                            \n                        \n\n                \n                    \n                        Service for logging data to the information panel. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            isInit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:18\n                            \n                        \n\n                \n                    \n                        Is initialized. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onDocumentMouseDown\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:155\n                            \n                        \n\n                \n                    \n                        Function to call on mouse click when object selection is enabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onTouchDown\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:191\n                            \n                        \n\n                \n                    \n                        Function to call on touch when object selection is enabled.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        event\n                                                        \n                                                                Event containing touch data.\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onTouchMove\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:144\n                            \n                        \n\n                \n                    \n                        Function to call on mouse move when object selection is enabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            outlinePass\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     OutlinePass\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:44\n                            \n                        \n\n                \n                    \n                        Outline pass for highlighting the hovered over event display elements. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            preSelectionAntialias\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:51\n                            \n                        \n\n                \n                    \n                        Performance mode value before enabling selection. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            scene\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Scene\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:22\n                            \n                        \n\n                \n                    \n                        The scene used for event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            selectedObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:24\n                            \n                        \n\n                \n                    \n                        Object used to display the information of the selected 3D object. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            disableSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    disableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:129\n                \n            \n\n\n            \n                \n                    Disable selecting of event display elements and remove mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            enableSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    enableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:115\n                \n            \n\n\n            \n                \n                    Enable selecting of event display elements and set mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getActiveObjectId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getActiveObjectId()\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:98\n                \n            \n\n\n            \n                \n                    Get the uuid of the currently selected object.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        uuid of the currently selected object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightObject(uuid: string, objectsGroup: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:225\n                \n            \n\n\n            \n                \n                    Highlight the object with the given uuid by giving it an outline.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        uuid of the object.\n\n                                    \n                                \n                                \n                                    objectsGroup\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group of objects to be traversed for finding the object\nwith the given uuid.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(camera: Camera, scene: Scene, effectsManager: EffectsManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:73\n                \n            \n\n\n            \n                \n                    Initialize the selection manager.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene used for event display.\n\n                                    \n                                \n                                \n                                    effectsManager\n                                    \n                                                EffectsManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for managing three.js event display effects\nlike outline pass and unreal bloom.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            intersectObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    intersectObject(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:202\n                \n            \n\n\n            \n                \n                    Check if any object intersects on mouse move.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event containing data of the mouse move.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Intersected or hovered over object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSelectedObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelectedObject(selectedObject: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:90\n                \n            \n\n\n            \n                \n                    Set the currently selected object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selectedObject\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The currently selected object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelecting(enable: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:106\n                \n            \n\n\n            \n                \n                    Set if selecting is to be enabled or disabled.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    enable\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If selecting is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Vector2,\n  Raycaster,\n  Camera,\n  Scene, Object3D, DirectionalLight, AmbientLight, AxesHelper\n} from 'three';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass.js';\nimport { InfoLogger } from '../info-logger';\nimport { EffectsManager } from './effects-manager';\nimport { PrettySymbols } from '../helpers/pretty-symbols';\n\n/**\n * Manager for managing event display's selection related functions.\n */\nexport class SelectionManager {\n\n  /** Is initialized. */\n  private isInit: boolean;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The scene used for event display. */\n  private scene: Scene;\n  /** Object used to display the information of the selected 3D object. */\n  private selectedObject: { name: string; attributes: any[]; };\n  /** The currently selected object which is observable for changes. */\n  private activeObject = {\n    uuid: '',\n    callbacks: [],\n    update: function (uuid: string) {\n      this.uuid = uuid;\n      for (const callback of this.callbacks) {\n        callback(uuid);\n      }\n    },\n    onUpdate: function (callback: (uuid: string) => void) {\n      this.callbacks.push(callback);\n    }\n  };\n  /** Objects to be ignored on hovering over the scene. */\n  private ignoreList: string[];\n\n  // Post processing\n  /** Outline pass for highlighting the hovered over event display elements. */\n  private outlinePass: OutlinePass;\n  /** Manager for managing three.js event display effects like outline pass and unreal bloom. */\n  private effectsManager: EffectsManager;\n\n  /** Service for logging data to the information panel. */\n  private infoLogger: InfoLogger;\n  /** Performance mode value before enabling selection. */\n  private preSelectionAntialias: boolean;\n\n  /**\n   * Constructor for the selection manager.\n   */\n  constructor() {\n    this.isInit = false;\n    this.ignoreList = [\n      new AmbientLight().type,\n      new DirectionalLight().type,\n      new AxesHelper().type\n    ];\n  }\n\n  /**\n   * Initialize the selection manager.\n   * @param camera The camera inside the scene.\n   * @param scene The scene used for event display.\n   * @param effectsManager Manager for managing three.js event display effects\n   * like outline pass and unreal bloom.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  public init(\n    camera: Camera, scene: Scene,\n    effectsManager: EffectsManager,\n    infoLogger: InfoLogger\n  ) {\n    this.camera = camera;\n    this.scene = scene;\n    this.isInit = true;\n    this.infoLogger = infoLogger;\n    this.effectsManager = effectsManager;\n    this.outlinePass = this.effectsManager.addOutlinePassForSelection();\n  }\n\n  /**\n   * Set the currently selected object.\n   * @param selectedObject The currently selected object.\n   */\n  public setSelectedObject(selectedObject: { name: string, attributes: any[] }) {\n    this.selectedObject = selectedObject;\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): any {\n    return this.activeObject;\n  }\n\n  /**\n   * Set if selecting is to be enabled or disabled.\n   * @param enable If selecting is to be enabled or disabled.\n   */\n  public setSelecting(enable: boolean) {\n    if (this.isInit) {\n      enable ? this.enableSelecting() : this.disableSelecting();\n    }\n  }\n\n  /**\n   * Enable selecting of event display elements and set mouse move and click events.\n   */\n  private enableSelecting() {\n    document.getElementById('three-canvas').addEventListener('mousemove',\n      this.onTouchMove, true);\n    document.getElementById('three-canvas').addEventListener('click',\n      this.onDocumentMouseDown, true);\n    document.getElementById('three-canvas').addEventListener('touchstart',\n      this.onTouchDown);\n    this.preSelectionAntialias = this.effectsManager.antialiasing;\n    this.effectsManager.setAntialiasing(false);\n  }\n\n  /**\n   * Disable selecting of event display elements and remove mouse move and click events.\n   */\n  private disableSelecting() {\n    document.getElementById('three-canvas').removeEventListener('mousemove',\n      this.onTouchMove, true);\n    document.getElementById('three-canvas').removeEventListener('click',\n      this.onDocumentMouseDown, true);\n    document.getElementById('three-canvas').removeEventListener('touchstart',\n      this.onTouchDown);\n    this.outlinePass.selectedObjects = [];\n    this.effectsManager.setAntialiasing(this.preSelectionAntialias);\n  }\n\n\n  /**\n   * Function to call on mouse move when object selection is enabled.\n   */\n  private onTouchMove = (event: any) => {\n    const intersectedObject = this.intersectObject(event);\n    if (intersectedObject) {\n      if (this.ignoreList.includes(intersectedObject.type)) { return; }\n      this.outlinePass.selectedObjects = [intersectedObject];\n    }\n  }\n\n  /**\n   * Function to call on mouse click when object selection is enabled.\n   */\n  private onDocumentMouseDown = () => {\n    const intersectedObject = this.outlinePass.selectedObjects[0];\n    if (intersectedObject) {\n      this.selectedObject.name = intersectedObject.name;\n      this.selectedObject.attributes.splice(0, this.selectedObject.attributes.length);\n\n      this.activeObject.update(intersectedObject.uuid);\n\n      const prettyParams = PrettySymbols.getPrettyParams(intersectedObject.userData);\n\n      for (const key of Object.keys(prettyParams)) {\n        this.selectedObject.attributes.push({\n          attributeName: key,\n          attributeValue: prettyParams[key]\n        });\n      }\n\n      // Process properties of the selected object\n      const props = Object.keys(intersectedObject.userData).map((key) => {\n        // Only take properties that are a string or number (no arrays or objects)\n        if (['string', 'number'].includes(typeof (intersectedObject.userData[key]))) {\n          return key + '=' + intersectedObject.userData[key];\n        }\n      }).filter(val => val);\n      // Build the log text and add to the logger\n      const log = intersectedObject.name + (props.length > 0 ? ' with ' + props.join(', ') : '');\n      if (log) {\n        this.infoLogger.add(log, 'Clicked');\n      }\n    }\n  }\n\n  /**\n   * Function to call on touch when object selection is enabled.\n   * @param event Event containing touch data.\n   */\n  private onTouchDown = (event: TouchEvent) => {\n    event.preventDefault();\n    this.onTouchMove(event.targetTouches[0]);\n    this.onDocumentMouseDown();\n  }\n\n  /**\n   * Check if any object intersects on mouse move.\n   * @param event Event containing data of the mouse move.\n   * @returns Intersected or hovered over object.\n   */\n  private intersectObject(event: any): Object3D {\n    event.preventDefault?.();\n    const mouse = new Vector2();\n    const rendererElement = this.effectsManager.composer.renderer.domElement;\n    mouse.x = (event.clientX / rendererElement.clientWidth) * 2 - 1;\n    mouse.y = -(event.clientY / rendererElement.clientHeight) * 2 + 1;\n    const raycaster = new Raycaster();\n    raycaster.setFromCamera(mouse, this.camera);\n    raycaster.params.Line.threshold = 3;\n    const intersects = raycaster.intersectObjects(this.scene.children, true);\n\n    if (intersects.length > 0) {\n      // We want the closest one\n      return intersects[0].object;\n    }\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   * @param objectsGroup Group of objects to be traversed for finding the object\n   * with the given uuid.\n   */\n  public highlightObject(uuid: string, objectsGroup: Object3D) {\n    objectsGroup.traverse((object: any) => {\n      if (object.uuid === uuid) {\n        this.outlinePass.selectedObjects = [object];\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/State.html":{"url":"classes/State.html","title":"class - State","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  State\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                State of the particle.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dir\n                            \n                            \n                                maxStepSize\n                            \n                            \n                                p\n                            \n                            \n                                pathLength\n                            \n                            \n                                pos\n                            \n                            \n                                q\n                            \n                            \n                                stepSize\n                            \n                            \n                                unitC\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dir\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Vector3\n\n                        \n                    \n                    \n                        \n                            Default value : new Vector3(0, 0, 0)\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:134\n                            \n                        \n\n                \n                    \n                        Direction. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            maxStepSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:144\n                            \n                        \n\n                \n                    \n                        Max step size. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            p\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:136\n                            \n                        \n\n                \n                    \n                        Momentum. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pathLength\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:146\n                            \n                        \n\n                \n                    \n                        Path length.. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Vector3\n\n                        \n                    \n                    \n                        \n                            Default value : new Vector3(0, 0, 0)\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:132\n                            \n                        \n\n                \n                    \n                        Position. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            q\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:138\n                            \n                        \n\n                \n                    \n                        Charge. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            stepSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1000\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:142\n                            \n                        \n\n                \n                    \n                        Step size. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            unitC\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 3.3333\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:140\n                            \n                        \n\n                \n                    \n                        Unit. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(half_h)).add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir.clone().add(k1.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir.clone().add(k2.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(h)).add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir.clone().add(k3.clone().multiplyScalar(h)).cross(B_last).multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return h * (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z));\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    let fh: number = state.stepSize;\n    let fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(k1.clone().add(k2).add(k3).multiplyScalar(fh2 / 6));\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(k1.clone().add(k2.clone().multiplyScalar(2)).add(k3.clone().multiplyScalar(2)).add(k4).multiplyScalar(fh / 6));\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3, startDir: Vector3,\n    p: number, q: number,\n    mss: number = -1, plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3, dir: Vector3 }[] {\n    let rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    let result: { pos: Vector3, dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StateManager.html":{"url":"classes/StateManager.html","title":"class - StateManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StateManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/state-manager.ts\n        \n\n            \n                Description\n            \n            \n                A singleton manager for managing the scene's state.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                activeCamera\n                            \n                            \n                                clippingAngle\n                            \n                            \n                                clippingEnabled\n                            \n                            \n                                eventDisplay\n                            \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                phoenixMenuRoot\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                            \n                                loadStateFromFile\n                            \n                            \n                                loadStateFromJSON\n                            \n                            \n                                saveStateAsJSON\n                            \n                            \n                                setCamera\n                            \n                            \n                                setClippingAngle\n                            \n                            \n                                setClippingEnabled\n                            \n                            \n                                setEventDisplay\n                            \n                            \n                                setPhoenixMenuRoot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/state-manager.ts:20\n                            \n                        \n\n                \n                    \n                            Create the state manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            activeCamera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:18\n                            \n                        \n\n                \n                    \n                        The active camera. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clippingAngle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:16\n                            \n                        \n\n                \n                    \n                        Angle of the clipping. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clippingEnabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:14\n                            \n                        \n\n                \n                    \n                        Whether the clipping is enabled or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            eventDisplay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EventDisplay\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:20\n                            \n                        \n\n                \n                    \n                        The event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            instance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StateManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:10\n                            \n                        \n\n                \n                    \n                        Instance of the state manager. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phoenixMenuRoot\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:12\n                            \n                        \n\n                \n                    \n                        Root node of the phoenix menu. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getInstance\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:37\n                \n            \n\n\n            \n                \n                    Get the instance of state manager.\n\n\n                    \n                    \n                    \n                        Returns :         StateManager\n\n                    \n                    \n                        The state manager instance.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadStateFromFile\n                        \n                        \n                    \n                \n            \n            \n                \nloadStateFromFile(onFileRead?: (json?: object) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:90\n                \n            \n\n\n            \n                \n                    Load data from JSON file.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    onFileRead\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback with JSON file data when the file data is read.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadStateFromJSON\n                        \n                        \n                    \n                \n            \n            \n                \nloadStateFromJSON(json: string | object)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:117\n                \n            \n\n\n            \n                \n                    Load the state from JSON.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    json\n                                    \n                                            string | object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON for state.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveStateAsJSON\n                        \n                        \n                    \n                \n            \n            \n                \nsaveStateAsJSON()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:67\n                \n            \n\n\n            \n                \n                    Save the state of the event display as JSON.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setCamera\n                        \n                        \n                    \n                \n            \n            \n                \nsetCamera(camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:159\n                \n            \n\n\n            \n                \n                    Set the scene camera for state.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setClippingAngle\n                        \n                        \n                    \n                \n            \n            \n                \nsetClippingAngle(angle: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:151\n                \n            \n\n\n            \n                \n                    Set the angle of clipping.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    angle\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Angle fo clipping.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setClippingEnabled\n                        \n                        \n                    \n                \n            \n            \n                \nsetClippingEnabled(clipping: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:143\n                \n            \n\n\n            \n                \n                    Set the state of clipping.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clipping\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether the clipping is enabled or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setEventDisplay\n                        \n                        \n                    \n                \n            \n            \n                \nsetEventDisplay(eventDisplay: EventDisplay)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:167\n                \n            \n\n\n            \n                \n                    Set the event display.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventDisplay\n                                    \n                                                EventDisplay\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event display.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setPhoenixMenuRoot\n                        \n                        \n                    \n                \n            \n            \n                \nsetPhoenixMenuRoot(phoenixMenuRoot: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:45\n                \n            \n\n\n            \n                \n                    Set the root node of Phoenix menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phoenixMenuRoot\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Phoenix menu root node.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventDisplay } from \"../event-display\";\nimport { Camera } from \"three\";\nimport { PhoenixMenuNode } from \"../ui/phoenix-menu/phoenix-menu-node\";\n\n/**\n * A singleton manager for managing the scene's state.\n */\nexport class StateManager {\n  /** Instance of the state manager. */\n  private static instance: StateManager;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot: PhoenixMenuNode;\n  /** Whether the clipping is enabled or not. */\n  clippingEnabled: boolean;\n  /** Angle of the clipping. */\n  clippingAngle: number;\n  /** The active camera. */\n  activeCamera: Camera;\n  /** The event display. */\n  eventDisplay: EventDisplay;\n\n  /**\n   * Create the state manager.\n   * @returns The state manager instance.\n   */\n  constructor() {\n    if (StateManager.instance === undefined) {\n      StateManager.instance = this;\n    }\n    return StateManager.instance;\n  }\n\n  /**\n   * Get the instance of state manager.\n   * @returns The state manager instance.\n   */\n  static getInstance(): StateManager {\n    return StateManager.instance;\n  }\n\n  /**\n   * Set the root node of Phoenix menu.\n   * @param phoenixMenuRoot Phoenix menu root node.\n   */\n  setPhoenixMenuRoot(phoenixMenuRoot: PhoenixMenuNode) {\n    this.phoenixMenuRoot = phoenixMenuRoot;\n\n    if (this.phoenixMenuRoot) {\n      // Add save and load config buttons to the root node\n      this.phoenixMenuRoot.addConfig('button', {\n        label: 'Save state',\n        onClick: () => {\n          this.saveStateAsJSON();\n        }\n      }).addConfig('button', {\n        label: 'Load state',\n        onClick: () => {\n          this.loadStateFromFile();\n        }\n      });\n    }\n  }\n\n  /**\n   * Save the state of the event display as JSON.\n   */\n  saveStateAsJSON() {\n    const state: object = {\n      phoenixMenu: this.phoenixMenuRoot.getNodeState(),\n      eventDisplay: {\n        cameraPosition: this.activeCamera.position.toArray(),\n        clippingAngle: this.clippingEnabled ? this.clippingAngle : null\n      }\n    };\n\n    const blob = new Blob([JSON.stringify(state)], {\n      type: 'application/json'\n    });\n    const tempAnchor = document.createElement('a');\n    tempAnchor.href = URL.createObjectURL(blob);\n    tempAnchor.download = 'phoenix-config.json';\n    tempAnchor.click();\n    tempAnchor.remove();\n  }\n\n  /**\n   * Load data from JSON file.\n   * @param onFileRead Callback with JSON file data when the file data is read.\n   */\n  loadStateFromFile(onFileRead?: (json: object) => void) {\n    // Create a mock input file element and use that to read the file\n    let inputFile = document.createElement('input');\n    inputFile.type = 'file';\n    inputFile.accept = 'application/json';\n    inputFile.onchange = (e: any) => {\n      const configFile = e.target?.files[0];\n      const reader = new FileReader();\n      reader.onload = e => {\n        const jsonData = JSON.parse(e.target.result.toString());\n\n        onFileRead?.(jsonData);\n\n        this.loadStateFromJSON(jsonData);\n\n        inputFile.remove();\n        inputFile = null;\n      };\n      reader.readAsText(configFile);\n    }\n    inputFile.click();\n  }\n\n  /**\n   * Load the state from JSON.\n   * @param json JSON for state.\n   */\n  loadStateFromJSON(json: string | object) {\n    let jsonData: object;\n    if (typeof json === 'string') {\n      jsonData = JSON.parse(json);\n    } else {\n      jsonData = json;\n    }\n\n    if (jsonData['phoenixMenu']) {\n      this.phoenixMenuRoot.loadStateFromJSON(jsonData['phoenixMenu']);\n      this.phoenixMenuRoot.configActive = false;\n    }\n\n    if (jsonData['eventDisplay']) {\n      this.activeCamera.position.fromArray(jsonData['eventDisplay']?.['cameraPosition']);\n      if (jsonData['eventDisplay']?.['clippingAngle']) {\n        this.eventDisplay.getUIManager().setClipping(true);\n        this.eventDisplay.getUIManager().rotateClipping(jsonData['eventDisplay']['clippingAngle']);\n      }\n    }\n  }\n\n  /**\n   * Set the state of clipping.\n   * @param clipping Whether the clipping is enabled or not.\n   */\n  setClippingEnabled(clipping: boolean) {\n    this.clippingEnabled = clipping;\n  }\n\n  /**\n   * Set the angle of clipping.\n   * @param angle Angle fo clipping.\n   */\n  setClippingAngle(angle: number) {\n    this.clippingAngle = angle;\n  }\n\n  /**\n   * Set the scene camera for state.\n   * @param camera The camera.\n   */\n  setCamera(camera: Camera) {\n    this.activeCamera = camera;\n  }\n\n  /**\n   * Set the event display.\n   * @param eventDisplay The event display.\n   */\n  setEventDisplay(eventDisplay: EventDisplay) {\n    this.eventDisplay = eventDisplay;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrackmlLoader.html":{"url":"classes/TrackmlLoader.html","title":"class - TrackmlLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrackmlLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/trackml-loader.ts\n        \n\n            \n                Description\n            \n            \n                PhoenixLoader for processing and loading an event from TrackML.\n\n            \n\n            \n                Extends\n            \n            \n                        PhoenixLoader\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                hitData\n                            \n                            \n                                    Private\n                                particleData\n                            \n                            \n                                    Private\n                                truthData\n                            \n                            \n                                    Private\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Protected\n                                loadingManager\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getEventData\n                            \n                            \n                                    Public\n                                processHits\n                            \n                            \n                                    Public\n                                processParticles\n                            \n                            \n                                    Public\n                                processTruth\n                            \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/loaders/trackml-loader.ts:12\n                            \n                        \n\n                \n                    \n                            Instiantiate the TrackML loader.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            hitData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/trackml-loader.ts:8\n                            \n                        \n\n                \n                    \n                        Data containing Hits. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            particleData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/trackml-loader.ts:10\n                            \n                        \n\n                \n                    \n                        Data containing Particles. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            truthData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/trackml-loader.ts:12\n                            \n                        \n\n                \n                    \n                        Data containing truthy Particles. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:21\n\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:17\n\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            loadingManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LoadingManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:23\n\n                            \n                        \n\n                \n                    \n                        Loading manager for loadable resources \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:19\n\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventData(eventNum: string)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/trackml-loader.ts:81\n                \n            \n\n\n            \n                \n                    Get structured event data from the processed Hits, Truth data and Particles.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventNum\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event number.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processHits\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processHits(hits: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/trackml-loader.ts:28\n                \n            \n\n\n            \n                \n                    Process Hits to format and store them.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hits\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Hits to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processParticles\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processParticles(particles: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/trackml-loader.ts:44\n                \n            \n\n\n            \n                \n                    Process Particles to format and store them.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    particles\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Particles to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processTruth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processTruth(truth: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/trackml-loader.ts:65\n                \n            \n\n\n            \n                \n                    Process Truth data to format and store it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    truth\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Truth data to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:258\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[], extendEventDataTypeUI?: (typeFolder?: any,typeFolderPM?: PhoenixMenuNode) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:220\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                                \n                                    extendEventDataTypeUI\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A callback to add more options to event data type UI folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:40\n\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:100\n\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:79\n\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:338\n\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:63\n\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:297\n\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:280\n\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:121\n\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixLoader } from './phoenix-loader';\n\n/**\n * PhoenixLoader for processing and loading an event from TrackML.\n */\nexport class TrackmlLoader extends PhoenixLoader {\n  /** Data containing Hits. */\n  private hitData: any;\n  /** Data containing Particles. */\n  private particleData: any;\n  /** Data containing truthy Particles. */\n  private truthData: any;\n\n  /**\n   * Instiantiate the TrackML loader.\n   */\n  constructor() {\n    super();\n    this.hitData = [];\n    this.particleData = [];\n    this.truthData = {};\n  }\n\n  /**\n   * Process Hits to format and store them.\n   * @param hits Hits to be processed.\n   */\n  public processHits(hits: any) {\n    const data = hits.split('\\n');\n    console.log('Event has this many hits:', data.length);\n\n    let values;\n    // format is: hit_id,x,y,z,volume_id,layer_id,module_id\n    for (let line = 1; line \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VRManager.html":{"url":"classes/VRManager.html","title":"class - VRManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VRManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/vr-manager.ts\n        \n\n            \n                Description\n            \n            \n                VR manager for VR related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraGroup\n                            \n                            \n                                    Private\n                                controller1\n                            \n                            \n                                    Private\n                                controller2\n                            \n                            \n                                    Private\n                                controllerGrip1\n                            \n                            \n                                    Private\n                                controllerGrip2\n                            \n                            \n                                    Private\n                                currentVRSession\n                            \n                            \n                                    Private\n                                onControllerSelectEnd\n                            \n                            \n                                    Private\n                                onControllerSelectStart\n                            \n                            \n                                    Private\n                                onSessionEnded\n                            \n                            \n                                    Private\n                                onVRSessionEnded\n                            \n                            \n                                    Private\n                                onVRSessionStarted\n                            \n                            \n                                    Private\n                                renderer\n                            \n                            \n                                    Static\n                                    Readonly\n                                SESSION_TYPE\n                            \n                            \n                                    Private\n                                vrActive\n                            \n                            \n                                    Public\n                                vrCamera\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                endVRSession\n                            \n                            \n                                    Public\n                                getCameraGroup\n                            \n                            \n                                    Public\n                                getVRCamera\n                            \n                            \n                                    Public\n                                isVRActive\n                            \n                            \n                                    Private\n                                moveInDirection\n                            \n                            \n                                    Private\n                                setupVRControls\n                            \n                            \n                                    Public\n                                setVRSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cameraGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Group\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:24\n                            \n                        \n\n                \n                    \n                        Group containing the the camera for VR. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controller1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:29\n                            \n                        \n\n                \n                    \n                        The VR controller for movement. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controller2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:31\n                            \n                        \n\n                \n                    \n                        The VR controller for movement. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controllerGrip1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:33\n                            \n                        \n\n                \n                    \n                        The VR controller representation \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controllerGrip2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:35\n                            \n                        \n\n                \n                    \n                        The VR controller representation \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            currentVRSession\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:20\n                            \n                        \n\n                \n                    \n                        Currently active VR session. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onControllerSelectEnd\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onControllerSelectStart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onSessionEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:22\n                            \n                        \n\n                \n                    \n                        Callback to call when the VR session ends. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onVRSessionEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:82\n                            \n                        \n\n                \n                    \n                        Callback when the VR session ends.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onVRSessionStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:72\n                            \n                        \n\n                \n                    \n                        Callback for when the VR session is started.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        session\n                                                        \n                                                                The VR session.\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            renderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:18\n                            \n                        \n\n                \n                    \n                        Renderer to set the VR session for. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            SESSION_TYPE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'immersive-vr'\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:14\n                            \n                        \n\n                \n                    \n                        Session type to use for VR. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            vrActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:16\n                            \n                        \n\n                \n                    \n                        Whether the VR is currently active or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            vrCamera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:26\n                            \n                        \n\n                \n                    \n                        The camera used by VR. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            endVRSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    endVRSession()\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:98\n                \n            \n\n\n            \n                \n                    End the current VR session.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCameraGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraGroup(camera?: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:116\n                \n            \n\n\n            \n                \n                    Get the group containing the camera for VR.\nVR camera works by adding a Group with Camera to the scene.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Camera which is to be cloned for VR use.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Group\n\n                    \n                    \n                        The camera group used in VR mode.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getVRCamera\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVRCamera()\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:136\n                \n            \n\n\n            \n                \n                    Get the camera used by VR.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The camera used by VR.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isVRActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isVRActive()\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:106\n                \n            \n\n\n            \n                \n                    Is the VR currently active or not.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        A boolean for whether the VR is active or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            moveInDirection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    moveInDirection(direction: Vector3, stepDistance: number)\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:201\n                \n            \n\n\n            \n                \n                    Move the camera in the given direction.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    direction\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Direction to move towards.\n\n                                    \n                                \n                                \n                                    stepDistance\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Distance to move by.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            setupVRControls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setupVRControls()\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:143\n                \n            \n\n\n            \n                \n                    Set up VR controls for moving around the event display.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setVRSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setVRSession(renderer: WebGLRenderer, onSessionStarted?: () => void, onSessionEnded?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:46\n                \n            \n\n\n            \n                \n                    Set and configure the VR session.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer to set the VR session for.\n\n                                    \n                                \n                                \n                                    onSessionStarted\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the VR session starts.\n\n                                    \n                                \n                                \n                                    onSessionEnded\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the VR session ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Group, Camera, Vector3, BufferGeometry, Line, Scene } from \"three\";\nimport { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory'\n\n// NOTE: This was created on 29/08/2020\n// It might get outdated given how WebXR is still a work in progress\n\n// LAST UPDATED ON 28/11/2020\n\n/**\n * VR manager for VR related operations.\n */\nexport class VRManager {\n  /** Session type to use for VR. */\n  static readonly SESSION_TYPE: string = 'immersive-vr';\n  /** Whether the VR is currently active or not. */\n  private vrActive: boolean = false;\n  /** Renderer to set the VR session for. */\n  private renderer: WebGLRenderer;\n  /** Currently active VR session. */\n  private currentVRSession: any = null;\n  /** Callback to call when the VR session ends. */\n  private onSessionEnded: () => void;\n  /** Group containing the the camera for VR. */\n  public cameraGroup: Group;\n  /** The camera used by VR. */\n  public vrCamera: Camera;\n\n  /** The VR controller for movement. */\n  private controller1: any;\n  /** The VR controller for movement. */\n  private controller2: any;\n  /** The VR controller representation */\n  private controllerGrip1: any;\n  /** The VR controller representation */\n  private controllerGrip2: any;\n\n  private onControllerSelectStart: () => void;\n  private onControllerSelectEnd: () => void;\n\n  /**\n   * Set and configure the VR session.\n   * @param renderer Renderer to set the VR session for.\n   * @param onSessionStarted Callback to call when the VR session starts.\n   * @param onSessionEnded Callback to call when the VR session ends.\n   */\n  public setVRSession(\n    renderer: WebGLRenderer,\n    onSessionStarted?: () => void,\n    onSessionEnded?: () => void\n  ) {\n    this.renderer = renderer;\n    this.onSessionEnded = onSessionEnded;\n\n    if ((navigator as any)?.xr) {\n      const sessionInit = {\n        optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking']\n      };\n      (navigator as any)?.xr?.requestSession(VRManager.SESSION_TYPE, sessionInit)\n        .then((session: any) => {\n          this.onVRSessionStarted(session);\n          onSessionStarted?.();\n        });\n\n      this.setupVRControls();\n    }\n  }\n\n  /**\n   * Callback for when the VR session is started.\n   * @param session The VR session.\n   */\n  private onVRSessionStarted = (session: any) => {\n    this.vrActive = true;\n    session.addEventListener('end', this.onVRSessionEnded);\n    this.renderer.xr.setSession(session);\n    this.currentVRSession = session;\n  }\n\n  /**\n   * Callback when the VR session ends.\n   */\n  private onVRSessionEnded = () => {\n    this.onSessionEnded?.();\n\n    this.vrActive = false;\n    this.currentVRSession?.removeEventListener('end', this.onVRSessionEnded);\n    this.currentVRSession = null;\n\n    this.controller1?.removeEventListener('selectstart', this.onControllerSelectStart);\n    this.controller1?.removeEventListener('selectend', this.onControllerSelectEnd);\n\n    this.cameraGroup = undefined;\n  }\n\n  /**\n   * End the current VR session.\n   */\n  public endVRSession() {\n    this.currentVRSession?.end();\n  }\n\n  /**\n   * Is the VR currently active or not.\n   * @returns A boolean for whether the VR is active or not.\n   */\n  public isVRActive(): boolean {\n    return this.vrActive;\n  }\n\n  /**\n   * Get the group containing the camera for VR.\n   * VR camera works by adding a Group with Camera to the scene.\n   * @param camera Camera which is to be cloned for VR use.\n   * @returns The camera group used in VR mode.\n   */\n  public getCameraGroup(camera?: Camera): Group {\n    // Set up the camera position in the VR - Adding a group with camera does it\n    if (!this.cameraGroup) {\n      this.cameraGroup = new Group();\n    }\n    if (camera && this.vrActive) {\n      this.vrCamera = this.renderer.xr.getCamera(new Camera()).copy(camera.clone());\n      this.vrCamera.name = 'VR_CAMERA';\n\n      this.cameraGroup.position.copy(this.vrCamera.position);\n      this.cameraGroup.add(this.vrCamera);\n    }\n\n    return this.cameraGroup;\n  }\n\n  /**\n   * Get the camera used by VR.\n   * @returns The camera used by VR.\n   */\n  public getVRCamera() {\n    return this.vrCamera;\n  }\n\n  /**\n   * Set up VR controls for moving around the event display.\n   */\n  private setupVRControls() {\n    // Get the controllers\n    this.controller1 = this.renderer.xr.getController(0);\n    this.getCameraGroup().add(this.controller1);\n    this.controller2 = this.renderer.xr.getController(1);\n    this.getCameraGroup().add(this.controller2);\n\n    const controllerModelFactory = new XRControllerModelFactory();\n    this.controllerGrip1 = this.renderer.xr.getControllerGrip(0);\n    this.controllerGrip1.add(controllerModelFactory.createControllerModel(this.controllerGrip1));\n    this.getCameraGroup().add(this.controllerGrip1);\n\n    this.controllerGrip2 = this.renderer.xr.getControllerGrip(1);\n    this.controllerGrip2.add(controllerModelFactory.createControllerModel(this.controllerGrip2));\n    this.getCameraGroup().add(this.controllerGrip2);\n\n    const geometry = new BufferGeometry().setFromPoints([new Vector3(0, 0, 0), new Vector3(0, 0, - 1)]);\n\n    const line = new Line(geometry);\n    line.name = 'line';\n    line.scale.z = 50;\n\n    this.controller1.add(line.clone());\n    this.controller2.add(line.clone());\n\n    // Set up movement\n    \n    // Distance for a single step\n    const stepDistance = 30;\n    // Unit vector in camera direction\n    const direction = new Vector3();\n    // Interval ID for the movement interval\n    let intervalId: NodeJS.Timeout;\n\n    this.onControllerSelectStart = () => {\n      console.log('Select: c1 position ' + this.controller1.position.toArray().join(', '));\n      console.log('Select: CG position ' + this.cameraGroup.position.toArray().join(', '));\n\n      // Start movement in camera direction\n      intervalId = setInterval(() => {\n        this.moveInDirection(direction, stepDistance);\n      }, 20);\n    };\n\n    this.onControllerSelectEnd = () => {\n      // Stop the movement\n      clearInterval(intervalId);\n    };\n\n    this.controller1.addEventListener('selectstart', this.onControllerSelectStart);\n    this.controller1.addEventListener('selectend', this.onControllerSelectEnd);\n  }\n\n  /**\n   * Move the camera in the given direction.\n   * @param direction Direction to move towards.\n   * @param stepDistance Distance to move by.\n   */\n  private moveInDirection(direction: Vector3, stepDistance: number) {\n    // Get the direction the controller is facing\n    //! this.controller.getWorldDirection(direction);\n\n    // Get direction the camera is facing\n    this.vrCamera?.getWorldDirection(direction);\n\n    // Move the camera in the given direction\n    this.cameraGroup.position.addScaledVector(direction, stepDistance);\n    this.vrCamera.position.addScaledVector(direction, stepDistance);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Window.html":{"url":"interfaces/Window.html","title":"interface - Window","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Window\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event-display.ts\n        \n\n            \n                Description\n            \n            \n                Window interface for adding objects to the window object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        EventDisplay\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        EventDisplay\n                                    \n                                \n                                \n                                    \n                                        EventDisplay:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    EventDisplay object containing event display related functions. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ThreeManager } from './three/index';\nimport { UIManager } from './ui/index';\nimport { InfoLogger } from './info-logger';\nimport { Configuration } from './extras/configuration';\nimport { StateManager } from './managers/state-manager';\nimport { JiveXMLLoader } from './loaders/jivexml-loader';\nimport { LoadingManager } from './managers/loading-manager';\nimport { PhoenixLoader } from './loaders/phoenix-loader';\n\ndeclare global {\n  /**\n   * Window interface for adding objects to the window object.\n   */\n  interface Window {\n    /** EventDisplay object containing event display related functions. */\n    EventDisplay: any;\n  }\n}\n\n/**\n * Phoenix event display class for managing detector geometries and event data.\n */\nexport class EventDisplay {\n  /** Configuration for preset views and event data loader. */\n  private configuration: Configuration;\n  /** An object containing event data. */\n  private eventsData: any;\n  /** Array containing callbacks to be called when events change. */\n  private onEventsChange: ((events: any) => void)[] = [];\n  /** Array containing callbacks to be called when the displayed event changes. */\n  private onDisplayedEventChange: ((nowDisplayingEvent: any) => void)[] = [];\n  /** Three manager for three.js operations. */\n  private graphicsLibrary: ThreeManager;\n  /** Info logger for storing event display logs. */\n  private infoLogger: InfoLogger;\n  /** UI manager for UI menu. */\n  private ui: UIManager;\n  /** Loading manager for loadable resources */\n  private loadingManager: LoadingManager;\n\n  /**\n   * Create the Phoenix event display and intitialize all the elements.\n   * @param configuration Configuration used to customize different aspects.\n   */\n  constructor(configuration?: Configuration) {\n    this.loadingManager = new LoadingManager();\n    this.infoLogger = new InfoLogger();\n    this.graphicsLibrary = new ThreeManager(this.infoLogger);\n    this.ui = new UIManager(this.graphicsLibrary);\n    if (configuration) {\n      this.init(configuration);\n    }\n  }\n\n  /**\n   * Initialize all the Phoenix event display elements.\n   * @param configuration Configuration used to customize different aspects.\n   */\n  public init(configuration: Configuration) {\n    this.configuration = configuration;\n\n    // Initialize the three manager with configuration\n    this.graphicsLibrary.init(configuration);\n    // Initialize the UI with configuration\n    this.ui.init(configuration);\n    // Set up for the state manager\n    new StateManager().setEventDisplay(this);\n\n    // Animate loop\n    const uiLoop = () => {\n      this.ui.updateUI();\n    };\n    this.graphicsLibrary.setAnimationLoop(uiLoop);\n\n    // Allow adding elements through console\n    this.enableEventDisplayConsole();\n    // Allow keyboard controls\n    this.enableKeyboardControls();\n    // Initialize event with data from URL if there is any\n    this.initEventFromURL(\n      configuration.defaultEventFile?.eventFile,\n      configuration.defaultEventFile?.eventType\n    );\n  }\n\n  /**\n   * Initialize VR.\n   * @param onSessionEnded Callback when the VR session ends.\n   */\n  public initVR(onSessionEnded?: () => void) {\n    this.graphicsLibrary.initVRSession(onSessionEnded);\n  }\n\n  /**\n   * End VR and remove VR settings.\n   */\n  public endVR() {\n    this.graphicsLibrary.endVRSession();\n  }\n\n  /**\n   * Receives an object containing all the eventKeys and saves it.\n   * Then it loads by default the first event.\n   * @param eventsData Object containing the event data.\n   * @returns Array of strings containing the keys of the eventsData object.\n   */\n  public parsePhoenixEvents(eventsData: any): string[] {\n    this.eventsData = eventsData;\n    const eventKeys = this.configuration.eventDataLoader.getEventsList(eventsData);\n    this.loadEvent(eventKeys[0]);\n    this.onEventsChange.forEach(callback => callback(eventKeys));\n    return eventKeys;\n  }\n\n  /**\n   * Receives an object containing one event and builds the different collections\n   * of physics objects.\n   * @param eventData Object containing the event data.\n   */\n  public buildEventDataFromJSON(eventData: any) {\n    // Creating UI folder\n    this.ui.addEventDataFolder();\n    // Clearing existing event data\n    this.graphicsLibrary.clearEventData();\n    // Build data and add to scene\n    this.configuration.eventDataLoader.buildEventData(eventData, this.graphicsLibrary, this.ui, this.infoLogger);\n    this.onDisplayedEventChange.forEach((callback) => callback(eventData));\n  }\n\n  /**\n   * Receives a string representing the key of an event and loads\n   * the event associated with that key.\n   * @param eventKey String that represents the event in the eventsData object.\n   */\n  public loadEvent(eventKey: any) {\n    const event = this.eventsData[eventKey];\n\n    if (event) {\n      this.buildEventDataFromJSON(event);\n    }\n  }\n\n  /**\n   * Get the three manager responsible for three.js functions.\n   * @returns The three.js manager.\n   */\n  public getThreeManager() {\n    return this.graphicsLibrary;\n  }\n\n  /**\n   * Get the UI manager responsible for UI related functions.\n   * @returns The UI manager.\n   */\n  public getUIManager() {\n    return this.ui;\n  }\n\n  /**\n   * Get the info logger containing event display logs.\n   * @returns The info logger instance being used by the event display.\n   */\n  public getInfoLogger() {\n    return this.infoLogger;\n  }\n\n  /**\n   * Get the loading manager for managing loadable items.\n   * @returns The loading manager.\n   */\n  public getLoadingManager() {\n    return this.loadingManager;\n  }\n\n  // **********************\n  // * LOADING GEOMETRIES *\n  // **********************\n\n  /**\n   * Loads an OBJ (.obj) geometry from the given filename\n   * and adds it to the dat.GUI menu.\n   * @param filename Path to the geometry.\n   * @param name Name given to the geometry.\n   * @param color Color to initialize the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to.\n   * @param doubleSided If true, render both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   * @param setFlat Whether object should be flat-shaded or not.\n   * @returns Promise for loading the geometry.\n   */\n  public loadOBJGeometry(\n    filename: string,\n    name: string, color: any,\n    menuNodeName?: string, doubleSided?: boolean,\n    initiallyVisible: boolean = true,\n    setFlat: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`obj_geom_${name}`);\n    this.ui.addGeometry(name, color, menuNodeName, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded OBJ geometry');\n    return this.graphicsLibrary.loadOBJGeometry(filename, name, color, doubleSided, initiallyVisible, setFlat);\n  }\n\n  /**\n   * Parses and loads an OBJ geometry from the given content\n   * and adds it to the dat.GUI menu.\n   * @param content Content of the OBJ geometry.\n   * @param name Name given to the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public parseOBJGeometry(content: string, name: string,\n    menuNodeName?: string, initiallyVisible: boolean = true) {\n    this.loadingManager.addLoadableItem(`parse_obj_${name}`);\n    this.graphicsLibrary.parseOBJGeometry(content, name, initiallyVisible);\n    this.ui.addGeometry(name, 0x000fff, menuNodeName, initiallyVisible);\n  }\n\n  /**\n   * Exports scene to OBJ file format.\n   */\n  public exportToOBJ() {\n    this.graphicsLibrary.exportSceneToOBJ();\n    this.infoLogger.add('Exported scene to OBJ');\n  }\n\n  /**\n   * Parse and load an event from the Phoenix file format (.phnx).\n   * @param input Content containing the JSON with event data\n   * and other configuration.\n   * @returns Promise for loading the geometry.\n   */\n  public parsePhoenixDisplay(input: any): Promise {\n    const phoenixScene = JSON.parse(input);\n\n    if (phoenixScene.sceneConfiguration && phoenixScene.scene) {\n      // Creating UI folder\n      this.ui.addEventDataFolder();\n      // Clearing existing event data\n      this.graphicsLibrary.clearEventData();\n      // Add to scene\n      this.loadSceneConfiguration(phoenixScene.sceneConfiguration);\n\n      this.loadingManager.addLoadableItem(`parse_gltf_${name}`);\n      return this.graphicsLibrary.parseGLTFGeometry(phoenixScene.scene);\n    }\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   */\n  public exportPhoenixDisplay() {\n    this.graphicsLibrary.exportPhoenixScene();\n  }\n\n  /**\n   * Parses and loads a geometry in GLTF (.gltf) format.\n   * @param input JSON containing the scene as in GLTF (.gltf) format.\n   * @returns Promise for loading the geometry.\n   */\n  public parseGLTFGeometry(input: any): Promise {\n    const scene = JSON.parse(input);\n    this.loadingManager.addLoadableItem(`parse_gltf_${name}`);\n    return this.graphicsLibrary.parseGLTFGeometry(scene);\n  }\n\n  /**\n   * Loads a GLTF (.gltf) scene/geometry from the given URL.\n   * and adds it to the dat.GUI menu.\n   * @param url URL to the GLTF (.gltf) file.\n   * @param name Name of the loaded scene/geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to.\n   * @param scale Scale of the geometry.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   * @returns Promise for loading the geometry.\n   */\n  public loadGLTFGeometry(\n    url: any, name: string,\n    menuNodeName?: string,\n    scale?: number,\n    initiallyVisible: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`gltf_geom_${name}`);\n    this.ui.addGeometry(name, undefined, menuNodeName, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded GLTF geometry');\n    return this.graphicsLibrary.loadGLTFGeometry(url, name, scale, initiallyVisible);\n  }\n\n  /**\n   * Loads geometries from JSON.\n   * @param json JSON or URL to JSON file of the geometry.\n   * @param name Name of the geometry or group of geometries.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   * @returns Promise for loading the geometry.\n   */\n  public loadJSONGeometry(\n    json: string | object, name: string,\n    menuNodeName?: string,\n    scale?: number, doubleSided?: boolean,\n    initiallyVisible: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`json_geom_${name}`);\n    this.ui.addGeometry(name, undefined, menuNodeName, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded JSON geometry');\n    return this.graphicsLibrary.loadJSONGeometry(json, name, scale, doubleSided, initiallyVisible);\n  }\n\n  /**\n   * Load JSON geometry from JSRoot.\n   * @param JSROOT JSRoot object containing all the JSROOT functions.\n   * @param url URL of the JSRoot geometry file.\n   * @param name Name of the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadRootJSONGeometry(\n    JSROOT: any, url: string,\n    name: string, menuNodeName?: string,\n    scale?: number, doubleSided?: boolean,\n    initiallyVisible: boolean = true\n  ) {\n    this.loadingManager.addLoadableItem('root_json_geom');\n    JSROOT.NewHttpRequest(url, 'object', (obj: any) => {\n      this.loadJSONGeometry(JSROOT.GEO.build(obj, { dflt_colors: true }).toJSON(),\n        name, menuNodeName, scale, doubleSided, initiallyVisible);\n      this.loadingManager.itemLoaded('root_json_geom');\n    }).send();\n  }\n\n  /**\n   * Load ROOT geometry from JSRoot.\n   * @param JSROOT JSRoot object containing all the JSROOT functions.\n   * @param url URL of the JSRoot file.\n   * @param objectName Name of the object inside the \".root\" file.\n   * @param name Name of the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadRootGeometry(JSROOT: any, url: string, objectName: string,\n    name: string, menuNodeName?: string, scale?: number, doubleSided?: boolean,\n    initiallyVisible: boolean = true) {\n    if (url.indexOf('.root') > 0) {\n      JSROOT.OpenFile(url, (file: any) => {\n        file.ReadObject(objectName, (obj: any) => {\n          this.loadJSONGeometry(JSROOT.GEO.build(obj, { dflt_colors: true }).toJSON(),\n            name, menuNodeName, scale, doubleSided, initiallyVisible);\n        });\n      });\n    }\n  }\n\n  /**\n   * Build Geometry from thr passed parameters, where \n   * @param parameters \n   */\n  public buildGeometryFromParameters(parameters: any): void {\n    this.graphicsLibrary.addGeometryFromParameters(parameters);\n  }\n\n  /**\n   * Zoom all the cameras by a specific zoom factor.\n   * The factor may either be greater (zoom in) or smaller (zoom out) than 1.\n   * @param zoomFactor The factor to zoom by.\n   * @param zoomTime The time it takes for a zoom animation to complete.\n   */\n  public zoomTo(zoomFactor: number, zoomTime: number) {\n    this.graphicsLibrary.zoomTo(zoomFactor, zoomTime);\n  }\n\n\n\n  /**\n   * Processes event data and geometry for Loading the scene\n   * from Phoenix file format (.phnx).\n   * @param sceneConfiguration Scene configuration containingevent data and detector geometry.\n   */\n  private loadSceneConfiguration(sceneConfiguration: { eventData: {}; geometries: [] }) {\n    for (const objectType of Object.keys(sceneConfiguration.eventData)) {\n      const typeFolder = this.ui.addEventDataTypeFolder(objectType);\n      const collections = sceneConfiguration.eventData[objectType];\n      for (const collection of collections) {\n        this.ui.addCollection(typeFolder, collection);\n      }\n    }\n\n    for (const geom of sceneConfiguration.geometries) {\n      this.ui.addGeometry(geom, '#ffffff');\n    }\n  }\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  public getCollection(collectionName: string) {\n    return this.configuration.eventDataLoader.getCollection(collectionName);\n  }\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  public getCollections(): string[] {\n    return this.configuration.eventDataLoader.getCollections();\n  }\n\n  /**\n   * Add a callback to onDisplayedEventChange array to call\n   * the callback on changes to the displayed event.\n   * @param callback Callback to be added to the onDisplayedEventChange array.\n   */\n  public listenToDisplayedEventChange(callback: (event) => any) {\n    this.onDisplayedEventChange.push(callback);\n  }\n\n  /**\n   * Add a callback to onEventsChange array to call\n   * the callback on changes to the events.\n   * @param callback Callback to be added to the onEventsChange array.\n   */\n  public listenToLoadedEventsChange(callback: (events) => any) {\n    this.onEventsChange.push(callback);\n  }\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  public getEventMetadata(): any[] {\n    return this.configuration.eventDataLoader.getEventMetadata();\n  }\n\n  /**\n   * Enables calling specified event display methods in console.\n   */\n  private enableEventDisplayConsole() {\n    // Defining an EventDisplay object in window to access methods through console\n    window.EventDisplay = {\n      loadGLTFGeometry: (sceneUrl: string, name: string) => {\n        this.loadGLTFGeometry(sceneUrl, name);\n      },\n      loadOBJGeometry: (filename: string, name: string, colour: any,\n        menuNodeName: string, doubleSided: boolean) => {\n        this.loadOBJGeometry(filename, name, colour, menuNodeName, doubleSided);\n      },\n      loadJSONGeometry: (json: string | object, name: string, menuNodeName: string,\n        scale?: number, doubleSided?: boolean, initiallyVisible: boolean = true) => {\n        this.loadJSONGeometry(json, name, menuNodeName, scale, doubleSided, initiallyVisible);\n      },\n      buildGeometryFromParameters: (parameters: object) => this.buildGeometryFromParameters(parameters)\n    };\n  }\n\n  /**\n   * Sets the renderer to be used to render the event display on the overlayed canvas.\n   * @param overlayCanvas An HTML canvas on which the overlay renderer is to be set.\n   */\n  public renderOverlay(overlayCanvas: HTMLCanvasElement) {\n    this.graphicsLibrary.setOverlayRenderer(overlayCanvas);\n  }\n\n  /**\n   * Initializes the object which will show information of the selected geometry/event data.\n   * @param selectedObject Object to display the data.\n   */\n  public allowSelection(selectedObject: { name: string, attributes: any[] }) {\n    this.graphicsLibrary.setSelectedObjectDisplay(selectedObject);\n  }\n\n  /**\n   * Toggles the ability of selecting geometries/event data by clicking on the screen.\n   * @param enable Value to enable or disable the functionality.\n   */\n  public enableSelecting(enable: boolean) {\n    this.graphicsLibrary.enableSelecting(enable);\n  }\n\n  /**\n   * Fixes the camera position of the overlay view.\n   * @param fixed Whether the overlay view is to be fixed or not.\n   */\n  public fixOverlayView(fixed: boolean) {\n    this.graphicsLibrary.fixOverlayView(fixed);\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): any {\n    return this.graphicsLibrary.getActiveObjectId();\n  }\n\n  /**\n   * Move the camera to look at the object with the given uuid\n   * and highlight it.\n   * @param uuid uuid of the object.\n   */\n  public lookAtObject(uuid: string) {\n    this.graphicsLibrary.lookAtObject(uuid);\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   */\n  public highlightObject(uuid: string) {\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n\n  /**\n   * Enable keyboard controls for the event display.\n   */\n  public enableKeyboardControls() {\n    this.ui.enableKeyboardControls();\n    this.graphicsLibrary.enableKeyboardControls();\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void) {\n    this.graphicsLibrary\n      .animateThroughEvent(startPos, tweenDuration, onAnimationEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.graphicsLibrary.animateEventWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.graphicsLibrary.animateClippingWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Initialize the event display with event data and configuration from URL.\n   * (Only JiveXML and JSON)\n   * @param defaultEventPath Default event path to fallback to if none in URL.\n   * @param defaultEventType Default event type to fallback to if none in URL.\n   */\n  public initEventFromURL(defaultEventPath?: string, defaultEventType?: string) {\n    const locationHref = window.location.href;\n    const urlParams = new URLSearchParams(locationHref.substr(locationHref.lastIndexOf('?')));\n\n    let file: string, type: string;\n\n    if (!urlParams.get('file') || !urlParams.get('type')) {\n      file = defaultEventPath;\n      type = defaultEventType;\n    } else {\n      file = urlParams.get('file');\n      type = urlParams.get('type').toLowerCase();\n    }\n\n    // Load config from URL\n    const loadConfig = () => {\n      if (urlParams.get('config') && ('fetch' in window)) {\n        this.loadingManager.addLoadableItem('url_config');\n        fetch(urlParams.get('config'))\n          .then(res => res.json())\n          .then(jsonState => {\n            const stateManager = new StateManager();\n            stateManager.loadStateFromJSON(jsonState);\n          }).finally(() => {\n            this.loadingManager.itemLoaded('url_config');\n          });\n      }\n    }\n\n    if (file && type && ('fetch' in window)) {\n      this.loadingManager.addLoadableItem('url_event');\n      fetch(file)\n        .then(res => type === 'jivexml' ? res.text() : res.json())\n        .then((res: object | string) => {\n          if (type === 'jivexml') {\n            const loader = new JiveXMLLoader();\n            this.configuration.eventDataLoader = loader;\n            // Parse the JSON to extract events and their data\n            loader.process(res);\n            const eventData = loader.getEventData();\n            this.buildEventDataFromJSON(eventData);\n          } else {\n            this.configuration.eventDataLoader = new PhoenixLoader();\n            this.parsePhoenixEvents(res);\n          }\n        }).catch((error) => {\n          this.getInfoLogger().add('Could not find the file specified in URL.', 'Error');\n          console.error('Could not find the file specified in URL.', error);\n        }).finally(() => {\n          // Load config from URL after loading the event\n          loadConfig();\n          this.loadingManager.itemLoaded('url_event');\n        });\n    } else {\n      loadConfig();\n    }\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file.\nSee Conventional Commits for commit guidelines.\n1.1.0 (2020-11-07)\nBug Fixes\n\napp: cut filter failed if value return was zero (0a26fea)\napp: cut should be pT, not mom (73b7c27)\napp: fix attribute pipe (0980379)\napp: fix tests (f87c587)\napp: pT should always be positive (3918159)\nevent-display: add optional chaining to CMS event info (fixes tests) (5283e9a)\nevent-display: fix geometry too big in overlay view (c7a35db)\nevent-display: fix URL event not working with hash routes (9eb21f5)\nevent-display: Formatted correctly (b46c49f)\nevent-display: use optional chaining in CMS loader (cfb1b6a)\nVR: Fix bugged scene in VR mode (9efd9ca)\n\nFeatures\n\napp: Option to load config from URL in ATLAS (1906976)\napp: phoenix-ui-components library (17909eb)\napp: yet another MAJOR refactoring (1261358)\nevent-display: add defaultView to configuration (612205c)\nevent-display: implicitly load event data from URL (9e3dc20)\nevent-display: state manager for managing event display state for save and load (7d1ca22)\n\n1.0.2 (2020-10-05)\n\nComplete deployment set up (399ac77)\n\n1.0.1 (2020-10-05)\nNote: Version bump only for package phoenix-event-display\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/event-data-loader.ts\n            \n            interface\n            EventDataLoader\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/event-display.ts\n            \n            class\n            EventDisplay\n            \n                100 %\n                (51/51)\n            \n        \n        \n            \n                \n                src/event-display.ts\n            \n            interface\n            Window\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/extras/configuration.ts\n            \n            interface\n            Configuration\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/extras/cut.model.ts\n            \n            class\n            Cut\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/extras/preset-view.model.ts\n            \n            class\n            PresetView\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/helpers/constants.ts\n            \n            variable\n            EVENT_DATA_TYPE_COLORS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/pretty-symbols.ts\n            \n            class\n            PrettySymbols\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/helpers/rk-helper.ts\n            \n            class\n            RKHelper\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            Field\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            RungeKutta\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            State\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/info-logger.ts\n            \n            class\n            InfoLogger\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/loaders/cms-loader.ts\n            \n            class\n            CMSLoader\n            \n                100 %\n                (30/30)\n            \n        \n        \n            \n                \n                src/loaders/jivexml-loader.ts\n            \n            class\n            JiveXMLLoader\n            \n                100 %\n                (31/31)\n            \n        \n        \n            \n                \n                src/loaders/jsroot-event-loader.ts\n            \n            class\n            JSRootEventLoader\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                src/loaders/lhcb-loader.ts\n            \n            class\n            LHCbLoader\n            \n                100 %\n                (20/20)\n            \n        \n        \n            \n                \n                src/loaders/objects/cms-objects.ts\n            \n            class\n            CMSObjects\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/loaders/objects/phoenix-objects.ts\n            \n            class\n            PhoenixObjects\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/loaders/phoenix-loader.ts\n            \n            class\n            PhoenixLoader\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                src/loaders/script-loader.ts\n            \n            class\n            ScriptLoader\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/loaders/script-loader.ts\n            \n            variable\n            JSROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/loaders/trackml-loader.ts\n            \n            class\n            TrackmlLoader\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/managers/loading-manager.ts\n            \n            class\n            LoadingManager\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/managers/state-manager.ts\n            \n            class\n            StateManager\n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                src/three/animations-manager.ts\n            \n            class\n            AnimationsManager\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/three/controls-manager.ts\n            \n            class\n            ControlsManager\n            \n                100 %\n                (33/33)\n            \n        \n        \n            \n                \n                src/three/effects-manager.ts\n            \n            class\n            EffectsManager\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/three/export-manager.ts\n            \n            class\n            ExportManager\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/three/import-manager.ts\n            \n            class\n            ImportManager\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/three/index.ts\n            \n            class\n            ThreeManager\n            \n                100 %\n                (58/58)\n            \n        \n        \n            \n                \n                src/three/renderer-manager.ts\n            \n            class\n            RendererManager\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/three/scene-manager.ts\n            \n            class\n            SceneManager\n            \n                100 %\n                (32/32)\n            \n        \n        \n            \n                \n                src/three/selection-manager.ts\n            \n            class\n            SelectionManager\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/three/vr-manager.ts\n            \n            class\n            VRManager\n            \n                91 %\n                (21/23)\n            \n        \n        \n            \n                \n                src/ui/index.ts\n            \n            class\n            UIManager\n            \n                100 %\n                (51/51)\n            \n        \n        \n            \n                \n                src/ui/phoenix-menu/phoenix-menu-node.ts\n            \n            class\n            PhoenixMenuNode\n            \n                100 %\n                (23/23)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @tweenjs/tween.js : ^17.4.0\n        \n            dat.gui : ^0.7.7\n        \n            jszip : ^3.5.0\n        \n            stats-js : ^1.0.1\n        \n            three : ^0.122.0\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nPhoenix event display\n\n\n\nA highly modular and API driven experiment independent event display that uses three.js for processing and presenting detector geometry and event data.\nTo use in your application. First, install the npm package.\nnpm install phoenix-event-displayUsage\nTo create a simple event display.\n// Import required classes\nimport { EventDisplay, PhoenixLoader } from 'phoenix-event-display';\n\n// Create the event display\nconst eventDisplay = new EventDisplay();\n\n// Define the configuration\nconst configuration = {\n  elementId: '',\n  eventDataLoader: new PhoenixLoader() // or some other event data loader\n  // ... other configuration options\n};\n\n// Initialize the event display with the configuration\neventDisplay.init(configuration);\n\n// Load and parse event data in Phoenix format and display it\nfetch('path/to/event-data.json')\n  .then((res) => res.json())\n  .then((res) => {\n    eventDisplay.parsePhoenixEvents(res);\n  });\n\n// Load detector geometry\neventDisplay.loadOBJGeometry('path/to/geometry.obj', 'Detector OBJ', 0x8c8c8c /* color */);\nExamples\n\nUsage in Angular (as a service)\nUsage in React\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    32 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EVENT_DATA_TYPE_COLORS   (src/.../constants.ts)\n                        \n                        \n                            JSROOT   (src/.../script-loader.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/helpers/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EVENT_DATA_TYPE_COLORS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  Hits: new Color(0xff0000),\n  Tracks: new Color(0xff0000),\n  Jets: new Color(0x2194CE),\n  CaloClusters: new Color(0xffd166),\n  MuonChambers: new Color(0xff0000),\n  Vertices: new Color(0xFFD166)\n}\n                        \n                    \n\n                \n                    \n                        Colors of different event data types. \n\n                    \n                \n\n            \n        \n\n    src/loaders/script-loader.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            JSROOT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n                \n                    \n                        Global JSROOT variable for accessing functions after loading JSRoot scripts. \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
